/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrderCalculateSubtotal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderCalculateSubtotal{}

// OrderCalculateSubtotal struct for OrderCalculateSubtotal
type OrderCalculateSubtotal struct {
	Value *float32 `json:"value,omitempty"`
	Tax *float32 `json:"tax,omitempty"`
	Discount *float32 `json:"discount,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewOrderCalculateSubtotal instantiates a new OrderCalculateSubtotal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderCalculateSubtotal() *OrderCalculateSubtotal {
	this := OrderCalculateSubtotal{}
	return &this
}

// NewOrderCalculateSubtotalWithDefaults instantiates a new OrderCalculateSubtotal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderCalculateSubtotalWithDefaults() *OrderCalculateSubtotal {
	this := OrderCalculateSubtotal{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *OrderCalculateSubtotal) GetValue() float32 {
	if o == nil || IsNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCalculateSubtotal) GetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *OrderCalculateSubtotal) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *OrderCalculateSubtotal) SetValue(v float32) {
	o.Value = &v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *OrderCalculateSubtotal) GetTax() float32 {
	if o == nil || IsNil(o.Tax) {
		var ret float32
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCalculateSubtotal) GetTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *OrderCalculateSubtotal) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given float32 and assigns it to the Tax field.
func (o *OrderCalculateSubtotal) SetTax(v float32) {
	o.Tax = &v
}

// GetDiscount returns the Discount field value if set, zero value otherwise.
func (o *OrderCalculateSubtotal) GetDiscount() float32 {
	if o == nil || IsNil(o.Discount) {
		var ret float32
		return ret
	}
	return *o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCalculateSubtotal) GetDiscountOk() (*float32, bool) {
	if o == nil || IsNil(o.Discount) {
		return nil, false
	}
	return o.Discount, true
}

// HasDiscount returns a boolean if a field has been set.
func (o *OrderCalculateSubtotal) HasDiscount() bool {
	if o != nil && !IsNil(o.Discount) {
		return true
	}

	return false
}

// SetDiscount gets a reference to the given float32 and assigns it to the Discount field.
func (o *OrderCalculateSubtotal) SetDiscount(v float32) {
	o.Discount = &v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderCalculateSubtotal) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderCalculateSubtotal) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *OrderCalculateSubtotal) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *OrderCalculateSubtotal) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderCalculateSubtotal) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderCalculateSubtotal) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *OrderCalculateSubtotal) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *OrderCalculateSubtotal) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o OrderCalculateSubtotal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderCalculateSubtotal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	if !IsNil(o.Discount) {
		toSerialize["discount"] = o.Discount
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableOrderCalculateSubtotal struct {
	value *OrderCalculateSubtotal
	isSet bool
}

func (v NullableOrderCalculateSubtotal) Get() *OrderCalculateSubtotal {
	return v.value
}

func (v *NullableOrderCalculateSubtotal) Set(val *OrderCalculateSubtotal) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderCalculateSubtotal) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderCalculateSubtotal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderCalculateSubtotal(val *OrderCalculateSubtotal) *NullableOrderCalculateSubtotal {
	return &NullableOrderCalculateSubtotal{value: val, isSet: true}
}

func (v NullableOrderCalculateSubtotal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderCalculateSubtotal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


