/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StoreAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoreAttribute{}

// StoreAttribute struct for StoreAttribute
type StoreAttribute struct {
	Id *string `json:"id,omitempty"`
	Code NullableString `json:"code,omitempty"`
	Type *string `json:"type,omitempty"`
	Name *string `json:"name,omitempty"`
	DefaultValues []string `json:"default_values,omitempty"`
	Position NullableInt32 `json:"position,omitempty"`
	Visible NullableBool `json:"visible,omitempty"`
	Required NullableBool `json:"required,omitempty"`
	System NullableBool `json:"system,omitempty"`
	Values []string `json:"values,omitempty"`
	StoreId NullableString `json:"store_id,omitempty"`
	LangId NullableString `json:"lang_id,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewStoreAttribute instantiates a new StoreAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreAttribute() *StoreAttribute {
	this := StoreAttribute{}
	return &this
}

// NewStoreAttributeWithDefaults instantiates a new StoreAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreAttributeWithDefaults() *StoreAttribute {
	this := StoreAttribute{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StoreAttribute) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreAttribute) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StoreAttribute) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StoreAttribute) SetId(v string) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoreAttribute) GetCode() string {
	if o == nil || IsNil(o.Code.Get()) {
		var ret string
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoreAttribute) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field has been set.
func (o *StoreAttribute) HasCode() bool {
	if o != nil && o.Code.IsSet() {
		return true
	}

	return false
}

// SetCode gets a reference to the given NullableString and assigns it to the Code field.
func (o *StoreAttribute) SetCode(v string) {
	o.Code.Set(&v)
}
// SetCodeNil sets the value for Code to be an explicit nil
func (o *StoreAttribute) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *StoreAttribute) UnsetCode() {
	o.Code.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StoreAttribute) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreAttribute) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StoreAttribute) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StoreAttribute) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StoreAttribute) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreAttribute) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StoreAttribute) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StoreAttribute) SetName(v string) {
	o.Name = &v
}

// GetDefaultValues returns the DefaultValues field value if set, zero value otherwise.
func (o *StoreAttribute) GetDefaultValues() []string {
	if o == nil || IsNil(o.DefaultValues) {
		var ret []string
		return ret
	}
	return o.DefaultValues
}

// GetDefaultValuesOk returns a tuple with the DefaultValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreAttribute) GetDefaultValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.DefaultValues) {
		return nil, false
	}
	return o.DefaultValues, true
}

// HasDefaultValues returns a boolean if a field has been set.
func (o *StoreAttribute) HasDefaultValues() bool {
	if o != nil && !IsNil(o.DefaultValues) {
		return true
	}

	return false
}

// SetDefaultValues gets a reference to the given []string and assigns it to the DefaultValues field.
func (o *StoreAttribute) SetDefaultValues(v []string) {
	o.DefaultValues = v
}

// GetPosition returns the Position field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoreAttribute) GetPosition() int32 {
	if o == nil || IsNil(o.Position.Get()) {
		var ret int32
		return ret
	}
	return *o.Position.Get()
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoreAttribute) GetPositionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Position.Get(), o.Position.IsSet()
}

// HasPosition returns a boolean if a field has been set.
func (o *StoreAttribute) HasPosition() bool {
	if o != nil && o.Position.IsSet() {
		return true
	}

	return false
}

// SetPosition gets a reference to the given NullableInt32 and assigns it to the Position field.
func (o *StoreAttribute) SetPosition(v int32) {
	o.Position.Set(&v)
}
// SetPositionNil sets the value for Position to be an explicit nil
func (o *StoreAttribute) SetPositionNil() {
	o.Position.Set(nil)
}

// UnsetPosition ensures that no value is present for Position, not even an explicit nil
func (o *StoreAttribute) UnsetPosition() {
	o.Position.Unset()
}

// GetVisible returns the Visible field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoreAttribute) GetVisible() bool {
	if o == nil || IsNil(o.Visible.Get()) {
		var ret bool
		return ret
	}
	return *o.Visible.Get()
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoreAttribute) GetVisibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Visible.Get(), o.Visible.IsSet()
}

// HasVisible returns a boolean if a field has been set.
func (o *StoreAttribute) HasVisible() bool {
	if o != nil && o.Visible.IsSet() {
		return true
	}

	return false
}

// SetVisible gets a reference to the given NullableBool and assigns it to the Visible field.
func (o *StoreAttribute) SetVisible(v bool) {
	o.Visible.Set(&v)
}
// SetVisibleNil sets the value for Visible to be an explicit nil
func (o *StoreAttribute) SetVisibleNil() {
	o.Visible.Set(nil)
}

// UnsetVisible ensures that no value is present for Visible, not even an explicit nil
func (o *StoreAttribute) UnsetVisible() {
	o.Visible.Unset()
}

// GetRequired returns the Required field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoreAttribute) GetRequired() bool {
	if o == nil || IsNil(o.Required.Get()) {
		var ret bool
		return ret
	}
	return *o.Required.Get()
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoreAttribute) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Required.Get(), o.Required.IsSet()
}

// HasRequired returns a boolean if a field has been set.
func (o *StoreAttribute) HasRequired() bool {
	if o != nil && o.Required.IsSet() {
		return true
	}

	return false
}

// SetRequired gets a reference to the given NullableBool and assigns it to the Required field.
func (o *StoreAttribute) SetRequired(v bool) {
	o.Required.Set(&v)
}
// SetRequiredNil sets the value for Required to be an explicit nil
func (o *StoreAttribute) SetRequiredNil() {
	o.Required.Set(nil)
}

// UnsetRequired ensures that no value is present for Required, not even an explicit nil
func (o *StoreAttribute) UnsetRequired() {
	o.Required.Unset()
}

// GetSystem returns the System field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoreAttribute) GetSystem() bool {
	if o == nil || IsNil(o.System.Get()) {
		var ret bool
		return ret
	}
	return *o.System.Get()
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoreAttribute) GetSystemOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.System.Get(), o.System.IsSet()
}

// HasSystem returns a boolean if a field has been set.
func (o *StoreAttribute) HasSystem() bool {
	if o != nil && o.System.IsSet() {
		return true
	}

	return false
}

// SetSystem gets a reference to the given NullableBool and assigns it to the System field.
func (o *StoreAttribute) SetSystem(v bool) {
	o.System.Set(&v)
}
// SetSystemNil sets the value for System to be an explicit nil
func (o *StoreAttribute) SetSystemNil() {
	o.System.Set(nil)
}

// UnsetSystem ensures that no value is present for System, not even an explicit nil
func (o *StoreAttribute) UnsetSystem() {
	o.System.Unset()
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *StoreAttribute) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreAttribute) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *StoreAttribute) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *StoreAttribute) SetValues(v []string) {
	o.Values = v
}

// GetStoreId returns the StoreId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoreAttribute) GetStoreId() string {
	if o == nil || IsNil(o.StoreId.Get()) {
		var ret string
		return ret
	}
	return *o.StoreId.Get()
}

// GetStoreIdOk returns a tuple with the StoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoreAttribute) GetStoreIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StoreId.Get(), o.StoreId.IsSet()
}

// HasStoreId returns a boolean if a field has been set.
func (o *StoreAttribute) HasStoreId() bool {
	if o != nil && o.StoreId.IsSet() {
		return true
	}

	return false
}

// SetStoreId gets a reference to the given NullableString and assigns it to the StoreId field.
func (o *StoreAttribute) SetStoreId(v string) {
	o.StoreId.Set(&v)
}
// SetStoreIdNil sets the value for StoreId to be an explicit nil
func (o *StoreAttribute) SetStoreIdNil() {
	o.StoreId.Set(nil)
}

// UnsetStoreId ensures that no value is present for StoreId, not even an explicit nil
func (o *StoreAttribute) UnsetStoreId() {
	o.StoreId.Unset()
}

// GetLangId returns the LangId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoreAttribute) GetLangId() string {
	if o == nil || IsNil(o.LangId.Get()) {
		var ret string
		return ret
	}
	return *o.LangId.Get()
}

// GetLangIdOk returns a tuple with the LangId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoreAttribute) GetLangIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LangId.Get(), o.LangId.IsSet()
}

// HasLangId returns a boolean if a field has been set.
func (o *StoreAttribute) HasLangId() bool {
	if o != nil && o.LangId.IsSet() {
		return true
	}

	return false
}

// SetLangId gets a reference to the given NullableString and assigns it to the LangId field.
func (o *StoreAttribute) SetLangId(v string) {
	o.LangId.Set(&v)
}
// SetLangIdNil sets the value for LangId to be an explicit nil
func (o *StoreAttribute) SetLangIdNil() {
	o.LangId.Set(nil)
}

// UnsetLangId ensures that no value is present for LangId, not even an explicit nil
func (o *StoreAttribute) UnsetLangId() {
	o.LangId.Unset()
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoreAttribute) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoreAttribute) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *StoreAttribute) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *StoreAttribute) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoreAttribute) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoreAttribute) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *StoreAttribute) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *StoreAttribute) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o StoreAttribute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoreAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Code.IsSet() {
		toSerialize["code"] = o.Code.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DefaultValues) {
		toSerialize["default_values"] = o.DefaultValues
	}
	if o.Position.IsSet() {
		toSerialize["position"] = o.Position.Get()
	}
	if o.Visible.IsSet() {
		toSerialize["visible"] = o.Visible.Get()
	}
	if o.Required.IsSet() {
		toSerialize["required"] = o.Required.Get()
	}
	if o.System.IsSet() {
		toSerialize["system"] = o.System.Get()
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if o.StoreId.IsSet() {
		toSerialize["store_id"] = o.StoreId.Get()
	}
	if o.LangId.IsSet() {
		toSerialize["lang_id"] = o.LangId.Get()
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableStoreAttribute struct {
	value *StoreAttribute
	isSet bool
}

func (v NullableStoreAttribute) Get() *StoreAttribute {
	return v.value
}

func (v *NullableStoreAttribute) Set(val *StoreAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreAttribute(val *StoreAttribute) *NullableStoreAttribute {
	return &NullableStoreAttribute{value: val, isSet: true}
}

func (v NullableStoreAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


