/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Currency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Currency{}

// Currency struct for Currency
type Currency struct {
	Id *string `json:"id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Iso3 *string `json:"iso3,omitempty"`
	SymbolLeft *string `json:"symbol_left,omitempty"`
	SymbolRight NullableString `json:"symbol_right,omitempty"`
	Rate NullableFloat32 `json:"rate,omitempty"`
	Avail NullableBool `json:"avail,omitempty"`
	Default NullableBool `json:"default,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewCurrency instantiates a new Currency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrency() *Currency {
	this := Currency{}
	return &this
}

// NewCurrencyWithDefaults instantiates a new Currency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyWithDefaults() *Currency {
	this := Currency{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Currency) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Currency) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Currency) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Currency) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Currency) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Currency) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Currency) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Currency) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Currency) UnsetName() {
	o.Name.Unset()
}

// GetIso3 returns the Iso3 field value if set, zero value otherwise.
func (o *Currency) GetIso3() string {
	if o == nil || IsNil(o.Iso3) {
		var ret string
		return ret
	}
	return *o.Iso3
}

// GetIso3Ok returns a tuple with the Iso3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetIso3Ok() (*string, bool) {
	if o == nil || IsNil(o.Iso3) {
		return nil, false
	}
	return o.Iso3, true
}

// HasIso3 returns a boolean if a field has been set.
func (o *Currency) HasIso3() bool {
	if o != nil && !IsNil(o.Iso3) {
		return true
	}

	return false
}

// SetIso3 gets a reference to the given string and assigns it to the Iso3 field.
func (o *Currency) SetIso3(v string) {
	o.Iso3 = &v
}

// GetSymbolLeft returns the SymbolLeft field value if set, zero value otherwise.
func (o *Currency) GetSymbolLeft() string {
	if o == nil || IsNil(o.SymbolLeft) {
		var ret string
		return ret
	}
	return *o.SymbolLeft
}

// GetSymbolLeftOk returns a tuple with the SymbolLeft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetSymbolLeftOk() (*string, bool) {
	if o == nil || IsNil(o.SymbolLeft) {
		return nil, false
	}
	return o.SymbolLeft, true
}

// HasSymbolLeft returns a boolean if a field has been set.
func (o *Currency) HasSymbolLeft() bool {
	if o != nil && !IsNil(o.SymbolLeft) {
		return true
	}

	return false
}

// SetSymbolLeft gets a reference to the given string and assigns it to the SymbolLeft field.
func (o *Currency) SetSymbolLeft(v string) {
	o.SymbolLeft = &v
}

// GetSymbolRight returns the SymbolRight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Currency) GetSymbolRight() string {
	if o == nil || IsNil(o.SymbolRight.Get()) {
		var ret string
		return ret
	}
	return *o.SymbolRight.Get()
}

// GetSymbolRightOk returns a tuple with the SymbolRight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Currency) GetSymbolRightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SymbolRight.Get(), o.SymbolRight.IsSet()
}

// HasSymbolRight returns a boolean if a field has been set.
func (o *Currency) HasSymbolRight() bool {
	if o != nil && o.SymbolRight.IsSet() {
		return true
	}

	return false
}

// SetSymbolRight gets a reference to the given NullableString and assigns it to the SymbolRight field.
func (o *Currency) SetSymbolRight(v string) {
	o.SymbolRight.Set(&v)
}
// SetSymbolRightNil sets the value for SymbolRight to be an explicit nil
func (o *Currency) SetSymbolRightNil() {
	o.SymbolRight.Set(nil)
}

// UnsetSymbolRight ensures that no value is present for SymbolRight, not even an explicit nil
func (o *Currency) UnsetSymbolRight() {
	o.SymbolRight.Unset()
}

// GetRate returns the Rate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Currency) GetRate() float32 {
	if o == nil || IsNil(o.Rate.Get()) {
		var ret float32
		return ret
	}
	return *o.Rate.Get()
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Currency) GetRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rate.Get(), o.Rate.IsSet()
}

// HasRate returns a boolean if a field has been set.
func (o *Currency) HasRate() bool {
	if o != nil && o.Rate.IsSet() {
		return true
	}

	return false
}

// SetRate gets a reference to the given NullableFloat32 and assigns it to the Rate field.
func (o *Currency) SetRate(v float32) {
	o.Rate.Set(&v)
}
// SetRateNil sets the value for Rate to be an explicit nil
func (o *Currency) SetRateNil() {
	o.Rate.Set(nil)
}

// UnsetRate ensures that no value is present for Rate, not even an explicit nil
func (o *Currency) UnsetRate() {
	o.Rate.Unset()
}

// GetAvail returns the Avail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Currency) GetAvail() bool {
	if o == nil || IsNil(o.Avail.Get()) {
		var ret bool
		return ret
	}
	return *o.Avail.Get()
}

// GetAvailOk returns a tuple with the Avail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Currency) GetAvailOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avail.Get(), o.Avail.IsSet()
}

// HasAvail returns a boolean if a field has been set.
func (o *Currency) HasAvail() bool {
	if o != nil && o.Avail.IsSet() {
		return true
	}

	return false
}

// SetAvail gets a reference to the given NullableBool and assigns it to the Avail field.
func (o *Currency) SetAvail(v bool) {
	o.Avail.Set(&v)
}
// SetAvailNil sets the value for Avail to be an explicit nil
func (o *Currency) SetAvailNil() {
	o.Avail.Set(nil)
}

// UnsetAvail ensures that no value is present for Avail, not even an explicit nil
func (o *Currency) UnsetAvail() {
	o.Avail.Unset()
}

// GetDefault returns the Default field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Currency) GetDefault() bool {
	if o == nil || IsNil(o.Default.Get()) {
		var ret bool
		return ret
	}
	return *o.Default.Get()
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Currency) GetDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Default.Get(), o.Default.IsSet()
}

// HasDefault returns a boolean if a field has been set.
func (o *Currency) HasDefault() bool {
	if o != nil && o.Default.IsSet() {
		return true
	}

	return false
}

// SetDefault gets a reference to the given NullableBool and assigns it to the Default field.
func (o *Currency) SetDefault(v bool) {
	o.Default.Set(&v)
}
// SetDefaultNil sets the value for Default to be an explicit nil
func (o *Currency) SetDefaultNil() {
	o.Default.Set(nil)
}

// UnsetDefault ensures that no value is present for Default, not even an explicit nil
func (o *Currency) UnsetDefault() {
	o.Default.Unset()
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Currency) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Currency) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *Currency) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *Currency) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Currency) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Currency) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Currency) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *Currency) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o Currency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Currency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.Iso3) {
		toSerialize["iso3"] = o.Iso3
	}
	if !IsNil(o.SymbolLeft) {
		toSerialize["symbol_left"] = o.SymbolLeft
	}
	if o.SymbolRight.IsSet() {
		toSerialize["symbol_right"] = o.SymbolRight.Get()
	}
	if o.Rate.IsSet() {
		toSerialize["rate"] = o.Rate.Get()
	}
	if o.Avail.IsSet() {
		toSerialize["avail"] = o.Avail.Get()
	}
	if o.Default.IsSet() {
		toSerialize["default"] = o.Default.Get()
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableCurrency struct {
	value *Currency
	isSet bool
}

func (v NullableCurrency) Get() *Currency {
	return v.value
}

func (v *NullableCurrency) Set(val *Currency) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrency(val *Currency) *NullableCurrency {
	return &NullableCurrency{value: val, isSet: true}
}

func (v NullableCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


