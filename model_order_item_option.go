/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrderItemOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderItemOption{}

// OrderItemOption struct for OrderItemOption
type OrderItemOption struct {
	OptionId NullableString `json:"option_id,omitempty"`
	Name *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
	Price *float32 `json:"price,omitempty"`
	Weight NullableFloat32 `json:"weight,omitempty"`
	Type NullableString `json:"type,omitempty"`
	ProductOptionValueId NullableString `json:"product_option_value_id,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewOrderItemOption instantiates a new OrderItemOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderItemOption() *OrderItemOption {
	this := OrderItemOption{}
	return &this
}

// NewOrderItemOptionWithDefaults instantiates a new OrderItemOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderItemOptionWithDefaults() *OrderItemOption {
	this := OrderItemOption{}
	return &this
}

// GetOptionId returns the OptionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItemOption) GetOptionId() string {
	if o == nil || IsNil(o.OptionId.Get()) {
		var ret string
		return ret
	}
	return *o.OptionId.Get()
}

// GetOptionIdOk returns a tuple with the OptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItemOption) GetOptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OptionId.Get(), o.OptionId.IsSet()
}

// HasOptionId returns a boolean if a field has been set.
func (o *OrderItemOption) HasOptionId() bool {
	if o != nil && o.OptionId.IsSet() {
		return true
	}

	return false
}

// SetOptionId gets a reference to the given NullableString and assigns it to the OptionId field.
func (o *OrderItemOption) SetOptionId(v string) {
	o.OptionId.Set(&v)
}
// SetOptionIdNil sets the value for OptionId to be an explicit nil
func (o *OrderItemOption) SetOptionIdNil() {
	o.OptionId.Set(nil)
}

// UnsetOptionId ensures that no value is present for OptionId, not even an explicit nil
func (o *OrderItemOption) UnsetOptionId() {
	o.OptionId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OrderItemOption) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemOption) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OrderItemOption) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OrderItemOption) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *OrderItemOption) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemOption) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *OrderItemOption) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *OrderItemOption) SetValue(v string) {
	o.Value = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *OrderItemOption) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemOption) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *OrderItemOption) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *OrderItemOption) SetPrice(v float32) {
	o.Price = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItemOption) GetWeight() float32 {
	if o == nil || IsNil(o.Weight.Get()) {
		var ret float32
		return ret
	}
	return *o.Weight.Get()
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItemOption) GetWeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Weight.Get(), o.Weight.IsSet()
}

// HasWeight returns a boolean if a field has been set.
func (o *OrderItemOption) HasWeight() bool {
	if o != nil && o.Weight.IsSet() {
		return true
	}

	return false
}

// SetWeight gets a reference to the given NullableFloat32 and assigns it to the Weight field.
func (o *OrderItemOption) SetWeight(v float32) {
	o.Weight.Set(&v)
}
// SetWeightNil sets the value for Weight to be an explicit nil
func (o *OrderItemOption) SetWeightNil() {
	o.Weight.Set(nil)
}

// UnsetWeight ensures that no value is present for Weight, not even an explicit nil
func (o *OrderItemOption) UnsetWeight() {
	o.Weight.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItemOption) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItemOption) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *OrderItemOption) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *OrderItemOption) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *OrderItemOption) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *OrderItemOption) UnsetType() {
	o.Type.Unset()
}

// GetProductOptionValueId returns the ProductOptionValueId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItemOption) GetProductOptionValueId() string {
	if o == nil || IsNil(o.ProductOptionValueId.Get()) {
		var ret string
		return ret
	}
	return *o.ProductOptionValueId.Get()
}

// GetProductOptionValueIdOk returns a tuple with the ProductOptionValueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItemOption) GetProductOptionValueIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductOptionValueId.Get(), o.ProductOptionValueId.IsSet()
}

// HasProductOptionValueId returns a boolean if a field has been set.
func (o *OrderItemOption) HasProductOptionValueId() bool {
	if o != nil && o.ProductOptionValueId.IsSet() {
		return true
	}

	return false
}

// SetProductOptionValueId gets a reference to the given NullableString and assigns it to the ProductOptionValueId field.
func (o *OrderItemOption) SetProductOptionValueId(v string) {
	o.ProductOptionValueId.Set(&v)
}
// SetProductOptionValueIdNil sets the value for ProductOptionValueId to be an explicit nil
func (o *OrderItemOption) SetProductOptionValueIdNil() {
	o.ProductOptionValueId.Set(nil)
}

// UnsetProductOptionValueId ensures that no value is present for ProductOptionValueId, not even an explicit nil
func (o *OrderItemOption) UnsetProductOptionValueId() {
	o.ProductOptionValueId.Unset()
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItemOption) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItemOption) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *OrderItemOption) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *OrderItemOption) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItemOption) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItemOption) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *OrderItemOption) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *OrderItemOption) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o OrderItemOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderItemOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.OptionId.IsSet() {
		toSerialize["option_id"] = o.OptionId.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if o.Weight.IsSet() {
		toSerialize["weight"] = o.Weight.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.ProductOptionValueId.IsSet() {
		toSerialize["product_option_value_id"] = o.ProductOptionValueId.Get()
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableOrderItemOption struct {
	value *OrderItemOption
	isSet bool
}

func (v NullableOrderItemOption) Get() *OrderItemOption {
	return v.value
}

func (v *NullableOrderItemOption) Set(val *OrderItemOption) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderItemOption) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderItemOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderItemOption(val *OrderItemOption) *NullableOrderItemOption {
	return &NullableOrderItemOption{value: val, isSet: true}
}

func (v NullableOrderItemOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderItemOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


