/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CartWarehouse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CartWarehouse{}

// CartWarehouse struct for CartWarehouse
type CartWarehouse struct {
	Id NullableString `json:"id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Avail NullableBool `json:"avail,omitempty"`
	Address NullableCustomerAddress `json:"address,omitempty"`
	CarriersIds []string `json:"carriers_ids,omitempty"`
	StoresIds []string `json:"stores_ids,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewCartWarehouse instantiates a new CartWarehouse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCartWarehouse() *CartWarehouse {
	this := CartWarehouse{}
	return &this
}

// NewCartWarehouseWithDefaults instantiates a new CartWarehouse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCartWarehouseWithDefaults() *CartWarehouse {
	this := CartWarehouse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CartWarehouse) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CartWarehouse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CartWarehouse) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CartWarehouse) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CartWarehouse) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CartWarehouse) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CartWarehouse) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CartWarehouse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CartWarehouse) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CartWarehouse) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CartWarehouse) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CartWarehouse) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CartWarehouse) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CartWarehouse) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CartWarehouse) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CartWarehouse) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CartWarehouse) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CartWarehouse) UnsetDescription() {
	o.Description.Unset()
}

// GetAvail returns the Avail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CartWarehouse) GetAvail() bool {
	if o == nil || IsNil(o.Avail.Get()) {
		var ret bool
		return ret
	}
	return *o.Avail.Get()
}

// GetAvailOk returns a tuple with the Avail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CartWarehouse) GetAvailOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avail.Get(), o.Avail.IsSet()
}

// HasAvail returns a boolean if a field has been set.
func (o *CartWarehouse) HasAvail() bool {
	if o != nil && o.Avail.IsSet() {
		return true
	}

	return false
}

// SetAvail gets a reference to the given NullableBool and assigns it to the Avail field.
func (o *CartWarehouse) SetAvail(v bool) {
	o.Avail.Set(&v)
}
// SetAvailNil sets the value for Avail to be an explicit nil
func (o *CartWarehouse) SetAvailNil() {
	o.Avail.Set(nil)
}

// UnsetAvail ensures that no value is present for Avail, not even an explicit nil
func (o *CartWarehouse) UnsetAvail() {
	o.Avail.Unset()
}

// GetAddress returns the Address field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CartWarehouse) GetAddress() CustomerAddress {
	if o == nil || IsNil(o.Address.Get()) {
		var ret CustomerAddress
		return ret
	}
	return *o.Address.Get()
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CartWarehouse) GetAddressOk() (*CustomerAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.Address.Get(), o.Address.IsSet()
}

// HasAddress returns a boolean if a field has been set.
func (o *CartWarehouse) HasAddress() bool {
	if o != nil && o.Address.IsSet() {
		return true
	}

	return false
}

// SetAddress gets a reference to the given NullableCustomerAddress and assigns it to the Address field.
func (o *CartWarehouse) SetAddress(v CustomerAddress) {
	o.Address.Set(&v)
}
// SetAddressNil sets the value for Address to be an explicit nil
func (o *CartWarehouse) SetAddressNil() {
	o.Address.Set(nil)
}

// UnsetAddress ensures that no value is present for Address, not even an explicit nil
func (o *CartWarehouse) UnsetAddress() {
	o.Address.Unset()
}

// GetCarriersIds returns the CarriersIds field value if set, zero value otherwise.
func (o *CartWarehouse) GetCarriersIds() []string {
	if o == nil || IsNil(o.CarriersIds) {
		var ret []string
		return ret
	}
	return o.CarriersIds
}

// GetCarriersIdsOk returns a tuple with the CarriersIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartWarehouse) GetCarriersIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.CarriersIds) {
		return nil, false
	}
	return o.CarriersIds, true
}

// HasCarriersIds returns a boolean if a field has been set.
func (o *CartWarehouse) HasCarriersIds() bool {
	if o != nil && !IsNil(o.CarriersIds) {
		return true
	}

	return false
}

// SetCarriersIds gets a reference to the given []string and assigns it to the CarriersIds field.
func (o *CartWarehouse) SetCarriersIds(v []string) {
	o.CarriersIds = v
}

// GetStoresIds returns the StoresIds field value if set, zero value otherwise.
func (o *CartWarehouse) GetStoresIds() []string {
	if o == nil || IsNil(o.StoresIds) {
		var ret []string
		return ret
	}
	return o.StoresIds
}

// GetStoresIdsOk returns a tuple with the StoresIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartWarehouse) GetStoresIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.StoresIds) {
		return nil, false
	}
	return o.StoresIds, true
}

// HasStoresIds returns a boolean if a field has been set.
func (o *CartWarehouse) HasStoresIds() bool {
	if o != nil && !IsNil(o.StoresIds) {
		return true
	}

	return false
}

// SetStoresIds gets a reference to the given []string and assigns it to the StoresIds field.
func (o *CartWarehouse) SetStoresIds(v []string) {
	o.StoresIds = v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CartWarehouse) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CartWarehouse) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *CartWarehouse) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *CartWarehouse) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CartWarehouse) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CartWarehouse) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *CartWarehouse) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *CartWarehouse) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o CartWarehouse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CartWarehouse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Avail.IsSet() {
		toSerialize["avail"] = o.Avail.Get()
	}
	if o.Address.IsSet() {
		toSerialize["address"] = o.Address.Get()
	}
	if !IsNil(o.CarriersIds) {
		toSerialize["carriers_ids"] = o.CarriersIds
	}
	if !IsNil(o.StoresIds) {
		toSerialize["stores_ids"] = o.StoresIds
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableCartWarehouse struct {
	value *CartWarehouse
	isSet bool
}

func (v NullableCartWarehouse) Get() *CartWarehouse {
	return v.value
}

func (v *NullableCartWarehouse) Set(val *CartWarehouse) {
	v.value = val
	v.isSet = true
}

func (v NullableCartWarehouse) IsSet() bool {
	return v.isSet
}

func (v *NullableCartWarehouse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCartWarehouse(val *CartWarehouse) *NullableCartWarehouse {
	return &NullableCartWarehouse{value: val, isSet: true}
}

func (v NullableCartWarehouse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCartWarehouse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


