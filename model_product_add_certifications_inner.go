/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProductAddCertificationsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductAddCertificationsInner{}

// ProductAddCertificationsInner struct for ProductAddCertificationsInner
type ProductAddCertificationsInner struct {
	// Certification ID
	Id string `json:"id"`
	// Certification images
	Images []ProductAddCertificationsInnerImagesInner `json:"images,omitempty"`
	// Certification files
	Files []ProductAddCertificationsInnerFilesInner `json:"files,omitempty"`
}

type _ProductAddCertificationsInner ProductAddCertificationsInner

// NewProductAddCertificationsInner instantiates a new ProductAddCertificationsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductAddCertificationsInner(id string) *ProductAddCertificationsInner {
	this := ProductAddCertificationsInner{}
	this.Id = id
	return &this
}

// NewProductAddCertificationsInnerWithDefaults instantiates a new ProductAddCertificationsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductAddCertificationsInnerWithDefaults() *ProductAddCertificationsInner {
	this := ProductAddCertificationsInner{}
	return &this
}

// GetId returns the Id field value
func (o *ProductAddCertificationsInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProductAddCertificationsInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProductAddCertificationsInner) SetId(v string) {
	o.Id = v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *ProductAddCertificationsInner) GetImages() []ProductAddCertificationsInnerImagesInner {
	if o == nil || IsNil(o.Images) {
		var ret []ProductAddCertificationsInnerImagesInner
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAddCertificationsInner) GetImagesOk() ([]ProductAddCertificationsInnerImagesInner, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *ProductAddCertificationsInner) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []ProductAddCertificationsInnerImagesInner and assigns it to the Images field.
func (o *ProductAddCertificationsInner) SetImages(v []ProductAddCertificationsInnerImagesInner) {
	o.Images = v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *ProductAddCertificationsInner) GetFiles() []ProductAddCertificationsInnerFilesInner {
	if o == nil || IsNil(o.Files) {
		var ret []ProductAddCertificationsInnerFilesInner
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAddCertificationsInner) GetFilesOk() ([]ProductAddCertificationsInnerFilesInner, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *ProductAddCertificationsInner) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []ProductAddCertificationsInnerFilesInner and assigns it to the Files field.
func (o *ProductAddCertificationsInner) SetFiles(v []ProductAddCertificationsInnerFilesInner) {
	o.Files = v
}

func (o ProductAddCertificationsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductAddCertificationsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	return toSerialize, nil
}

func (o *ProductAddCertificationsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductAddCertificationsInner := _ProductAddCertificationsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductAddCertificationsInner)

	if err != nil {
		return err
	}

	*o = ProductAddCertificationsInner(varProductAddCertificationsInner)

	return err
}

type NullableProductAddCertificationsInner struct {
	value *ProductAddCertificationsInner
	isSet bool
}

func (v NullableProductAddCertificationsInner) Get() *ProductAddCertificationsInner {
	return v.value
}

func (v *NullableProductAddCertificationsInner) Set(val *ProductAddCertificationsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableProductAddCertificationsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableProductAddCertificationsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductAddCertificationsInner(val *ProductAddCertificationsInner) *NullableProductAddCertificationsInner {
	return &NullableProductAddCertificationsInner{value: val, isSet: true}
}

func (v NullableProductAddCertificationsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductAddCertificationsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


