/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CatalogPriceRuleAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogPriceRuleAction{}

// CatalogPriceRuleAction struct for CatalogPriceRuleAction
type CatalogPriceRuleAction struct {
	Scope *string `json:"scope,omitempty"`
	ApplyTo *string `json:"apply_to,omitempty"`
	Type *string `json:"type,omitempty"`
	Quantity NullableFloat32 `json:"quantity,omitempty"`
	Value *float32 `json:"value,omitempty"`
	CurrencyCode NullableString `json:"currency_code,omitempty"`
	IncludeTax NullableBool `json:"include_tax,omitempty"`
	Conditions []CouponCondition `json:"conditions,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewCatalogPriceRuleAction instantiates a new CatalogPriceRuleAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogPriceRuleAction() *CatalogPriceRuleAction {
	this := CatalogPriceRuleAction{}
	return &this
}

// NewCatalogPriceRuleActionWithDefaults instantiates a new CatalogPriceRuleAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogPriceRuleActionWithDefaults() *CatalogPriceRuleAction {
	this := CatalogPriceRuleAction{}
	return &this
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *CatalogPriceRuleAction) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogPriceRuleAction) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *CatalogPriceRuleAction) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *CatalogPriceRuleAction) SetScope(v string) {
	o.Scope = &v
}

// GetApplyTo returns the ApplyTo field value if set, zero value otherwise.
func (o *CatalogPriceRuleAction) GetApplyTo() string {
	if o == nil || IsNil(o.ApplyTo) {
		var ret string
		return ret
	}
	return *o.ApplyTo
}

// GetApplyToOk returns a tuple with the ApplyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogPriceRuleAction) GetApplyToOk() (*string, bool) {
	if o == nil || IsNil(o.ApplyTo) {
		return nil, false
	}
	return o.ApplyTo, true
}

// HasApplyTo returns a boolean if a field has been set.
func (o *CatalogPriceRuleAction) HasApplyTo() bool {
	if o != nil && !IsNil(o.ApplyTo) {
		return true
	}

	return false
}

// SetApplyTo gets a reference to the given string and assigns it to the ApplyTo field.
func (o *CatalogPriceRuleAction) SetApplyTo(v string) {
	o.ApplyTo = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CatalogPriceRuleAction) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogPriceRuleAction) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CatalogPriceRuleAction) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CatalogPriceRuleAction) SetType(v string) {
	o.Type = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPriceRuleAction) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity.Get()) {
		var ret float32
		return ret
	}
	return *o.Quantity.Get()
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPriceRuleAction) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quantity.Get(), o.Quantity.IsSet()
}

// HasQuantity returns a boolean if a field has been set.
func (o *CatalogPriceRuleAction) HasQuantity() bool {
	if o != nil && o.Quantity.IsSet() {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given NullableFloat32 and assigns it to the Quantity field.
func (o *CatalogPriceRuleAction) SetQuantity(v float32) {
	o.Quantity.Set(&v)
}
// SetQuantityNil sets the value for Quantity to be an explicit nil
func (o *CatalogPriceRuleAction) SetQuantityNil() {
	o.Quantity.Set(nil)
}

// UnsetQuantity ensures that no value is present for Quantity, not even an explicit nil
func (o *CatalogPriceRuleAction) UnsetQuantity() {
	o.Quantity.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *CatalogPriceRuleAction) GetValue() float32 {
	if o == nil || IsNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogPriceRuleAction) GetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *CatalogPriceRuleAction) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *CatalogPriceRuleAction) SetValue(v float32) {
	o.Value = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPriceRuleAction) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode.Get()) {
		var ret string
		return ret
	}
	return *o.CurrencyCode.Get()
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPriceRuleAction) GetCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrencyCode.Get(), o.CurrencyCode.IsSet()
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *CatalogPriceRuleAction) HasCurrencyCode() bool {
	if o != nil && o.CurrencyCode.IsSet() {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given NullableString and assigns it to the CurrencyCode field.
func (o *CatalogPriceRuleAction) SetCurrencyCode(v string) {
	o.CurrencyCode.Set(&v)
}
// SetCurrencyCodeNil sets the value for CurrencyCode to be an explicit nil
func (o *CatalogPriceRuleAction) SetCurrencyCodeNil() {
	o.CurrencyCode.Set(nil)
}

// UnsetCurrencyCode ensures that no value is present for CurrencyCode, not even an explicit nil
func (o *CatalogPriceRuleAction) UnsetCurrencyCode() {
	o.CurrencyCode.Unset()
}

// GetIncludeTax returns the IncludeTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPriceRuleAction) GetIncludeTax() bool {
	if o == nil || IsNil(o.IncludeTax.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeTax.Get()
}

// GetIncludeTaxOk returns a tuple with the IncludeTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPriceRuleAction) GetIncludeTaxOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeTax.Get(), o.IncludeTax.IsSet()
}

// HasIncludeTax returns a boolean if a field has been set.
func (o *CatalogPriceRuleAction) HasIncludeTax() bool {
	if o != nil && o.IncludeTax.IsSet() {
		return true
	}

	return false
}

// SetIncludeTax gets a reference to the given NullableBool and assigns it to the IncludeTax field.
func (o *CatalogPriceRuleAction) SetIncludeTax(v bool) {
	o.IncludeTax.Set(&v)
}
// SetIncludeTaxNil sets the value for IncludeTax to be an explicit nil
func (o *CatalogPriceRuleAction) SetIncludeTaxNil() {
	o.IncludeTax.Set(nil)
}

// UnsetIncludeTax ensures that no value is present for IncludeTax, not even an explicit nil
func (o *CatalogPriceRuleAction) UnsetIncludeTax() {
	o.IncludeTax.Unset()
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *CatalogPriceRuleAction) GetConditions() []CouponCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []CouponCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogPriceRuleAction) GetConditionsOk() ([]CouponCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *CatalogPriceRuleAction) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []CouponCondition and assigns it to the Conditions field.
func (o *CatalogPriceRuleAction) SetConditions(v []CouponCondition) {
	o.Conditions = v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPriceRuleAction) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPriceRuleAction) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *CatalogPriceRuleAction) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *CatalogPriceRuleAction) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPriceRuleAction) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPriceRuleAction) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *CatalogPriceRuleAction) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *CatalogPriceRuleAction) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o CatalogPriceRuleAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogPriceRuleAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.ApplyTo) {
		toSerialize["apply_to"] = o.ApplyTo
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Quantity.IsSet() {
		toSerialize["quantity"] = o.Quantity.Get()
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if o.CurrencyCode.IsSet() {
		toSerialize["currency_code"] = o.CurrencyCode.Get()
	}
	if o.IncludeTax.IsSet() {
		toSerialize["include_tax"] = o.IncludeTax.Get()
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableCatalogPriceRuleAction struct {
	value *CatalogPriceRuleAction
	isSet bool
}

func (v NullableCatalogPriceRuleAction) Get() *CatalogPriceRuleAction {
	return v.value
}

func (v *NullableCatalogPriceRuleAction) Set(val *CatalogPriceRuleAction) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogPriceRuleAction) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogPriceRuleAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogPriceRuleAction(val *CatalogPriceRuleAction) *NullableCatalogPriceRuleAction {
	return &NullableCatalogPriceRuleAction{value: val, isSet: true}
}

func (v NullableCatalogPriceRuleAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogPriceRuleAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


