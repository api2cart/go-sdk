/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProductVariantAdd type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductVariantAdd{}

// ProductVariantAdd struct for ProductVariantAdd
type ProductVariantAdd struct {
	// Defines product's id where the variant has to be added
	ProductId *string `json:"product_id,omitempty"`
	// Defines variant's attributes list
	Attributes []ProductVariantAddAttributesInner `json:"attributes,omitempty"`
	// Defines variant's name that has to be added
	Name *string `json:"name,omitempty"`
	// Specifies variant's model that has to be added
	Model string `json:"model"`
	// Specifies variant's description
	Description *string `json:"description,omitempty"`
	// Defines short description
	ShortDescription *string `json:"short_description,omitempty"`
	// Specifies the set of visible/invisible product's variants for users
	AvailableForView *bool `json:"available_for_view,omitempty"`
	// Specifies the set of visible/invisible product's variants for sale
	AvailableForSale *bool `json:"available_for_sale,omitempty"`
	// Defines whether the product is virtual
	IsVirtual *bool `json:"is_virtual,omitempty"`
	// Defines as a default variant
	IsDefault *bool `json:"is_default,omitempty"`
	// Add variants specified by store id
	StoreId *string `json:"store_id,omitempty"`
	// Assign variant to the stores that is specified by comma-separated stores' id
	StoresIds *string `json:"stores_ids,omitempty"`
	// Language id
	LangId *string `json:"lang_id,omitempty"`
	// Defines new product's variant price
	Price *float32 `json:"price,omitempty"`
	// Defines product's old price
	OldPrice *float32 `json:"old_price,omitempty"`
	// Defines new product's cost price
	CostPrice *float32 `json:"cost_price,omitempty"`
	// Specifies variant's model that has to be added
	SpecialPrice *float32 `json:"special_price,omitempty"`
	// Defines the date of special price creation
	SpriceCreate *string `json:"sprice_create,omitempty"`
	// Defines the date of special price modification
	SpriceModified *string `json:"sprice_modified,omitempty"`
	// Defines the term of special price offer duration
	SpriceExpire *string `json:"sprice_expire,omitempty"`
	// Defines product's tier prices
	TierPrices []ProductAddTierPricesInner `json:"tier_prices,omitempty"`
	// Defines product variant's quantity that has to be added
	Quantity *float32 `json:"quantity,omitempty"`
	// This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
	WarehouseId *string `json:"warehouse_id,omitempty"`
	// Set stock status
	InStock *bool `json:"in_stock,omitempty"`
	// Set backorder status
	BackorderStatus *string `json:"backorder_status,omitempty"`
	// Defines inventory tracking for product variant
	ManageStock *bool `json:"manage_stock,omitempty"`
	// Specify the quantity threshold below which the product is considered low in stock
	LowStockThreshold *float32 `json:"low_stock_threshold,omitempty"`
	// Weight
	Weight *float32 `json:"weight,omitempty"`
	// Defines product's width
	Width *float32 `json:"width,omitempty"`
	// Defines product's height
	Height *float32 `json:"height,omitempty"`
	// Defines product's length
	Length *float32 `json:"length,omitempty"`
	// Weight Unit
	WeightUnit *string `json:"weight_unit,omitempty"`
	// Defines variant's sku that has to be added
	Sku *string `json:"sku,omitempty"`
	// A barcode is a unique code composed of numbers used as a product identifier.
	Barcode *string `json:"barcode,omitempty"`
	// Global Trade Item Number. An GTIN is an identifier for trade items.
	Gtin *string `json:"gtin,omitempty"`
	// Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.
	Upc *string `json:"upc,omitempty"`
	// European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.
	Ean *string `json:"ean,omitempty"`
	// Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.
	Mpn *string `json:"mpn,omitempty"`
	// International Standard Book Number. An ISBN is a unique identifier for books.
	Isbn *string `json:"isbn,omitempty"`
	// Specifies the product variant's manufacturer
	Manufacturer *string `json:"manufacturer,omitempty"`
	// Defines the date of entity creation
	CreatedAt *string `json:"created_at,omitempty"`
	// Defines unique meta title for each entity
	MetaTitle *string `json:"meta_title,omitempty"`
	// Defines unique meta keywords for each entity
	MetaKeywords *string `json:"meta_keywords,omitempty"`
	// Defines unique meta description of a entity
	MetaDescription *string `json:"meta_description,omitempty"`
	// Defines unique product variant's URL
	Url *string `json:"url,omitempty"`
	// Defines tax classes where entity has to be added
	TaxClassId *string `json:"tax_class_id,omitempty"`
	// Specifies whether a tax is charged
	Taxable *bool `json:"taxable,omitempty"`
	// Specifies fixed cost shipping price
	FixedCostShippingPrice *float32 `json:"fixed_cost_shipping_price,omitempty"`
	// Specifies variant's free shipping flag that has to be added
	IsFreeShipping *bool `json:"is_free_shipping,omitempty"`
	// The country where the inventory item was made
	CountryOfOrigin *string `json:"country_of_origin,omitempty"`
	// Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes
	HarmonizedSystemCode *string `json:"harmonized_system_code,omitempty"`
	// String containing the JSON representation of the supplied data
	MarketplaceItemProperties *string `json:"marketplace_item_properties,omitempty"`
	// Is cache clear required
	ClearCache *bool `json:"clear_cache,omitempty"`
}

type _ProductVariantAdd ProductVariantAdd

// NewProductVariantAdd instantiates a new ProductVariantAdd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductVariantAdd(model string) *ProductVariantAdd {
	this := ProductVariantAdd{}
	this.Model = model
	var availableForView bool = true
	this.AvailableForView = &availableForView
	var availableForSale bool = true
	this.AvailableForSale = &availableForSale
	var isVirtual bool = false
	this.IsVirtual = &isVirtual
	var quantity float32 = 0
	this.Quantity = &quantity
	var weight float32 = 0
	this.Weight = &weight
	var taxable bool = true
	this.Taxable = &taxable
	var clearCache bool = true
	this.ClearCache = &clearCache
	return &this
}

// NewProductVariantAddWithDefaults instantiates a new ProductVariantAdd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductVariantAddWithDefaults() *ProductVariantAdd {
	this := ProductVariantAdd{}
	var availableForView bool = true
	this.AvailableForView = &availableForView
	var availableForSale bool = true
	this.AvailableForSale = &availableForSale
	var isVirtual bool = false
	this.IsVirtual = &isVirtual
	var quantity float32 = 0
	this.Quantity = &quantity
	var weight float32 = 0
	this.Weight = &weight
	var taxable bool = true
	this.Taxable = &taxable
	var clearCache bool = true
	this.ClearCache = &clearCache
	return &this
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *ProductVariantAdd) SetProductId(v string) {
	o.ProductId = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetAttributes() []ProductVariantAddAttributesInner {
	if o == nil || IsNil(o.Attributes) {
		var ret []ProductVariantAddAttributesInner
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetAttributesOk() ([]ProductVariantAddAttributesInner, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []ProductVariantAddAttributesInner and assigns it to the Attributes field.
func (o *ProductVariantAdd) SetAttributes(v []ProductVariantAddAttributesInner) {
	o.Attributes = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProductVariantAdd) SetName(v string) {
	o.Name = &v
}

// GetModel returns the Model field value
func (o *ProductVariantAdd) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *ProductVariantAdd) SetModel(v string) {
	o.Model = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProductVariantAdd) SetDescription(v string) {
	o.Description = &v
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetShortDescription() string {
	if o == nil || IsNil(o.ShortDescription) {
		var ret string
		return ret
	}
	return *o.ShortDescription
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetShortDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ShortDescription) {
		return nil, false
	}
	return o.ShortDescription, true
}

// HasShortDescription returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasShortDescription() bool {
	if o != nil && !IsNil(o.ShortDescription) {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given string and assigns it to the ShortDescription field.
func (o *ProductVariantAdd) SetShortDescription(v string) {
	o.ShortDescription = &v
}

// GetAvailableForView returns the AvailableForView field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetAvailableForView() bool {
	if o == nil || IsNil(o.AvailableForView) {
		var ret bool
		return ret
	}
	return *o.AvailableForView
}

// GetAvailableForViewOk returns a tuple with the AvailableForView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetAvailableForViewOk() (*bool, bool) {
	if o == nil || IsNil(o.AvailableForView) {
		return nil, false
	}
	return o.AvailableForView, true
}

// HasAvailableForView returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasAvailableForView() bool {
	if o != nil && !IsNil(o.AvailableForView) {
		return true
	}

	return false
}

// SetAvailableForView gets a reference to the given bool and assigns it to the AvailableForView field.
func (o *ProductVariantAdd) SetAvailableForView(v bool) {
	o.AvailableForView = &v
}

// GetAvailableForSale returns the AvailableForSale field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetAvailableForSale() bool {
	if o == nil || IsNil(o.AvailableForSale) {
		var ret bool
		return ret
	}
	return *o.AvailableForSale
}

// GetAvailableForSaleOk returns a tuple with the AvailableForSale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetAvailableForSaleOk() (*bool, bool) {
	if o == nil || IsNil(o.AvailableForSale) {
		return nil, false
	}
	return o.AvailableForSale, true
}

// HasAvailableForSale returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasAvailableForSale() bool {
	if o != nil && !IsNil(o.AvailableForSale) {
		return true
	}

	return false
}

// SetAvailableForSale gets a reference to the given bool and assigns it to the AvailableForSale field.
func (o *ProductVariantAdd) SetAvailableForSale(v bool) {
	o.AvailableForSale = &v
}

// GetIsVirtual returns the IsVirtual field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetIsVirtual() bool {
	if o == nil || IsNil(o.IsVirtual) {
		var ret bool
		return ret
	}
	return *o.IsVirtual
}

// GetIsVirtualOk returns a tuple with the IsVirtual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetIsVirtualOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVirtual) {
		return nil, false
	}
	return o.IsVirtual, true
}

// HasIsVirtual returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasIsVirtual() bool {
	if o != nil && !IsNil(o.IsVirtual) {
		return true
	}

	return false
}

// SetIsVirtual gets a reference to the given bool and assigns it to the IsVirtual field.
func (o *ProductVariantAdd) SetIsVirtual(v bool) {
	o.IsVirtual = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *ProductVariantAdd) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetStoreId returns the StoreId field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetStoreId() string {
	if o == nil || IsNil(o.StoreId) {
		var ret string
		return ret
	}
	return *o.StoreId
}

// GetStoreIdOk returns a tuple with the StoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetStoreIdOk() (*string, bool) {
	if o == nil || IsNil(o.StoreId) {
		return nil, false
	}
	return o.StoreId, true
}

// HasStoreId returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasStoreId() bool {
	if o != nil && !IsNil(o.StoreId) {
		return true
	}

	return false
}

// SetStoreId gets a reference to the given string and assigns it to the StoreId field.
func (o *ProductVariantAdd) SetStoreId(v string) {
	o.StoreId = &v
}

// GetStoresIds returns the StoresIds field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetStoresIds() string {
	if o == nil || IsNil(o.StoresIds) {
		var ret string
		return ret
	}
	return *o.StoresIds
}

// GetStoresIdsOk returns a tuple with the StoresIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetStoresIdsOk() (*string, bool) {
	if o == nil || IsNil(o.StoresIds) {
		return nil, false
	}
	return o.StoresIds, true
}

// HasStoresIds returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasStoresIds() bool {
	if o != nil && !IsNil(o.StoresIds) {
		return true
	}

	return false
}

// SetStoresIds gets a reference to the given string and assigns it to the StoresIds field.
func (o *ProductVariantAdd) SetStoresIds(v string) {
	o.StoresIds = &v
}

// GetLangId returns the LangId field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetLangId() string {
	if o == nil || IsNil(o.LangId) {
		var ret string
		return ret
	}
	return *o.LangId
}

// GetLangIdOk returns a tuple with the LangId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetLangIdOk() (*string, bool) {
	if o == nil || IsNil(o.LangId) {
		return nil, false
	}
	return o.LangId, true
}

// HasLangId returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasLangId() bool {
	if o != nil && !IsNil(o.LangId) {
		return true
	}

	return false
}

// SetLangId gets a reference to the given string and assigns it to the LangId field.
func (o *ProductVariantAdd) SetLangId(v string) {
	o.LangId = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *ProductVariantAdd) SetPrice(v float32) {
	o.Price = &v
}

// GetOldPrice returns the OldPrice field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetOldPrice() float32 {
	if o == nil || IsNil(o.OldPrice) {
		var ret float32
		return ret
	}
	return *o.OldPrice
}

// GetOldPriceOk returns a tuple with the OldPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetOldPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.OldPrice) {
		return nil, false
	}
	return o.OldPrice, true
}

// HasOldPrice returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasOldPrice() bool {
	if o != nil && !IsNil(o.OldPrice) {
		return true
	}

	return false
}

// SetOldPrice gets a reference to the given float32 and assigns it to the OldPrice field.
func (o *ProductVariantAdd) SetOldPrice(v float32) {
	o.OldPrice = &v
}

// GetCostPrice returns the CostPrice field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetCostPrice() float32 {
	if o == nil || IsNil(o.CostPrice) {
		var ret float32
		return ret
	}
	return *o.CostPrice
}

// GetCostPriceOk returns a tuple with the CostPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetCostPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.CostPrice) {
		return nil, false
	}
	return o.CostPrice, true
}

// HasCostPrice returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasCostPrice() bool {
	if o != nil && !IsNil(o.CostPrice) {
		return true
	}

	return false
}

// SetCostPrice gets a reference to the given float32 and assigns it to the CostPrice field.
func (o *ProductVariantAdd) SetCostPrice(v float32) {
	o.CostPrice = &v
}

// GetSpecialPrice returns the SpecialPrice field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetSpecialPrice() float32 {
	if o == nil || IsNil(o.SpecialPrice) {
		var ret float32
		return ret
	}
	return *o.SpecialPrice
}

// GetSpecialPriceOk returns a tuple with the SpecialPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetSpecialPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.SpecialPrice) {
		return nil, false
	}
	return o.SpecialPrice, true
}

// HasSpecialPrice returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasSpecialPrice() bool {
	if o != nil && !IsNil(o.SpecialPrice) {
		return true
	}

	return false
}

// SetSpecialPrice gets a reference to the given float32 and assigns it to the SpecialPrice field.
func (o *ProductVariantAdd) SetSpecialPrice(v float32) {
	o.SpecialPrice = &v
}

// GetSpriceCreate returns the SpriceCreate field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetSpriceCreate() string {
	if o == nil || IsNil(o.SpriceCreate) {
		var ret string
		return ret
	}
	return *o.SpriceCreate
}

// GetSpriceCreateOk returns a tuple with the SpriceCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetSpriceCreateOk() (*string, bool) {
	if o == nil || IsNil(o.SpriceCreate) {
		return nil, false
	}
	return o.SpriceCreate, true
}

// HasSpriceCreate returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasSpriceCreate() bool {
	if o != nil && !IsNil(o.SpriceCreate) {
		return true
	}

	return false
}

// SetSpriceCreate gets a reference to the given string and assigns it to the SpriceCreate field.
func (o *ProductVariantAdd) SetSpriceCreate(v string) {
	o.SpriceCreate = &v
}

// GetSpriceModified returns the SpriceModified field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetSpriceModified() string {
	if o == nil || IsNil(o.SpriceModified) {
		var ret string
		return ret
	}
	return *o.SpriceModified
}

// GetSpriceModifiedOk returns a tuple with the SpriceModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetSpriceModifiedOk() (*string, bool) {
	if o == nil || IsNil(o.SpriceModified) {
		return nil, false
	}
	return o.SpriceModified, true
}

// HasSpriceModified returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasSpriceModified() bool {
	if o != nil && !IsNil(o.SpriceModified) {
		return true
	}

	return false
}

// SetSpriceModified gets a reference to the given string and assigns it to the SpriceModified field.
func (o *ProductVariantAdd) SetSpriceModified(v string) {
	o.SpriceModified = &v
}

// GetSpriceExpire returns the SpriceExpire field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetSpriceExpire() string {
	if o == nil || IsNil(o.SpriceExpire) {
		var ret string
		return ret
	}
	return *o.SpriceExpire
}

// GetSpriceExpireOk returns a tuple with the SpriceExpire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetSpriceExpireOk() (*string, bool) {
	if o == nil || IsNil(o.SpriceExpire) {
		return nil, false
	}
	return o.SpriceExpire, true
}

// HasSpriceExpire returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasSpriceExpire() bool {
	if o != nil && !IsNil(o.SpriceExpire) {
		return true
	}

	return false
}

// SetSpriceExpire gets a reference to the given string and assigns it to the SpriceExpire field.
func (o *ProductVariantAdd) SetSpriceExpire(v string) {
	o.SpriceExpire = &v
}

// GetTierPrices returns the TierPrices field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetTierPrices() []ProductAddTierPricesInner {
	if o == nil || IsNil(o.TierPrices) {
		var ret []ProductAddTierPricesInner
		return ret
	}
	return o.TierPrices
}

// GetTierPricesOk returns a tuple with the TierPrices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetTierPricesOk() ([]ProductAddTierPricesInner, bool) {
	if o == nil || IsNil(o.TierPrices) {
		return nil, false
	}
	return o.TierPrices, true
}

// HasTierPrices returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasTierPrices() bool {
	if o != nil && !IsNil(o.TierPrices) {
		return true
	}

	return false
}

// SetTierPrices gets a reference to the given []ProductAddTierPricesInner and assigns it to the TierPrices field.
func (o *ProductVariantAdd) SetTierPrices(v []ProductAddTierPricesInner) {
	o.TierPrices = v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *ProductVariantAdd) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetWarehouseId returns the WarehouseId field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetWarehouseId() string {
	if o == nil || IsNil(o.WarehouseId) {
		var ret string
		return ret
	}
	return *o.WarehouseId
}

// GetWarehouseIdOk returns a tuple with the WarehouseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetWarehouseIdOk() (*string, bool) {
	if o == nil || IsNil(o.WarehouseId) {
		return nil, false
	}
	return o.WarehouseId, true
}

// HasWarehouseId returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasWarehouseId() bool {
	if o != nil && !IsNil(o.WarehouseId) {
		return true
	}

	return false
}

// SetWarehouseId gets a reference to the given string and assigns it to the WarehouseId field.
func (o *ProductVariantAdd) SetWarehouseId(v string) {
	o.WarehouseId = &v
}

// GetInStock returns the InStock field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetInStock() bool {
	if o == nil || IsNil(o.InStock) {
		var ret bool
		return ret
	}
	return *o.InStock
}

// GetInStockOk returns a tuple with the InStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetInStockOk() (*bool, bool) {
	if o == nil || IsNil(o.InStock) {
		return nil, false
	}
	return o.InStock, true
}

// HasInStock returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasInStock() bool {
	if o != nil && !IsNil(o.InStock) {
		return true
	}

	return false
}

// SetInStock gets a reference to the given bool and assigns it to the InStock field.
func (o *ProductVariantAdd) SetInStock(v bool) {
	o.InStock = &v
}

// GetBackorderStatus returns the BackorderStatus field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetBackorderStatus() string {
	if o == nil || IsNil(o.BackorderStatus) {
		var ret string
		return ret
	}
	return *o.BackorderStatus
}

// GetBackorderStatusOk returns a tuple with the BackorderStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetBackorderStatusOk() (*string, bool) {
	if o == nil || IsNil(o.BackorderStatus) {
		return nil, false
	}
	return o.BackorderStatus, true
}

// HasBackorderStatus returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasBackorderStatus() bool {
	if o != nil && !IsNil(o.BackorderStatus) {
		return true
	}

	return false
}

// SetBackorderStatus gets a reference to the given string and assigns it to the BackorderStatus field.
func (o *ProductVariantAdd) SetBackorderStatus(v string) {
	o.BackorderStatus = &v
}

// GetManageStock returns the ManageStock field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetManageStock() bool {
	if o == nil || IsNil(o.ManageStock) {
		var ret bool
		return ret
	}
	return *o.ManageStock
}

// GetManageStockOk returns a tuple with the ManageStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetManageStockOk() (*bool, bool) {
	if o == nil || IsNil(o.ManageStock) {
		return nil, false
	}
	return o.ManageStock, true
}

// HasManageStock returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasManageStock() bool {
	if o != nil && !IsNil(o.ManageStock) {
		return true
	}

	return false
}

// SetManageStock gets a reference to the given bool and assigns it to the ManageStock field.
func (o *ProductVariantAdd) SetManageStock(v bool) {
	o.ManageStock = &v
}

// GetLowStockThreshold returns the LowStockThreshold field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetLowStockThreshold() float32 {
	if o == nil || IsNil(o.LowStockThreshold) {
		var ret float32
		return ret
	}
	return *o.LowStockThreshold
}

// GetLowStockThresholdOk returns a tuple with the LowStockThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetLowStockThresholdOk() (*float32, bool) {
	if o == nil || IsNil(o.LowStockThreshold) {
		return nil, false
	}
	return o.LowStockThreshold, true
}

// HasLowStockThreshold returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasLowStockThreshold() bool {
	if o != nil && !IsNil(o.LowStockThreshold) {
		return true
	}

	return false
}

// SetLowStockThreshold gets a reference to the given float32 and assigns it to the LowStockThreshold field.
func (o *ProductVariantAdd) SetLowStockThreshold(v float32) {
	o.LowStockThreshold = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetWeight() float32 {
	if o == nil || IsNil(o.Weight) {
		var ret float32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float32 and assigns it to the Weight field.
func (o *ProductVariantAdd) SetWeight(v float32) {
	o.Weight = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetWidth() float32 {
	if o == nil || IsNil(o.Width) {
		var ret float32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetWidthOk() (*float32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given float32 and assigns it to the Width field.
func (o *ProductVariantAdd) SetWidth(v float32) {
	o.Width = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetHeight() float32 {
	if o == nil || IsNil(o.Height) {
		var ret float32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetHeightOk() (*float32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given float32 and assigns it to the Height field.
func (o *ProductVariantAdd) SetHeight(v float32) {
	o.Height = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetLength() float32 {
	if o == nil || IsNil(o.Length) {
		var ret float32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetLengthOk() (*float32, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given float32 and assigns it to the Length field.
func (o *ProductVariantAdd) SetLength(v float32) {
	o.Length = &v
}

// GetWeightUnit returns the WeightUnit field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetWeightUnit() string {
	if o == nil || IsNil(o.WeightUnit) {
		var ret string
		return ret
	}
	return *o.WeightUnit
}

// GetWeightUnitOk returns a tuple with the WeightUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetWeightUnitOk() (*string, bool) {
	if o == nil || IsNil(o.WeightUnit) {
		return nil, false
	}
	return o.WeightUnit, true
}

// HasWeightUnit returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasWeightUnit() bool {
	if o != nil && !IsNil(o.WeightUnit) {
		return true
	}

	return false
}

// SetWeightUnit gets a reference to the given string and assigns it to the WeightUnit field.
func (o *ProductVariantAdd) SetWeightUnit(v string) {
	o.WeightUnit = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *ProductVariantAdd) SetSku(v string) {
	o.Sku = &v
}

// GetBarcode returns the Barcode field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetBarcode() string {
	if o == nil || IsNil(o.Barcode) {
		var ret string
		return ret
	}
	return *o.Barcode
}

// GetBarcodeOk returns a tuple with the Barcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetBarcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Barcode) {
		return nil, false
	}
	return o.Barcode, true
}

// HasBarcode returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasBarcode() bool {
	if o != nil && !IsNil(o.Barcode) {
		return true
	}

	return false
}

// SetBarcode gets a reference to the given string and assigns it to the Barcode field.
func (o *ProductVariantAdd) SetBarcode(v string) {
	o.Barcode = &v
}

// GetGtin returns the Gtin field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetGtin() string {
	if o == nil || IsNil(o.Gtin) {
		var ret string
		return ret
	}
	return *o.Gtin
}

// GetGtinOk returns a tuple with the Gtin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetGtinOk() (*string, bool) {
	if o == nil || IsNil(o.Gtin) {
		return nil, false
	}
	return o.Gtin, true
}

// HasGtin returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasGtin() bool {
	if o != nil && !IsNil(o.Gtin) {
		return true
	}

	return false
}

// SetGtin gets a reference to the given string and assigns it to the Gtin field.
func (o *ProductVariantAdd) SetGtin(v string) {
	o.Gtin = &v
}

// GetUpc returns the Upc field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetUpc() string {
	if o == nil || IsNil(o.Upc) {
		var ret string
		return ret
	}
	return *o.Upc
}

// GetUpcOk returns a tuple with the Upc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetUpcOk() (*string, bool) {
	if o == nil || IsNil(o.Upc) {
		return nil, false
	}
	return o.Upc, true
}

// HasUpc returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasUpc() bool {
	if o != nil && !IsNil(o.Upc) {
		return true
	}

	return false
}

// SetUpc gets a reference to the given string and assigns it to the Upc field.
func (o *ProductVariantAdd) SetUpc(v string) {
	o.Upc = &v
}

// GetEan returns the Ean field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetEan() string {
	if o == nil || IsNil(o.Ean) {
		var ret string
		return ret
	}
	return *o.Ean
}

// GetEanOk returns a tuple with the Ean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetEanOk() (*string, bool) {
	if o == nil || IsNil(o.Ean) {
		return nil, false
	}
	return o.Ean, true
}

// HasEan returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasEan() bool {
	if o != nil && !IsNil(o.Ean) {
		return true
	}

	return false
}

// SetEan gets a reference to the given string and assigns it to the Ean field.
func (o *ProductVariantAdd) SetEan(v string) {
	o.Ean = &v
}

// GetMpn returns the Mpn field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetMpn() string {
	if o == nil || IsNil(o.Mpn) {
		var ret string
		return ret
	}
	return *o.Mpn
}

// GetMpnOk returns a tuple with the Mpn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetMpnOk() (*string, bool) {
	if o == nil || IsNil(o.Mpn) {
		return nil, false
	}
	return o.Mpn, true
}

// HasMpn returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasMpn() bool {
	if o != nil && !IsNil(o.Mpn) {
		return true
	}

	return false
}

// SetMpn gets a reference to the given string and assigns it to the Mpn field.
func (o *ProductVariantAdd) SetMpn(v string) {
	o.Mpn = &v
}

// GetIsbn returns the Isbn field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetIsbn() string {
	if o == nil || IsNil(o.Isbn) {
		var ret string
		return ret
	}
	return *o.Isbn
}

// GetIsbnOk returns a tuple with the Isbn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetIsbnOk() (*string, bool) {
	if o == nil || IsNil(o.Isbn) {
		return nil, false
	}
	return o.Isbn, true
}

// HasIsbn returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasIsbn() bool {
	if o != nil && !IsNil(o.Isbn) {
		return true
	}

	return false
}

// SetIsbn gets a reference to the given string and assigns it to the Isbn field.
func (o *ProductVariantAdd) SetIsbn(v string) {
	o.Isbn = &v
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetManufacturer() string {
	if o == nil || IsNil(o.Manufacturer) {
		var ret string
		return ret
	}
	return *o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetManufacturerOk() (*string, bool) {
	if o == nil || IsNil(o.Manufacturer) {
		return nil, false
	}
	return o.Manufacturer, true
}

// HasManufacturer returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasManufacturer() bool {
	if o != nil && !IsNil(o.Manufacturer) {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given string and assigns it to the Manufacturer field.
func (o *ProductVariantAdd) SetManufacturer(v string) {
	o.Manufacturer = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *ProductVariantAdd) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetMetaTitle returns the MetaTitle field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetMetaTitle() string {
	if o == nil || IsNil(o.MetaTitle) {
		var ret string
		return ret
	}
	return *o.MetaTitle
}

// GetMetaTitleOk returns a tuple with the MetaTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetMetaTitleOk() (*string, bool) {
	if o == nil || IsNil(o.MetaTitle) {
		return nil, false
	}
	return o.MetaTitle, true
}

// HasMetaTitle returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasMetaTitle() bool {
	if o != nil && !IsNil(o.MetaTitle) {
		return true
	}

	return false
}

// SetMetaTitle gets a reference to the given string and assigns it to the MetaTitle field.
func (o *ProductVariantAdd) SetMetaTitle(v string) {
	o.MetaTitle = &v
}

// GetMetaKeywords returns the MetaKeywords field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetMetaKeywords() string {
	if o == nil || IsNil(o.MetaKeywords) {
		var ret string
		return ret
	}
	return *o.MetaKeywords
}

// GetMetaKeywordsOk returns a tuple with the MetaKeywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetMetaKeywordsOk() (*string, bool) {
	if o == nil || IsNil(o.MetaKeywords) {
		return nil, false
	}
	return o.MetaKeywords, true
}

// HasMetaKeywords returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasMetaKeywords() bool {
	if o != nil && !IsNil(o.MetaKeywords) {
		return true
	}

	return false
}

// SetMetaKeywords gets a reference to the given string and assigns it to the MetaKeywords field.
func (o *ProductVariantAdd) SetMetaKeywords(v string) {
	o.MetaKeywords = &v
}

// GetMetaDescription returns the MetaDescription field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetMetaDescription() string {
	if o == nil || IsNil(o.MetaDescription) {
		var ret string
		return ret
	}
	return *o.MetaDescription
}

// GetMetaDescriptionOk returns a tuple with the MetaDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetMetaDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.MetaDescription) {
		return nil, false
	}
	return o.MetaDescription, true
}

// HasMetaDescription returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasMetaDescription() bool {
	if o != nil && !IsNil(o.MetaDescription) {
		return true
	}

	return false
}

// SetMetaDescription gets a reference to the given string and assigns it to the MetaDescription field.
func (o *ProductVariantAdd) SetMetaDescription(v string) {
	o.MetaDescription = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ProductVariantAdd) SetUrl(v string) {
	o.Url = &v
}

// GetTaxClassId returns the TaxClassId field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetTaxClassId() string {
	if o == nil || IsNil(o.TaxClassId) {
		var ret string
		return ret
	}
	return *o.TaxClassId
}

// GetTaxClassIdOk returns a tuple with the TaxClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetTaxClassIdOk() (*string, bool) {
	if o == nil || IsNil(o.TaxClassId) {
		return nil, false
	}
	return o.TaxClassId, true
}

// HasTaxClassId returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasTaxClassId() bool {
	if o != nil && !IsNil(o.TaxClassId) {
		return true
	}

	return false
}

// SetTaxClassId gets a reference to the given string and assigns it to the TaxClassId field.
func (o *ProductVariantAdd) SetTaxClassId(v string) {
	o.TaxClassId = &v
}

// GetTaxable returns the Taxable field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetTaxable() bool {
	if o == nil || IsNil(o.Taxable) {
		var ret bool
		return ret
	}
	return *o.Taxable
}

// GetTaxableOk returns a tuple with the Taxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetTaxableOk() (*bool, bool) {
	if o == nil || IsNil(o.Taxable) {
		return nil, false
	}
	return o.Taxable, true
}

// HasTaxable returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasTaxable() bool {
	if o != nil && !IsNil(o.Taxable) {
		return true
	}

	return false
}

// SetTaxable gets a reference to the given bool and assigns it to the Taxable field.
func (o *ProductVariantAdd) SetTaxable(v bool) {
	o.Taxable = &v
}

// GetFixedCostShippingPrice returns the FixedCostShippingPrice field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetFixedCostShippingPrice() float32 {
	if o == nil || IsNil(o.FixedCostShippingPrice) {
		var ret float32
		return ret
	}
	return *o.FixedCostShippingPrice
}

// GetFixedCostShippingPriceOk returns a tuple with the FixedCostShippingPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetFixedCostShippingPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.FixedCostShippingPrice) {
		return nil, false
	}
	return o.FixedCostShippingPrice, true
}

// HasFixedCostShippingPrice returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasFixedCostShippingPrice() bool {
	if o != nil && !IsNil(o.FixedCostShippingPrice) {
		return true
	}

	return false
}

// SetFixedCostShippingPrice gets a reference to the given float32 and assigns it to the FixedCostShippingPrice field.
func (o *ProductVariantAdd) SetFixedCostShippingPrice(v float32) {
	o.FixedCostShippingPrice = &v
}

// GetIsFreeShipping returns the IsFreeShipping field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetIsFreeShipping() bool {
	if o == nil || IsNil(o.IsFreeShipping) {
		var ret bool
		return ret
	}
	return *o.IsFreeShipping
}

// GetIsFreeShippingOk returns a tuple with the IsFreeShipping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetIsFreeShippingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFreeShipping) {
		return nil, false
	}
	return o.IsFreeShipping, true
}

// HasIsFreeShipping returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasIsFreeShipping() bool {
	if o != nil && !IsNil(o.IsFreeShipping) {
		return true
	}

	return false
}

// SetIsFreeShipping gets a reference to the given bool and assigns it to the IsFreeShipping field.
func (o *ProductVariantAdd) SetIsFreeShipping(v bool) {
	o.IsFreeShipping = &v
}

// GetCountryOfOrigin returns the CountryOfOrigin field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetCountryOfOrigin() string {
	if o == nil || IsNil(o.CountryOfOrigin) {
		var ret string
		return ret
	}
	return *o.CountryOfOrigin
}

// GetCountryOfOriginOk returns a tuple with the CountryOfOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetCountryOfOriginOk() (*string, bool) {
	if o == nil || IsNil(o.CountryOfOrigin) {
		return nil, false
	}
	return o.CountryOfOrigin, true
}

// HasCountryOfOrigin returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasCountryOfOrigin() bool {
	if o != nil && !IsNil(o.CountryOfOrigin) {
		return true
	}

	return false
}

// SetCountryOfOrigin gets a reference to the given string and assigns it to the CountryOfOrigin field.
func (o *ProductVariantAdd) SetCountryOfOrigin(v string) {
	o.CountryOfOrigin = &v
}

// GetHarmonizedSystemCode returns the HarmonizedSystemCode field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetHarmonizedSystemCode() string {
	if o == nil || IsNil(o.HarmonizedSystemCode) {
		var ret string
		return ret
	}
	return *o.HarmonizedSystemCode
}

// GetHarmonizedSystemCodeOk returns a tuple with the HarmonizedSystemCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetHarmonizedSystemCodeOk() (*string, bool) {
	if o == nil || IsNil(o.HarmonizedSystemCode) {
		return nil, false
	}
	return o.HarmonizedSystemCode, true
}

// HasHarmonizedSystemCode returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasHarmonizedSystemCode() bool {
	if o != nil && !IsNil(o.HarmonizedSystemCode) {
		return true
	}

	return false
}

// SetHarmonizedSystemCode gets a reference to the given string and assigns it to the HarmonizedSystemCode field.
func (o *ProductVariantAdd) SetHarmonizedSystemCode(v string) {
	o.HarmonizedSystemCode = &v
}

// GetMarketplaceItemProperties returns the MarketplaceItemProperties field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetMarketplaceItemProperties() string {
	if o == nil || IsNil(o.MarketplaceItemProperties) {
		var ret string
		return ret
	}
	return *o.MarketplaceItemProperties
}

// GetMarketplaceItemPropertiesOk returns a tuple with the MarketplaceItemProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetMarketplaceItemPropertiesOk() (*string, bool) {
	if o == nil || IsNil(o.MarketplaceItemProperties) {
		return nil, false
	}
	return o.MarketplaceItemProperties, true
}

// HasMarketplaceItemProperties returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasMarketplaceItemProperties() bool {
	if o != nil && !IsNil(o.MarketplaceItemProperties) {
		return true
	}

	return false
}

// SetMarketplaceItemProperties gets a reference to the given string and assigns it to the MarketplaceItemProperties field.
func (o *ProductVariantAdd) SetMarketplaceItemProperties(v string) {
	o.MarketplaceItemProperties = &v
}

// GetClearCache returns the ClearCache field value if set, zero value otherwise.
func (o *ProductVariantAdd) GetClearCache() bool {
	if o == nil || IsNil(o.ClearCache) {
		var ret bool
		return ret
	}
	return *o.ClearCache
}

// GetClearCacheOk returns a tuple with the ClearCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAdd) GetClearCacheOk() (*bool, bool) {
	if o == nil || IsNil(o.ClearCache) {
		return nil, false
	}
	return o.ClearCache, true
}

// HasClearCache returns a boolean if a field has been set.
func (o *ProductVariantAdd) HasClearCache() bool {
	if o != nil && !IsNil(o.ClearCache) {
		return true
	}

	return false
}

// SetClearCache gets a reference to the given bool and assigns it to the ClearCache field.
func (o *ProductVariantAdd) SetClearCache(v bool) {
	o.ClearCache = &v
}

func (o ProductVariantAdd) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductVariantAdd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["model"] = o.Model
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ShortDescription) {
		toSerialize["short_description"] = o.ShortDescription
	}
	if !IsNil(o.AvailableForView) {
		toSerialize["available_for_view"] = o.AvailableForView
	}
	if !IsNil(o.AvailableForSale) {
		toSerialize["available_for_sale"] = o.AvailableForSale
	}
	if !IsNil(o.IsVirtual) {
		toSerialize["is_virtual"] = o.IsVirtual
	}
	if !IsNil(o.IsDefault) {
		toSerialize["is_default"] = o.IsDefault
	}
	if !IsNil(o.StoreId) {
		toSerialize["store_id"] = o.StoreId
	}
	if !IsNil(o.StoresIds) {
		toSerialize["stores_ids"] = o.StoresIds
	}
	if !IsNil(o.LangId) {
		toSerialize["lang_id"] = o.LangId
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.OldPrice) {
		toSerialize["old_price"] = o.OldPrice
	}
	if !IsNil(o.CostPrice) {
		toSerialize["cost_price"] = o.CostPrice
	}
	if !IsNil(o.SpecialPrice) {
		toSerialize["special_price"] = o.SpecialPrice
	}
	if !IsNil(o.SpriceCreate) {
		toSerialize["sprice_create"] = o.SpriceCreate
	}
	if !IsNil(o.SpriceModified) {
		toSerialize["sprice_modified"] = o.SpriceModified
	}
	if !IsNil(o.SpriceExpire) {
		toSerialize["sprice_expire"] = o.SpriceExpire
	}
	if !IsNil(o.TierPrices) {
		toSerialize["tier_prices"] = o.TierPrices
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.WarehouseId) {
		toSerialize["warehouse_id"] = o.WarehouseId
	}
	if !IsNil(o.InStock) {
		toSerialize["in_stock"] = o.InStock
	}
	if !IsNil(o.BackorderStatus) {
		toSerialize["backorder_status"] = o.BackorderStatus
	}
	if !IsNil(o.ManageStock) {
		toSerialize["manage_stock"] = o.ManageStock
	}
	if !IsNil(o.LowStockThreshold) {
		toSerialize["low_stock_threshold"] = o.LowStockThreshold
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.WeightUnit) {
		toSerialize["weight_unit"] = o.WeightUnit
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.Barcode) {
		toSerialize["barcode"] = o.Barcode
	}
	if !IsNil(o.Gtin) {
		toSerialize["gtin"] = o.Gtin
	}
	if !IsNil(o.Upc) {
		toSerialize["upc"] = o.Upc
	}
	if !IsNil(o.Ean) {
		toSerialize["ean"] = o.Ean
	}
	if !IsNil(o.Mpn) {
		toSerialize["mpn"] = o.Mpn
	}
	if !IsNil(o.Isbn) {
		toSerialize["isbn"] = o.Isbn
	}
	if !IsNil(o.Manufacturer) {
		toSerialize["manufacturer"] = o.Manufacturer
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.MetaTitle) {
		toSerialize["meta_title"] = o.MetaTitle
	}
	if !IsNil(o.MetaKeywords) {
		toSerialize["meta_keywords"] = o.MetaKeywords
	}
	if !IsNil(o.MetaDescription) {
		toSerialize["meta_description"] = o.MetaDescription
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.TaxClassId) {
		toSerialize["tax_class_id"] = o.TaxClassId
	}
	if !IsNil(o.Taxable) {
		toSerialize["taxable"] = o.Taxable
	}
	if !IsNil(o.FixedCostShippingPrice) {
		toSerialize["fixed_cost_shipping_price"] = o.FixedCostShippingPrice
	}
	if !IsNil(o.IsFreeShipping) {
		toSerialize["is_free_shipping"] = o.IsFreeShipping
	}
	if !IsNil(o.CountryOfOrigin) {
		toSerialize["country_of_origin"] = o.CountryOfOrigin
	}
	if !IsNil(o.HarmonizedSystemCode) {
		toSerialize["harmonized_system_code"] = o.HarmonizedSystemCode
	}
	if !IsNil(o.MarketplaceItemProperties) {
		toSerialize["marketplace_item_properties"] = o.MarketplaceItemProperties
	}
	if !IsNil(o.ClearCache) {
		toSerialize["clear_cache"] = o.ClearCache
	}
	return toSerialize, nil
}

func (o *ProductVariantAdd) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"model",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductVariantAdd := _ProductVariantAdd{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductVariantAdd)

	if err != nil {
		return err
	}

	*o = ProductVariantAdd(varProductVariantAdd)

	return err
}

type NullableProductVariantAdd struct {
	value *ProductVariantAdd
	isSet bool
}

func (v NullableProductVariantAdd) Get() *ProductVariantAdd {
	return v.value
}

func (v *NullableProductVariantAdd) Set(val *ProductVariantAdd) {
	v.value = val
	v.isSet = true
}

func (v NullableProductVariantAdd) IsSet() bool {
	return v.isSet
}

func (v *NullableProductVariantAdd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductVariantAdd(val *ProductVariantAdd) *NullableProductVariantAdd {
	return &NullableProductVariantAdd{value: val, isSet: true}
}

func (v NullableProductVariantAdd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductVariantAdd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


