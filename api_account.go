/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// AccountAPIService AccountAPI service
type AccountAPIService service

type ApiAccountCartAddRequest struct {
	ctx context.Context
	ApiService *AccountAPIService
	accountCartAdd *AccountCartAdd
}

func (r ApiAccountCartAddRequest) AccountCartAdd(accountCartAdd AccountCartAdd) ApiAccountCartAddRequest {
	r.accountCartAdd = &accountCartAdd
	return r
}

func (r ApiAccountCartAddRequest) Execute() (*AccountCartAdd200Response, *http.Response, error) {
	return r.ApiService.AccountCartAddExecute(r)
}

/*
AccountCartAdd account.cart.add

Use this method to automate the process of connecting stores to API2Cart. The list of parameters will vary depending on the platform. To get a list of parameters that are specific to a particular shopping platform, you need to execute the account.supported_platforms.json method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAccountCartAddRequest
*/
func (a *AccountAPIService) AccountCartAdd(ctx context.Context) ApiAccountCartAddRequest {
	return ApiAccountCartAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountCartAdd200Response
func (a *AccountAPIService) AccountCartAddExecute(r ApiAccountCartAddRequest) (*AccountCartAdd200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountCartAdd200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountAPIService.AccountCartAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account.cart.add.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accountCartAdd == nil {
		return localVarReturnValue, nil, reportError("accountCartAdd is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accountCartAdd
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountCartListRequest struct {
	ctx context.Context
	ApiService *AccountAPIService
	storeUrl *string
	storeKey *string
	requestFromDate *string
	requestToDate *string
	params *string
	exclude *string
}

// A web address of a store
func (r ApiAccountCartListRequest) StoreUrl(storeUrl string) ApiAccountCartListRequest {
	r.storeUrl = &storeUrl
	return r
}

// Find store by store key
func (r ApiAccountCartListRequest) StoreKey(storeKey string) ApiAccountCartListRequest {
	r.storeKey = &storeKey
	return r
}

// Retrieve entities from their creation date
func (r ApiAccountCartListRequest) RequestFromDate(requestFromDate string) ApiAccountCartListRequest {
	r.requestFromDate = &requestFromDate
	return r
}

// Retrieve entities to their creation date
func (r ApiAccountCartListRequest) RequestToDate(requestToDate string) ApiAccountCartListRequest {
	r.requestToDate = &requestToDate
	return r
}

// Set this parameter in order to choose which entity fields you want to retrieve
func (r ApiAccountCartListRequest) Params(params string) ApiAccountCartListRequest {
	r.params = &params
	return r
}

// Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
func (r ApiAccountCartListRequest) Exclude(exclude string) ApiAccountCartListRequest {
	r.exclude = &exclude
	return r
}

func (r ApiAccountCartListRequest) Execute() (*AccountCartList200Response, *http.Response, error) {
	return r.ApiService.AccountCartListExecute(r)
}

/*
AccountCartList account.cart.list

This method lets you get a list of online stores connected to your API2Cart account. You can get the number of API requests to each store if you specify a period using parameters (request_from_date, request_to_date). The total_calls field is displayed only if there are parameters (request_from_date, request_to_date).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAccountCartListRequest
*/
func (a *AccountAPIService) AccountCartList(ctx context.Context) ApiAccountCartListRequest {
	return ApiAccountCartListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountCartList200Response
func (a *AccountAPIService) AccountCartListExecute(r ApiAccountCartListRequest) (*AccountCartList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountCartList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountAPIService.AccountCartList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account.cart.list.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.storeUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "store_url", r.storeUrl, "form", "")
	}
	if r.storeKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "store_key", r.storeKey, "form", "")
	}
	if r.requestFromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "request_from_date", r.requestFromDate, "form", "")
	}
	if r.requestToDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "request_to_date", r.requestToDate, "form", "")
	}
	if r.params != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "params", r.params, "form", "")
	} else {
		var defaultValue string = "force_all"
		r.params = &defaultValue
	}
	if r.exclude != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude", r.exclude, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountConfigUpdateRequest struct {
	ctx context.Context
	ApiService *AccountAPIService
	replaceParameters *bool
	newStoreUrl *string
	newStoreKey *string
	bridgeUrl *string
	storeRoot *string
	dbTablesPrefix *string
	userAgent *string
	var3dcartPrivateKey *string
	var3dcartAccessToken *string
	var3dcartapiApiKey *string
	amazonSpClientId *string
	amazonSpClientSecret *string
	amazonSpRefreshToken *string
	amazonSpAwsRegion *string
	amazonSpApiEnvironment *string
	amazonSellerId *string
	aspdotnetstorefrontApiUser *string
	aspdotnetstorefrontApiPass *string
	bigcommerceapiAdminAccount *string
	bigcommerceapiApiPath *string
	bigcommerceapiApiKey *string
	bigcommerceapiClientId *string
	bigcommerceapiAccessToken *string
	bigcommerceapiContext *string
	bolApiKey *string
	bolApiSecret *string
	bolRetailerId *int32
	demandwareClientId *string
	demandwareApiPassword *string
	demandwareUserName *string
	demandwareUserPassword *string
	ebayClientId *string
	ebayClientSecret *string
	ebayRuname *string
	ebayAccessToken *string
	ebayRefreshToken *string
	ebayEnvironment *string
	ebaySiteId *int32
	ecwidAcessToken *string
	ecwidStoreId *string
	lazadaAppId *string
	lazadaAppSecret *string
	lazadaRefreshToken *string
	lazadaRegion *string
	etsyKeystring *string
	etsySharedSecret *string
	etsyAccessToken *string
	etsyTokenSecret *string
	etsyClientId *string
	etsyRefreshToken *string
	facebookAppId *string
	facebookAppSecret *string
	facebookAccessToken *string
	facebookBusinessId *string
	netoApiKey *string
	netoApiUsername *string
	shoplineAccessToken *string
	shoplineAppKey *string
	shoplineAppSecret *string
	shoplineSharedSecret *string
	shopifyAccessToken *string
	shopifyApiKey *string
	shopifyApiPassword *string
	shopifySharedSecret *string
	shoplazzaAccessToken *string
	shoplazzaSharedSecret *string
	mivaAccessToken *string
	mivaSignature *string
	shopwareAccessKey *string
	shopwareApiKey *string
	shopwareApiSecret *string
	bigcartelUserName *string
	bigcartelPassword *string
	volusionLogin *string
	volusionPassword *string
	walmartClientId *string
	walmartClientSecret *string
	walmartEnvironment *string
	walmartChannelType *string
	walmartRegion *string
	squareClientId *string
	squareClientSecret *string
	squareRefreshToken *string
	squarespaceApiKey *string
	squarespaceClientId *string
	squarespaceClientSecret *string
	squarespaceAccessToken *string
	squarespaceRefreshToken *string
	hybrisClientId *string
	hybrisClientSecret *string
	hybrisUsername *string
	hybrisPassword *string
	hybrisWebsites *[]string
	lightspeedApiKey *string
	lightspeedApiSecret *string
	commercehqApiKey *string
	commercehqApiPassword *string
	wcConsumerKey *string
	wcConsumerSecret *string
	magentoConsumerKey *string
	magentoConsumerSecret *string
	magentoAccessToken *string
	magentoTokenSecret *string
	prestashopWebserviceKey *string
	wixAppId *string
	wixAppSecretKey *string
	wixInstanceId *string
	wixRefreshToken *string
	mercadoLibreAppId *string
	mercadoLibreAppSecretKey *string
	mercadoLibreRefreshToken *string
	zidClientId *int32
	zidClientSecret *string
	zidAccessToken *string
	zidAuthorization *string
	zidRefreshToken *string
	flipkartClientId *string
	flipkartClientSecret *string
	allegroClientId *string
	allegroClientSecret *string
	allegroAccessToken *string
	allegroRefreshToken *string
	allegroEnvironment *string
	zohoClientId *string
	zohoClientSecret *string
	zohoRefreshToken *string
	zohoRegion *string
	tiendanubeUserId *int32
	tiendanubeAccessToken *string
	tiendanubeClientSecret *string
	ottoClientId *string
	ottoClientSecret *string
	ottoAppId *string
	ottoRefreshToken *string
	ottoEnvironment *string
	ottoAccessToken *string
	tiktokshopAppKey *string
	tiktokshopAppSecret *string
	tiktokshopRefreshToken *string
	tiktokshopAccessToken *string
	sallaClientId *string
	sallaClientSecret *string
	sallaRefreshToken *string
	sallaAccessToken *string
}

// Identifies if there is a necessity to replace parameters
func (r ApiAccountConfigUpdateRequest) ReplaceParameters(replaceParameters bool) ApiAccountConfigUpdateRequest {
	r.replaceParameters = &replaceParameters
	return r
}

// The web address of the store you want to update to connect to API2Cart
func (r ApiAccountConfigUpdateRequest) NewStoreUrl(newStoreUrl string) ApiAccountConfigUpdateRequest {
	r.newStoreUrl = &newStoreUrl
	return r
}

// Update store key
func (r ApiAccountConfigUpdateRequest) NewStoreKey(newStoreKey string) ApiAccountConfigUpdateRequest {
	r.newStoreKey = &newStoreKey
	return r
}

// This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
func (r ApiAccountConfigUpdateRequest) BridgeUrl(bridgeUrl string) ApiAccountConfigUpdateRequest {
	r.bridgeUrl = &bridgeUrl
	return r
}

// Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter)
func (r ApiAccountConfigUpdateRequest) StoreRoot(storeRoot string) ApiAccountConfigUpdateRequest {
	r.storeRoot = &storeRoot
	return r
}

// DB tables prefix
func (r ApiAccountConfigUpdateRequest) DbTablesPrefix(dbTablesPrefix string) ApiAccountConfigUpdateRequest {
	r.dbTablesPrefix = &dbTablesPrefix
	return r
}

// This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values.
func (r ApiAccountConfigUpdateRequest) UserAgent(userAgent string) ApiAccountConfigUpdateRequest {
	r.userAgent = &userAgent
	return r
}

// 3DCart Private Key
func (r ApiAccountConfigUpdateRequest) Var3dcartPrivateKey(var3dcartPrivateKey string) ApiAccountConfigUpdateRequest {
	r.var3dcartPrivateKey = &var3dcartPrivateKey
	return r
}

// 3DCart Token
func (r ApiAccountConfigUpdateRequest) Var3dcartAccessToken(var3dcartAccessToken string) ApiAccountConfigUpdateRequest {
	r.var3dcartAccessToken = &var3dcartAccessToken
	return r
}

// 3DCart API Key
func (r ApiAccountConfigUpdateRequest) Var3dcartapiApiKey(var3dcartapiApiKey string) ApiAccountConfigUpdateRequest {
	r.var3dcartapiApiKey = &var3dcartapiApiKey
	return r
}

// Amazon SP API app client id
func (r ApiAccountConfigUpdateRequest) AmazonSpClientId(amazonSpClientId string) ApiAccountConfigUpdateRequest {
	r.amazonSpClientId = &amazonSpClientId
	return r
}

// Amazon SP API app client secret
func (r ApiAccountConfigUpdateRequest) AmazonSpClientSecret(amazonSpClientSecret string) ApiAccountConfigUpdateRequest {
	r.amazonSpClientSecret = &amazonSpClientSecret
	return r
}

// Amazon SP API OAuth refresh token
func (r ApiAccountConfigUpdateRequest) AmazonSpRefreshToken(amazonSpRefreshToken string) ApiAccountConfigUpdateRequest {
	r.amazonSpRefreshToken = &amazonSpRefreshToken
	return r
}

// Amazon AWS Region
func (r ApiAccountConfigUpdateRequest) AmazonSpAwsRegion(amazonSpAwsRegion string) ApiAccountConfigUpdateRequest {
	r.amazonSpAwsRegion = &amazonSpAwsRegion
	return r
}

// Amazon SP API environment
func (r ApiAccountConfigUpdateRequest) AmazonSpApiEnvironment(amazonSpApiEnvironment string) ApiAccountConfigUpdateRequest {
	r.amazonSpApiEnvironment = &amazonSpApiEnvironment
	return r
}

// Amazon Seller ID (Merchant token)
func (r ApiAccountConfigUpdateRequest) AmazonSellerId(amazonSellerId string) ApiAccountConfigUpdateRequest {
	r.amazonSellerId = &amazonSellerId
	return r
}

// It&#39;s a AspDotNetStorefront account for which API is available
func (r ApiAccountConfigUpdateRequest) AspdotnetstorefrontApiUser(aspdotnetstorefrontApiUser string) ApiAccountConfigUpdateRequest {
	r.aspdotnetstorefrontApiUser = &aspdotnetstorefrontApiUser
	return r
}

// AspDotNetStorefront API Password
func (r ApiAccountConfigUpdateRequest) AspdotnetstorefrontApiPass(aspdotnetstorefrontApiPass string) ApiAccountConfigUpdateRequest {
	r.aspdotnetstorefrontApiPass = &aspdotnetstorefrontApiPass
	return r
}

// It&#39;s a BigCommerce account for which API is enabled
func (r ApiAccountConfigUpdateRequest) BigcommerceapiAdminAccount(bigcommerceapiAdminAccount string) ApiAccountConfigUpdateRequest {
	r.bigcommerceapiAdminAccount = &bigcommerceapiAdminAccount
	return r
}

// BigCommerce API URL
func (r ApiAccountConfigUpdateRequest) BigcommerceapiApiPath(bigcommerceapiApiPath string) ApiAccountConfigUpdateRequest {
	r.bigcommerceapiApiPath = &bigcommerceapiApiPath
	return r
}

// Bigcommerce API Key
func (r ApiAccountConfigUpdateRequest) BigcommerceapiApiKey(bigcommerceapiApiKey string) ApiAccountConfigUpdateRequest {
	r.bigcommerceapiApiKey = &bigcommerceapiApiKey
	return r
}

// Client ID of the requesting app
func (r ApiAccountConfigUpdateRequest) BigcommerceapiClientId(bigcommerceapiClientId string) ApiAccountConfigUpdateRequest {
	r.bigcommerceapiClientId = &bigcommerceapiClientId
	return r
}

// Access token authorizing the app to access resources on behalf of a user
func (r ApiAccountConfigUpdateRequest) BigcommerceapiAccessToken(bigcommerceapiAccessToken string) ApiAccountConfigUpdateRequest {
	r.bigcommerceapiAccessToken = &bigcommerceapiAccessToken
	return r
}

// API Path section unique to the store
func (r ApiAccountConfigUpdateRequest) BigcommerceapiContext(bigcommerceapiContext string) ApiAccountConfigUpdateRequest {
	r.bigcommerceapiContext = &bigcommerceapiContext
	return r
}

// Bol API Key
func (r ApiAccountConfigUpdateRequest) BolApiKey(bolApiKey string) ApiAccountConfigUpdateRequest {
	r.bolApiKey = &bolApiKey
	return r
}

// Bol API Secret
func (r ApiAccountConfigUpdateRequest) BolApiSecret(bolApiSecret string) ApiAccountConfigUpdateRequest {
	r.bolApiSecret = &bolApiSecret
	return r
}

// Bol Retailer ID
func (r ApiAccountConfigUpdateRequest) BolRetailerId(bolRetailerId int32) ApiAccountConfigUpdateRequest {
	r.bolRetailerId = &bolRetailerId
	return r
}

// Demandware client id
func (r ApiAccountConfigUpdateRequest) DemandwareClientId(demandwareClientId string) ApiAccountConfigUpdateRequest {
	r.demandwareClientId = &demandwareClientId
	return r
}

// Demandware api password
func (r ApiAccountConfigUpdateRequest) DemandwareApiPassword(demandwareApiPassword string) ApiAccountConfigUpdateRequest {
	r.demandwareApiPassword = &demandwareApiPassword
	return r
}

// Demandware user name
func (r ApiAccountConfigUpdateRequest) DemandwareUserName(demandwareUserName string) ApiAccountConfigUpdateRequest {
	r.demandwareUserName = &demandwareUserName
	return r
}

// Demandware user password
func (r ApiAccountConfigUpdateRequest) DemandwareUserPassword(demandwareUserPassword string) ApiAccountConfigUpdateRequest {
	r.demandwareUserPassword = &demandwareUserPassword
	return r
}

// Application ID (AppID).
func (r ApiAccountConfigUpdateRequest) EbayClientId(ebayClientId string) ApiAccountConfigUpdateRequest {
	r.ebayClientId = &ebayClientId
	return r
}

// Shared Secret from eBay application
func (r ApiAccountConfigUpdateRequest) EbayClientSecret(ebayClientSecret string) ApiAccountConfigUpdateRequest {
	r.ebayClientSecret = &ebayClientSecret
	return r
}

// The RuName value that eBay assigns to your application.
func (r ApiAccountConfigUpdateRequest) EbayRuname(ebayRuname string) ApiAccountConfigUpdateRequest {
	r.ebayRuname = &ebayRuname
	return r
}

// Used to authenticate API requests.
func (r ApiAccountConfigUpdateRequest) EbayAccessToken(ebayAccessToken string) ApiAccountConfigUpdateRequest {
	r.ebayAccessToken = &ebayAccessToken
	return r
}

// Used to renew the access token.
func (r ApiAccountConfigUpdateRequest) EbayRefreshToken(ebayRefreshToken string) ApiAccountConfigUpdateRequest {
	r.ebayRefreshToken = &ebayRefreshToken
	return r
}

// eBay environment
func (r ApiAccountConfigUpdateRequest) EbayEnvironment(ebayEnvironment string) ApiAccountConfigUpdateRequest {
	r.ebayEnvironment = &ebayEnvironment
	return r
}

// eBay global ID
func (r ApiAccountConfigUpdateRequest) EbaySiteId(ebaySiteId int32) ApiAccountConfigUpdateRequest {
	r.ebaySiteId = &ebaySiteId
	return r
}

// Access token authorizing the app to access resources on behalf of a user
func (r ApiAccountConfigUpdateRequest) EcwidAcessToken(ecwidAcessToken string) ApiAccountConfigUpdateRequest {
	r.ecwidAcessToken = &ecwidAcessToken
	return r
}

// Store Id
func (r ApiAccountConfigUpdateRequest) EcwidStoreId(ecwidStoreId string) ApiAccountConfigUpdateRequest {
	r.ecwidStoreId = &ecwidStoreId
	return r
}

// Lazada App ID
func (r ApiAccountConfigUpdateRequest) LazadaAppId(lazadaAppId string) ApiAccountConfigUpdateRequest {
	r.lazadaAppId = &lazadaAppId
	return r
}

// Lazada App Secret
func (r ApiAccountConfigUpdateRequest) LazadaAppSecret(lazadaAppSecret string) ApiAccountConfigUpdateRequest {
	r.lazadaAppSecret = &lazadaAppSecret
	return r
}

// Lazada Refresh Token
func (r ApiAccountConfigUpdateRequest) LazadaRefreshToken(lazadaRefreshToken string) ApiAccountConfigUpdateRequest {
	r.lazadaRefreshToken = &lazadaRefreshToken
	return r
}

// Lazada API endpoint Region
func (r ApiAccountConfigUpdateRequest) LazadaRegion(lazadaRegion string) ApiAccountConfigUpdateRequest {
	r.lazadaRegion = &lazadaRegion
	return r
}

// Etsy keystring
func (r ApiAccountConfigUpdateRequest) EtsyKeystring(etsyKeystring string) ApiAccountConfigUpdateRequest {
	r.etsyKeystring = &etsyKeystring
	return r
}

// Etsy shared secret
func (r ApiAccountConfigUpdateRequest) EtsySharedSecret(etsySharedSecret string) ApiAccountConfigUpdateRequest {
	r.etsySharedSecret = &etsySharedSecret
	return r
}

// Access token authorizing the app to access resources on behalf of a user
func (r ApiAccountConfigUpdateRequest) EtsyAccessToken(etsyAccessToken string) ApiAccountConfigUpdateRequest {
	r.etsyAccessToken = &etsyAccessToken
	return r
}

// Secret token authorizing the app to access resources on behalf of a user
func (r ApiAccountConfigUpdateRequest) EtsyTokenSecret(etsyTokenSecret string) ApiAccountConfigUpdateRequest {
	r.etsyTokenSecret = &etsyTokenSecret
	return r
}

// Etsy Client Id
func (r ApiAccountConfigUpdateRequest) EtsyClientId(etsyClientId string) ApiAccountConfigUpdateRequest {
	r.etsyClientId = &etsyClientId
	return r
}

// Etsy Refresh token
func (r ApiAccountConfigUpdateRequest) EtsyRefreshToken(etsyRefreshToken string) ApiAccountConfigUpdateRequest {
	r.etsyRefreshToken = &etsyRefreshToken
	return r
}

// Facebook App ID
func (r ApiAccountConfigUpdateRequest) FacebookAppId(facebookAppId string) ApiAccountConfigUpdateRequest {
	r.facebookAppId = &facebookAppId
	return r
}

// Facebook App Secret
func (r ApiAccountConfigUpdateRequest) FacebookAppSecret(facebookAppSecret string) ApiAccountConfigUpdateRequest {
	r.facebookAppSecret = &facebookAppSecret
	return r
}

// Facebook Access Token
func (r ApiAccountConfigUpdateRequest) FacebookAccessToken(facebookAccessToken string) ApiAccountConfigUpdateRequest {
	r.facebookAccessToken = &facebookAccessToken
	return r
}

// Facebook Business ID
func (r ApiAccountConfigUpdateRequest) FacebookBusinessId(facebookBusinessId string) ApiAccountConfigUpdateRequest {
	r.facebookBusinessId = &facebookBusinessId
	return r
}

// Neto API Key
func (r ApiAccountConfigUpdateRequest) NetoApiKey(netoApiKey string) ApiAccountConfigUpdateRequest {
	r.netoApiKey = &netoApiKey
	return r
}

// Neto User Name
func (r ApiAccountConfigUpdateRequest) NetoApiUsername(netoApiUsername string) ApiAccountConfigUpdateRequest {
	r.netoApiUsername = &netoApiUsername
	return r
}

// Shopline APP Key
func (r ApiAccountConfigUpdateRequest) ShoplineAccessToken(shoplineAccessToken string) ApiAccountConfigUpdateRequest {
	r.shoplineAccessToken = &shoplineAccessToken
	return r
}

// Shopline APP Key
func (r ApiAccountConfigUpdateRequest) ShoplineAppKey(shoplineAppKey string) ApiAccountConfigUpdateRequest {
	r.shoplineAppKey = &shoplineAppKey
	return r
}

// Shopline App Secret
func (r ApiAccountConfigUpdateRequest) ShoplineAppSecret(shoplineAppSecret string) ApiAccountConfigUpdateRequest {
	r.shoplineAppSecret = &shoplineAppSecret
	return r
}

// Shopline Shared Secret
func (r ApiAccountConfigUpdateRequest) ShoplineSharedSecret(shoplineSharedSecret string) ApiAccountConfigUpdateRequest {
	r.shoplineSharedSecret = &shoplineSharedSecret
	return r
}

// Access token authorizing the app to access resources on behalf of a user
func (r ApiAccountConfigUpdateRequest) ShopifyAccessToken(shopifyAccessToken string) ApiAccountConfigUpdateRequest {
	r.shopifyAccessToken = &shopifyAccessToken
	return r
}

// Shopify API Key
func (r ApiAccountConfigUpdateRequest) ShopifyApiKey(shopifyApiKey string) ApiAccountConfigUpdateRequest {
	r.shopifyApiKey = &shopifyApiKey
	return r
}

// Shopify API Password
func (r ApiAccountConfigUpdateRequest) ShopifyApiPassword(shopifyApiPassword string) ApiAccountConfigUpdateRequest {
	r.shopifyApiPassword = &shopifyApiPassword
	return r
}

// Shared secret
func (r ApiAccountConfigUpdateRequest) ShopifySharedSecret(shopifySharedSecret string) ApiAccountConfigUpdateRequest {
	r.shopifySharedSecret = &shopifySharedSecret
	return r
}

// Access token authorizing the app to access resources on behalf of a user
func (r ApiAccountConfigUpdateRequest) ShoplazzaAccessToken(shoplazzaAccessToken string) ApiAccountConfigUpdateRequest {
	r.shoplazzaAccessToken = &shoplazzaAccessToken
	return r
}

// Shared secret
func (r ApiAccountConfigUpdateRequest) ShoplazzaSharedSecret(shoplazzaSharedSecret string) ApiAccountConfigUpdateRequest {
	r.shoplazzaSharedSecret = &shoplazzaSharedSecret
	return r
}

// Miva access token
func (r ApiAccountConfigUpdateRequest) MivaAccessToken(mivaAccessToken string) ApiAccountConfigUpdateRequest {
	r.mivaAccessToken = &mivaAccessToken
	return r
}

// Miva signature
func (r ApiAccountConfigUpdateRequest) MivaSignature(mivaSignature string) ApiAccountConfigUpdateRequest {
	r.mivaSignature = &mivaSignature
	return r
}

// Shopware access key
func (r ApiAccountConfigUpdateRequest) ShopwareAccessKey(shopwareAccessKey string) ApiAccountConfigUpdateRequest {
	r.shopwareAccessKey = &shopwareAccessKey
	return r
}

// Shopware api key
func (r ApiAccountConfigUpdateRequest) ShopwareApiKey(shopwareApiKey string) ApiAccountConfigUpdateRequest {
	r.shopwareApiKey = &shopwareApiKey
	return r
}

// Shopware client secret access key
func (r ApiAccountConfigUpdateRequest) ShopwareApiSecret(shopwareApiSecret string) ApiAccountConfigUpdateRequest {
	r.shopwareApiSecret = &shopwareApiSecret
	return r
}

// Subdomain of store
func (r ApiAccountConfigUpdateRequest) BigcartelUserName(bigcartelUserName string) ApiAccountConfigUpdateRequest {
	r.bigcartelUserName = &bigcartelUserName
	return r
}

// BigCartel account password
func (r ApiAccountConfigUpdateRequest) BigcartelPassword(bigcartelPassword string) ApiAccountConfigUpdateRequest {
	r.bigcartelPassword = &bigcartelPassword
	return r
}

// It&#39;s a Volusion account for which API is enabled
func (r ApiAccountConfigUpdateRequest) VolusionLogin(volusionLogin string) ApiAccountConfigUpdateRequest {
	r.volusionLogin = &volusionLogin
	return r
}

// Volusion API Password
func (r ApiAccountConfigUpdateRequest) VolusionPassword(volusionPassword string) ApiAccountConfigUpdateRequest {
	r.volusionPassword = &volusionPassword
	return r
}

// Walmart client ID. For the region &#39;ca&#39; use Consumer ID
func (r ApiAccountConfigUpdateRequest) WalmartClientId(walmartClientId string) ApiAccountConfigUpdateRequest {
	r.walmartClientId = &walmartClientId
	return r
}

// Walmart client secret. For the region &#39;ca&#39; use Private Key
func (r ApiAccountConfigUpdateRequest) WalmartClientSecret(walmartClientSecret string) ApiAccountConfigUpdateRequest {
	r.walmartClientSecret = &walmartClientSecret
	return r
}

// Walmart environment
func (r ApiAccountConfigUpdateRequest) WalmartEnvironment(walmartEnvironment string) ApiAccountConfigUpdateRequest {
	r.walmartEnvironment = &walmartEnvironment
	return r
}

// Walmart WM_CONSUMER.CHANNEL.TYPE header
func (r ApiAccountConfigUpdateRequest) WalmartChannelType(walmartChannelType string) ApiAccountConfigUpdateRequest {
	r.walmartChannelType = &walmartChannelType
	return r
}

// Walmart region
func (r ApiAccountConfigUpdateRequest) WalmartRegion(walmartRegion string) ApiAccountConfigUpdateRequest {
	r.walmartRegion = &walmartRegion
	return r
}

// Square (Weebly) Client ID
func (r ApiAccountConfigUpdateRequest) SquareClientId(squareClientId string) ApiAccountConfigUpdateRequest {
	r.squareClientId = &squareClientId
	return r
}

// Square (Weebly) Client Secret
func (r ApiAccountConfigUpdateRequest) SquareClientSecret(squareClientSecret string) ApiAccountConfigUpdateRequest {
	r.squareClientSecret = &squareClientSecret
	return r
}

// Square (Weebly) Refresh Token
func (r ApiAccountConfigUpdateRequest) SquareRefreshToken(squareRefreshToken string) ApiAccountConfigUpdateRequest {
	r.squareRefreshToken = &squareRefreshToken
	return r
}

// Squarespace API Key
func (r ApiAccountConfigUpdateRequest) SquarespaceApiKey(squarespaceApiKey string) ApiAccountConfigUpdateRequest {
	r.squarespaceApiKey = &squarespaceApiKey
	return r
}

// Squarespace Connector Client ID
func (r ApiAccountConfigUpdateRequest) SquarespaceClientId(squarespaceClientId string) ApiAccountConfigUpdateRequest {
	r.squarespaceClientId = &squarespaceClientId
	return r
}

// Squarespace Connector Client Secret
func (r ApiAccountConfigUpdateRequest) SquarespaceClientSecret(squarespaceClientSecret string) ApiAccountConfigUpdateRequest {
	r.squarespaceClientSecret = &squarespaceClientSecret
	return r
}

// Squarespace access token
func (r ApiAccountConfigUpdateRequest) SquarespaceAccessToken(squarespaceAccessToken string) ApiAccountConfigUpdateRequest {
	r.squarespaceAccessToken = &squarespaceAccessToken
	return r
}

// Squarespace refresh token
func (r ApiAccountConfigUpdateRequest) SquarespaceRefreshToken(squarespaceRefreshToken string) ApiAccountConfigUpdateRequest {
	r.squarespaceRefreshToken = &squarespaceRefreshToken
	return r
}

// Omni Commerce Connector Client ID
func (r ApiAccountConfigUpdateRequest) HybrisClientId(hybrisClientId string) ApiAccountConfigUpdateRequest {
	r.hybrisClientId = &hybrisClientId
	return r
}

// Omni Commerce Connector Client Secret
func (r ApiAccountConfigUpdateRequest) HybrisClientSecret(hybrisClientSecret string) ApiAccountConfigUpdateRequest {
	r.hybrisClientSecret = &hybrisClientSecret
	return r
}

// User Name
func (r ApiAccountConfigUpdateRequest) HybrisUsername(hybrisUsername string) ApiAccountConfigUpdateRequest {
	r.hybrisUsername = &hybrisUsername
	return r
}

// User password
func (r ApiAccountConfigUpdateRequest) HybrisPassword(hybrisPassword string) ApiAccountConfigUpdateRequest {
	r.hybrisPassword = &hybrisPassword
	return r
}

// Websites to stores mapping data
func (r ApiAccountConfigUpdateRequest) HybrisWebsites(hybrisWebsites []string) ApiAccountConfigUpdateRequest {
	r.hybrisWebsites = &hybrisWebsites
	return r
}

// LightSpeed api key
func (r ApiAccountConfigUpdateRequest) LightspeedApiKey(lightspeedApiKey string) ApiAccountConfigUpdateRequest {
	r.lightspeedApiKey = &lightspeedApiKey
	return r
}

// LightSpeed api secret
func (r ApiAccountConfigUpdateRequest) LightspeedApiSecret(lightspeedApiSecret string) ApiAccountConfigUpdateRequest {
	r.lightspeedApiSecret = &lightspeedApiSecret
	return r
}

// CommerceHQ api key
func (r ApiAccountConfigUpdateRequest) CommercehqApiKey(commercehqApiKey string) ApiAccountConfigUpdateRequest {
	r.commercehqApiKey = &commercehqApiKey
	return r
}

// CommerceHQ api password
func (r ApiAccountConfigUpdateRequest) CommercehqApiPassword(commercehqApiPassword string) ApiAccountConfigUpdateRequest {
	r.commercehqApiPassword = &commercehqApiPassword
	return r
}

// Woocommerce consumer key
func (r ApiAccountConfigUpdateRequest) WcConsumerKey(wcConsumerKey string) ApiAccountConfigUpdateRequest {
	r.wcConsumerKey = &wcConsumerKey
	return r
}

// Woocommerce consumer secret
func (r ApiAccountConfigUpdateRequest) WcConsumerSecret(wcConsumerSecret string) ApiAccountConfigUpdateRequest {
	r.wcConsumerSecret = &wcConsumerSecret
	return r
}

// Magento Consumer Key
func (r ApiAccountConfigUpdateRequest) MagentoConsumerKey(magentoConsumerKey string) ApiAccountConfigUpdateRequest {
	r.magentoConsumerKey = &magentoConsumerKey
	return r
}

// Magento Consumer Secret
func (r ApiAccountConfigUpdateRequest) MagentoConsumerSecret(magentoConsumerSecret string) ApiAccountConfigUpdateRequest {
	r.magentoConsumerSecret = &magentoConsumerSecret
	return r
}

// Magento Access Token
func (r ApiAccountConfigUpdateRequest) MagentoAccessToken(magentoAccessToken string) ApiAccountConfigUpdateRequest {
	r.magentoAccessToken = &magentoAccessToken
	return r
}

// Magento Token Secret
func (r ApiAccountConfigUpdateRequest) MagentoTokenSecret(magentoTokenSecret string) ApiAccountConfigUpdateRequest {
	r.magentoTokenSecret = &magentoTokenSecret
	return r
}

// Prestashop webservice key
func (r ApiAccountConfigUpdateRequest) PrestashopWebserviceKey(prestashopWebserviceKey string) ApiAccountConfigUpdateRequest {
	r.prestashopWebserviceKey = &prestashopWebserviceKey
	return r
}

// Wix App ID
func (r ApiAccountConfigUpdateRequest) WixAppId(wixAppId string) ApiAccountConfigUpdateRequest {
	r.wixAppId = &wixAppId
	return r
}

// Wix App Secret Key
func (r ApiAccountConfigUpdateRequest) WixAppSecretKey(wixAppSecretKey string) ApiAccountConfigUpdateRequest {
	r.wixAppSecretKey = &wixAppSecretKey
	return r
}

// Wix Instance ID
func (r ApiAccountConfigUpdateRequest) WixInstanceId(wixInstanceId string) ApiAccountConfigUpdateRequest {
	r.wixInstanceId = &wixInstanceId
	return r
}

// Wix refresh token
func (r ApiAccountConfigUpdateRequest) WixRefreshToken(wixRefreshToken string) ApiAccountConfigUpdateRequest {
	r.wixRefreshToken = &wixRefreshToken
	return r
}

// Mercado Libre App ID
func (r ApiAccountConfigUpdateRequest) MercadoLibreAppId(mercadoLibreAppId string) ApiAccountConfigUpdateRequest {
	r.mercadoLibreAppId = &mercadoLibreAppId
	return r
}

// Mercado Libre App Secret Key
func (r ApiAccountConfigUpdateRequest) MercadoLibreAppSecretKey(mercadoLibreAppSecretKey string) ApiAccountConfigUpdateRequest {
	r.mercadoLibreAppSecretKey = &mercadoLibreAppSecretKey
	return r
}

// Mercado Libre Refresh Token
func (r ApiAccountConfigUpdateRequest) MercadoLibreRefreshToken(mercadoLibreRefreshToken string) ApiAccountConfigUpdateRequest {
	r.mercadoLibreRefreshToken = &mercadoLibreRefreshToken
	return r
}

// Zid Client ID
func (r ApiAccountConfigUpdateRequest) ZidClientId(zidClientId int32) ApiAccountConfigUpdateRequest {
	r.zidClientId = &zidClientId
	return r
}

// Zid Client Secret
func (r ApiAccountConfigUpdateRequest) ZidClientSecret(zidClientSecret string) ApiAccountConfigUpdateRequest {
	r.zidClientSecret = &zidClientSecret
	return r
}

// Zid Access Token
func (r ApiAccountConfigUpdateRequest) ZidAccessToken(zidAccessToken string) ApiAccountConfigUpdateRequest {
	r.zidAccessToken = &zidAccessToken
	return r
}

// Zid Authorization
func (r ApiAccountConfigUpdateRequest) ZidAuthorization(zidAuthorization string) ApiAccountConfigUpdateRequest {
	r.zidAuthorization = &zidAuthorization
	return r
}

// Zid refresh token
func (r ApiAccountConfigUpdateRequest) ZidRefreshToken(zidRefreshToken string) ApiAccountConfigUpdateRequest {
	r.zidRefreshToken = &zidRefreshToken
	return r
}

// Flipkart Client ID
func (r ApiAccountConfigUpdateRequest) FlipkartClientId(flipkartClientId string) ApiAccountConfigUpdateRequest {
	r.flipkartClientId = &flipkartClientId
	return r
}

// Flipkart Client Secret
func (r ApiAccountConfigUpdateRequest) FlipkartClientSecret(flipkartClientSecret string) ApiAccountConfigUpdateRequest {
	r.flipkartClientSecret = &flipkartClientSecret
	return r
}

// Allegro Client ID
func (r ApiAccountConfigUpdateRequest) AllegroClientId(allegroClientId string) ApiAccountConfigUpdateRequest {
	r.allegroClientId = &allegroClientId
	return r
}

// Allegro Client Secret
func (r ApiAccountConfigUpdateRequest) AllegroClientSecret(allegroClientSecret string) ApiAccountConfigUpdateRequest {
	r.allegroClientSecret = &allegroClientSecret
	return r
}

// Allegro Access Token
func (r ApiAccountConfigUpdateRequest) AllegroAccessToken(allegroAccessToken string) ApiAccountConfigUpdateRequest {
	r.allegroAccessToken = &allegroAccessToken
	return r
}

// Allegro Refresh Token
func (r ApiAccountConfigUpdateRequest) AllegroRefreshToken(allegroRefreshToken string) ApiAccountConfigUpdateRequest {
	r.allegroRefreshToken = &allegroRefreshToken
	return r
}

// Allegro Environment
func (r ApiAccountConfigUpdateRequest) AllegroEnvironment(allegroEnvironment string) ApiAccountConfigUpdateRequest {
	r.allegroEnvironment = &allegroEnvironment
	return r
}

// Zoho Client ID
func (r ApiAccountConfigUpdateRequest) ZohoClientId(zohoClientId string) ApiAccountConfigUpdateRequest {
	r.zohoClientId = &zohoClientId
	return r
}

// Zoho Client Secret
func (r ApiAccountConfigUpdateRequest) ZohoClientSecret(zohoClientSecret string) ApiAccountConfigUpdateRequest {
	r.zohoClientSecret = &zohoClientSecret
	return r
}

// Zoho Refresh Token
func (r ApiAccountConfigUpdateRequest) ZohoRefreshToken(zohoRefreshToken string) ApiAccountConfigUpdateRequest {
	r.zohoRefreshToken = &zohoRefreshToken
	return r
}

// Zoho API endpoint Region
func (r ApiAccountConfigUpdateRequest) ZohoRegion(zohoRegion string) ApiAccountConfigUpdateRequest {
	r.zohoRegion = &zohoRegion
	return r
}

// Tiendanube User ID
func (r ApiAccountConfigUpdateRequest) TiendanubeUserId(tiendanubeUserId int32) ApiAccountConfigUpdateRequest {
	r.tiendanubeUserId = &tiendanubeUserId
	return r
}

// Tiendanube Access Token
func (r ApiAccountConfigUpdateRequest) TiendanubeAccessToken(tiendanubeAccessToken string) ApiAccountConfigUpdateRequest {
	r.tiendanubeAccessToken = &tiendanubeAccessToken
	return r
}

// Tiendanube Client Secret
func (r ApiAccountConfigUpdateRequest) TiendanubeClientSecret(tiendanubeClientSecret string) ApiAccountConfigUpdateRequest {
	r.tiendanubeClientSecret = &tiendanubeClientSecret
	return r
}

// Otto Client ID
func (r ApiAccountConfigUpdateRequest) OttoClientId(ottoClientId string) ApiAccountConfigUpdateRequest {
	r.ottoClientId = &ottoClientId
	return r
}

// Otto Client Secret
func (r ApiAccountConfigUpdateRequest) OttoClientSecret(ottoClientSecret string) ApiAccountConfigUpdateRequest {
	r.ottoClientSecret = &ottoClientSecret
	return r
}

// Otto App ID
func (r ApiAccountConfigUpdateRequest) OttoAppId(ottoAppId string) ApiAccountConfigUpdateRequest {
	r.ottoAppId = &ottoAppId
	return r
}

// Otto Refresh Token
func (r ApiAccountConfigUpdateRequest) OttoRefreshToken(ottoRefreshToken string) ApiAccountConfigUpdateRequest {
	r.ottoRefreshToken = &ottoRefreshToken
	return r
}

// Otto Environment
func (r ApiAccountConfigUpdateRequest) OttoEnvironment(ottoEnvironment string) ApiAccountConfigUpdateRequest {
	r.ottoEnvironment = &ottoEnvironment
	return r
}

// Otto Access Token
func (r ApiAccountConfigUpdateRequest) OttoAccessToken(ottoAccessToken string) ApiAccountConfigUpdateRequest {
	r.ottoAccessToken = &ottoAccessToken
	return r
}

// TikTok Shop App Key
func (r ApiAccountConfigUpdateRequest) TiktokshopAppKey(tiktokshopAppKey string) ApiAccountConfigUpdateRequest {
	r.tiktokshopAppKey = &tiktokshopAppKey
	return r
}

// TikTok Shop App Secret
func (r ApiAccountConfigUpdateRequest) TiktokshopAppSecret(tiktokshopAppSecret string) ApiAccountConfigUpdateRequest {
	r.tiktokshopAppSecret = &tiktokshopAppSecret
	return r
}

// TikTok Shop Refresh Token
func (r ApiAccountConfigUpdateRequest) TiktokshopRefreshToken(tiktokshopRefreshToken string) ApiAccountConfigUpdateRequest {
	r.tiktokshopRefreshToken = &tiktokshopRefreshToken
	return r
}

// TikTok Shop Access Token
func (r ApiAccountConfigUpdateRequest) TiktokshopAccessToken(tiktokshopAccessToken string) ApiAccountConfigUpdateRequest {
	r.tiktokshopAccessToken = &tiktokshopAccessToken
	return r
}

// Salla Client ID
func (r ApiAccountConfigUpdateRequest) SallaClientId(sallaClientId string) ApiAccountConfigUpdateRequest {
	r.sallaClientId = &sallaClientId
	return r
}

// Salla Client Secret
func (r ApiAccountConfigUpdateRequest) SallaClientSecret(sallaClientSecret string) ApiAccountConfigUpdateRequest {
	r.sallaClientSecret = &sallaClientSecret
	return r
}

// Salla Refresh Token
func (r ApiAccountConfigUpdateRequest) SallaRefreshToken(sallaRefreshToken string) ApiAccountConfigUpdateRequest {
	r.sallaRefreshToken = &sallaRefreshToken
	return r
}

// Salla Access Token
func (r ApiAccountConfigUpdateRequest) SallaAccessToken(sallaAccessToken string) ApiAccountConfigUpdateRequest {
	r.sallaAccessToken = &sallaAccessToken
	return r
}

func (r ApiAccountConfigUpdateRequest) Execute() (*AccountConfigUpdate200Response, *http.Response, error) {
	return r.ApiService.AccountConfigUpdateExecute(r)
}

/*
AccountConfigUpdate account.config.update

Use this method to automate the change of credentials used to connect online stores. The list of supported parameters differs depending on the platform.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAccountConfigUpdateRequest
*/
func (a *AccountAPIService) AccountConfigUpdate(ctx context.Context) ApiAccountConfigUpdateRequest {
	return ApiAccountConfigUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountConfigUpdate200Response
func (a *AccountAPIService) AccountConfigUpdateExecute(r ApiAccountConfigUpdateRequest) (*AccountConfigUpdate200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountConfigUpdate200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountAPIService.AccountConfigUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account.config.update.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.replaceParameters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "replace_parameters", r.replaceParameters, "form", "")
	}
	if r.newStoreUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "new_store_url", r.newStoreUrl, "form", "")
	}
	if r.newStoreKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "new_store_key", r.newStoreKey, "form", "")
	}
	if r.bridgeUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bridge_url", r.bridgeUrl, "form", "")
	}
	if r.storeRoot != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "store_root", r.storeRoot, "form", "")
	}
	if r.dbTablesPrefix != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "db_tables_prefix", r.dbTablesPrefix, "form", "")
	}
	if r.userAgent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_agent", r.userAgent, "form", "")
	}
	if r.var3dcartPrivateKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "3dcart_private_key", r.var3dcartPrivateKey, "form", "")
	}
	if r.var3dcartAccessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "3dcart_access_token", r.var3dcartAccessToken, "form", "")
	}
	if r.var3dcartapiApiKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "3dcartapi_api_key", r.var3dcartapiApiKey, "form", "")
	}
	if r.amazonSpClientId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amazon_sp_client_id", r.amazonSpClientId, "form", "")
	}
	if r.amazonSpClientSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amazon_sp_client_secret", r.amazonSpClientSecret, "form", "")
	}
	if r.amazonSpRefreshToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amazon_sp_refresh_token", r.amazonSpRefreshToken, "form", "")
	}
	if r.amazonSpAwsRegion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amazon_sp_aws_region", r.amazonSpAwsRegion, "form", "")
	}
	if r.amazonSpApiEnvironment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amazon_sp_api_environment", r.amazonSpApiEnvironment, "form", "")
	} else {
		var defaultValue string = "production"
		r.amazonSpApiEnvironment = &defaultValue
	}
	if r.amazonSellerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amazon_seller_id", r.amazonSellerId, "form", "")
	}
	if r.aspdotnetstorefrontApiUser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aspdotnetstorefront_api_user", r.aspdotnetstorefrontApiUser, "form", "")
	}
	if r.aspdotnetstorefrontApiPass != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aspdotnetstorefront_api_pass", r.aspdotnetstorefrontApiPass, "form", "")
	}
	if r.bigcommerceapiAdminAccount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bigcommerceapi_admin_account", r.bigcommerceapiAdminAccount, "form", "")
	}
	if r.bigcommerceapiApiPath != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bigcommerceapi_api_path", r.bigcommerceapiApiPath, "form", "")
	}
	if r.bigcommerceapiApiKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bigcommerceapi_api_key", r.bigcommerceapiApiKey, "form", "")
	}
	if r.bigcommerceapiClientId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bigcommerceapi_client_id", r.bigcommerceapiClientId, "form", "")
	}
	if r.bigcommerceapiAccessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bigcommerceapi_access_token", r.bigcommerceapiAccessToken, "form", "")
	}
	if r.bigcommerceapiContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bigcommerceapi_context", r.bigcommerceapiContext, "form", "")
	}
	if r.bolApiKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bol_api_key", r.bolApiKey, "form", "")
	}
	if r.bolApiSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bol_api_secret", r.bolApiSecret, "form", "")
	}
	if r.bolRetailerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bol_retailer_id", r.bolRetailerId, "form", "")
	}
	if r.demandwareClientId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "demandware_client_id", r.demandwareClientId, "form", "")
	}
	if r.demandwareApiPassword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "demandware_api_password", r.demandwareApiPassword, "form", "")
	}
	if r.demandwareUserName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "demandware_user_name", r.demandwareUserName, "form", "")
	}
	if r.demandwareUserPassword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "demandware_user_password", r.demandwareUserPassword, "form", "")
	}
	if r.ebayClientId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ebay_client_id", r.ebayClientId, "form", "")
	}
	if r.ebayClientSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ebay_client_secret", r.ebayClientSecret, "form", "")
	}
	if r.ebayRuname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ebay_runame", r.ebayRuname, "form", "")
	}
	if r.ebayAccessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ebay_access_token", r.ebayAccessToken, "form", "")
	}
	if r.ebayRefreshToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ebay_refresh_token", r.ebayRefreshToken, "form", "")
	}
	if r.ebayEnvironment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ebay_environment", r.ebayEnvironment, "form", "")
	}
	if r.ebaySiteId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ebay_site_id", r.ebaySiteId, "form", "")
	} else {
		var defaultValue int32 = 0
		r.ebaySiteId = &defaultValue
	}
	if r.ecwidAcessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ecwid_acess_token", r.ecwidAcessToken, "form", "")
	}
	if r.ecwidStoreId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ecwid_store_id", r.ecwidStoreId, "form", "")
	}
	if r.lazadaAppId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lazada_app_id", r.lazadaAppId, "form", "")
	}
	if r.lazadaAppSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lazada_app_secret", r.lazadaAppSecret, "form", "")
	}
	if r.lazadaRefreshToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lazada_refresh_token", r.lazadaRefreshToken, "form", "")
	}
	if r.lazadaRegion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lazada_region", r.lazadaRegion, "form", "")
	}
	if r.etsyKeystring != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "etsy_keystring", r.etsyKeystring, "form", "")
	}
	if r.etsySharedSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "etsy_shared_secret", r.etsySharedSecret, "form", "")
	}
	if r.etsyAccessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "etsy_access_token", r.etsyAccessToken, "form", "")
	}
	if r.etsyTokenSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "etsy_token_secret", r.etsyTokenSecret, "form", "")
	}
	if r.etsyClientId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "etsy_client_id", r.etsyClientId, "form", "")
	}
	if r.etsyRefreshToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "etsy_refresh_token", r.etsyRefreshToken, "form", "")
	}
	if r.facebookAppId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "facebook_app_id", r.facebookAppId, "form", "")
	}
	if r.facebookAppSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "facebook_app_secret", r.facebookAppSecret, "form", "")
	}
	if r.facebookAccessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "facebook_access_token", r.facebookAccessToken, "form", "")
	}
	if r.facebookBusinessId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "facebook_business_id", r.facebookBusinessId, "form", "")
	}
	if r.netoApiKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "neto_api_key", r.netoApiKey, "form", "")
	}
	if r.netoApiUsername != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "neto_api_username", r.netoApiUsername, "form", "")
	}
	if r.shoplineAccessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shopline_access_token", r.shoplineAccessToken, "form", "")
	}
	if r.shoplineAppKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shopline_app_key", r.shoplineAppKey, "form", "")
	}
	if r.shoplineAppSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shopline_app_secret", r.shoplineAppSecret, "form", "")
	}
	if r.shoplineSharedSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shopline_shared_secret", r.shoplineSharedSecret, "form", "")
	}
	if r.shopifyAccessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shopify_access_token", r.shopifyAccessToken, "form", "")
	}
	if r.shopifyApiKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shopify_api_key", r.shopifyApiKey, "form", "")
	}
	if r.shopifyApiPassword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shopify_api_password", r.shopifyApiPassword, "form", "")
	}
	if r.shopifySharedSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shopify_shared_secret", r.shopifySharedSecret, "form", "")
	}
	if r.shoplazzaAccessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shoplazza_access_token", r.shoplazzaAccessToken, "form", "")
	}
	if r.shoplazzaSharedSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shoplazza_shared_secret", r.shoplazzaSharedSecret, "form", "")
	}
	if r.mivaAccessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "miva_access_token", r.mivaAccessToken, "form", "")
	}
	if r.mivaSignature != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "miva_signature", r.mivaSignature, "form", "")
	}
	if r.shopwareAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shopware_access_key", r.shopwareAccessKey, "form", "")
	}
	if r.shopwareApiKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shopware_api_key", r.shopwareApiKey, "form", "")
	}
	if r.shopwareApiSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shopware_api_secret", r.shopwareApiSecret, "form", "")
	}
	if r.bigcartelUserName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bigcartel_user_name", r.bigcartelUserName, "form", "")
	}
	if r.bigcartelPassword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bigcartel_password", r.bigcartelPassword, "form", "")
	}
	if r.volusionLogin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "volusion_login", r.volusionLogin, "form", "")
	}
	if r.volusionPassword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "volusion_password", r.volusionPassword, "form", "")
	}
	if r.walmartClientId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "walmart_client_id", r.walmartClientId, "form", "")
	}
	if r.walmartClientSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "walmart_client_secret", r.walmartClientSecret, "form", "")
	}
	if r.walmartEnvironment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "walmart_environment", r.walmartEnvironment, "form", "")
	} else {
		var defaultValue string = "production"
		r.walmartEnvironment = &defaultValue
	}
	if r.walmartChannelType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "walmart_channel_type", r.walmartChannelType, "form", "")
	}
	if r.walmartRegion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "walmart_region", r.walmartRegion, "form", "")
	} else {
		var defaultValue string = "us"
		r.walmartRegion = &defaultValue
	}
	if r.squareClientId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "square_client_id", r.squareClientId, "form", "")
	}
	if r.squareClientSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "square_client_secret", r.squareClientSecret, "form", "")
	}
	if r.squareRefreshToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "square_refresh_token", r.squareRefreshToken, "form", "")
	}
	if r.squarespaceApiKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "squarespace_api_key", r.squarespaceApiKey, "form", "")
	}
	if r.squarespaceClientId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "squarespace_client_id", r.squarespaceClientId, "form", "")
	}
	if r.squarespaceClientSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "squarespace_client_secret", r.squarespaceClientSecret, "form", "")
	}
	if r.squarespaceAccessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "squarespace_access_token", r.squarespaceAccessToken, "form", "")
	}
	if r.squarespaceRefreshToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "squarespace_refresh_token", r.squarespaceRefreshToken, "form", "")
	}
	if r.hybrisClientId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hybris_client_id", r.hybrisClientId, "form", "")
	}
	if r.hybrisClientSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hybris_client_secret", r.hybrisClientSecret, "form", "")
	}
	if r.hybrisUsername != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hybris_username", r.hybrisUsername, "form", "")
	}
	if r.hybrisPassword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hybris_password", r.hybrisPassword, "form", "")
	}
	if r.hybrisWebsites != nil {
		t := *r.hybrisWebsites
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hybris_websites", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hybris_websites", t, "form", "multi")
		}
	}
	if r.lightspeedApiKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lightspeed_api_key", r.lightspeedApiKey, "form", "")
	}
	if r.lightspeedApiSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lightspeed_api_secret", r.lightspeedApiSecret, "form", "")
	}
	if r.commercehqApiKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commercehq_api_key", r.commercehqApiKey, "form", "")
	}
	if r.commercehqApiPassword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commercehq_api_password", r.commercehqApiPassword, "form", "")
	}
	if r.wcConsumerKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wc_consumer_key", r.wcConsumerKey, "form", "")
	}
	if r.wcConsumerSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wc_consumer_secret", r.wcConsumerSecret, "form", "")
	}
	if r.magentoConsumerKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "magento_consumer_key", r.magentoConsumerKey, "form", "")
	}
	if r.magentoConsumerSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "magento_consumer_secret", r.magentoConsumerSecret, "form", "")
	}
	if r.magentoAccessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "magento_access_token", r.magentoAccessToken, "form", "")
	}
	if r.magentoTokenSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "magento_token_secret", r.magentoTokenSecret, "form", "")
	}
	if r.prestashopWebserviceKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prestashop_webservice_key", r.prestashopWebserviceKey, "form", "")
	}
	if r.wixAppId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wix_app_id", r.wixAppId, "form", "")
	}
	if r.wixAppSecretKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wix_app_secret_key", r.wixAppSecretKey, "form", "")
	}
	if r.wixInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wix_instance_id", r.wixInstanceId, "form", "")
	}
	if r.wixRefreshToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wix_refresh_token", r.wixRefreshToken, "form", "")
	}
	if r.mercadoLibreAppId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mercado_libre_app_id", r.mercadoLibreAppId, "form", "")
	}
	if r.mercadoLibreAppSecretKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mercado_libre_app_secret_key", r.mercadoLibreAppSecretKey, "form", "")
	}
	if r.mercadoLibreRefreshToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mercado_libre_refresh_token", r.mercadoLibreRefreshToken, "form", "")
	}
	if r.zidClientId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "zid_client_id", r.zidClientId, "form", "")
	}
	if r.zidClientSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "zid_client_secret", r.zidClientSecret, "form", "")
	}
	if r.zidAccessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "zid_access_token", r.zidAccessToken, "form", "")
	}
	if r.zidAuthorization != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "zid_authorization", r.zidAuthorization, "form", "")
	}
	if r.zidRefreshToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "zid_refresh_token", r.zidRefreshToken, "form", "")
	}
	if r.flipkartClientId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flipkart_client_id", r.flipkartClientId, "form", "")
	}
	if r.flipkartClientSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flipkart_client_secret", r.flipkartClientSecret, "form", "")
	}
	if r.allegroClientId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allegro_client_id", r.allegroClientId, "form", "")
	}
	if r.allegroClientSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allegro_client_secret", r.allegroClientSecret, "form", "")
	}
	if r.allegroAccessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allegro_access_token", r.allegroAccessToken, "form", "")
	}
	if r.allegroRefreshToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allegro_refresh_token", r.allegroRefreshToken, "form", "")
	}
	if r.allegroEnvironment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allegro_environment", r.allegroEnvironment, "form", "")
	} else {
		var defaultValue string = "production"
		r.allegroEnvironment = &defaultValue
	}
	if r.zohoClientId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "zoho_client_id", r.zohoClientId, "form", "")
	}
	if r.zohoClientSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "zoho_client_secret", r.zohoClientSecret, "form", "")
	}
	if r.zohoRefreshToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "zoho_refresh_token", r.zohoRefreshToken, "form", "")
	}
	if r.zohoRegion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "zoho_region", r.zohoRegion, "form", "")
	}
	if r.tiendanubeUserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tiendanube_user_id", r.tiendanubeUserId, "form", "")
	}
	if r.tiendanubeAccessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tiendanube_access_token", r.tiendanubeAccessToken, "form", "")
	}
	if r.tiendanubeClientSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tiendanube_client_secret", r.tiendanubeClientSecret, "form", "")
	}
	if r.ottoClientId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "otto_client_id", r.ottoClientId, "form", "")
	}
	if r.ottoClientSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "otto_client_secret", r.ottoClientSecret, "form", "")
	}
	if r.ottoAppId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "otto_app_id", r.ottoAppId, "form", "")
	}
	if r.ottoRefreshToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "otto_refresh_token", r.ottoRefreshToken, "form", "")
	}
	if r.ottoEnvironment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "otto_environment", r.ottoEnvironment, "form", "")
	}
	if r.ottoAccessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "otto_access_token", r.ottoAccessToken, "form", "")
	}
	if r.tiktokshopAppKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tiktokshop_app_key", r.tiktokshopAppKey, "form", "")
	}
	if r.tiktokshopAppSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tiktokshop_app_secret", r.tiktokshopAppSecret, "form", "")
	}
	if r.tiktokshopRefreshToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tiktokshop_refresh_token", r.tiktokshopRefreshToken, "form", "")
	}
	if r.tiktokshopAccessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tiktokshop_access_token", r.tiktokshopAccessToken, "form", "")
	}
	if r.sallaClientId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "salla_client_id", r.sallaClientId, "form", "")
	}
	if r.sallaClientSecret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "salla_client_secret", r.sallaClientSecret, "form", "")
	}
	if r.sallaRefreshToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "salla_refresh_token", r.sallaRefreshToken, "form", "")
	}
	if r.sallaAccessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "salla_access_token", r.sallaAccessToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["StoreKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-store-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountFailedWebhooksRequest struct {
	ctx context.Context
	ApiService *AccountAPIService
	start *int32
	count *int32
	ids *string
}

// This parameter sets the number from which you want to get entities
func (r ApiAccountFailedWebhooksRequest) Start(start int32) ApiAccountFailedWebhooksRequest {
	r.start = &start
	return r
}

// This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
func (r ApiAccountFailedWebhooksRequest) Count(count int32) ApiAccountFailedWebhooksRequest {
	r.count = &count
	return r
}

// List of сomma-separated webhook ids
func (r ApiAccountFailedWebhooksRequest) Ids(ids string) ApiAccountFailedWebhooksRequest {
	r.ids = &ids
	return r
}

func (r ApiAccountFailedWebhooksRequest) Execute() (*AccountFailedWebhooks200Response, *http.Response, error) {
	return r.ApiService.AccountFailedWebhooksExecute(r)
}

/*
AccountFailedWebhooks account.failed_webhooks

If the callback of your service for some reason could not accept webhooks from API2Cart, then with the help of this method you can get a list of missed webhooks to perform synchronization again using entity_id. Please note that we keep such records for 24 hours.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAccountFailedWebhooksRequest
*/
func (a *AccountAPIService) AccountFailedWebhooks(ctx context.Context) ApiAccountFailedWebhooksRequest {
	return ApiAccountFailedWebhooksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountFailedWebhooks200Response
func (a *AccountAPIService) AccountFailedWebhooksExecute(r ApiAccountFailedWebhooksRequest) (*AccountFailedWebhooks200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountFailedWebhooks200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountAPIService.AccountFailedWebhooks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account.failed_webhooks.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	} else {
		var defaultValue int32 = 0
		r.start = &defaultValue
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.ids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ids", r.ids, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountSupportedPlatformsRequest struct {
	ctx context.Context
	ApiService *AccountAPIService
}

func (r ApiAccountSupportedPlatformsRequest) Execute() (*AccountSupportedPlatforms200Response, *http.Response, error) {
	return r.ApiService.AccountSupportedPlatformsExecute(r)
}

/*
AccountSupportedPlatforms account.supported_platforms

Use this method to retrieve a list of supported platforms and the sets of parameters required for connecting to each of them. Note: some platforms may have multiple connection methods so that the response will contain multiple sets of parameters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAccountSupportedPlatformsRequest
*/
func (a *AccountAPIService) AccountSupportedPlatforms(ctx context.Context) ApiAccountSupportedPlatformsRequest {
	return ApiAccountSupportedPlatformsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountSupportedPlatforms200Response
func (a *AccountAPIService) AccountSupportedPlatformsExecute(r ApiAccountSupportedPlatformsRequest) (*AccountSupportedPlatforms200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountSupportedPlatforms200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountAPIService.AccountSupportedPlatforms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account.supported_platforms.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
