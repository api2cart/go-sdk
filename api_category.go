/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// CategoryAPIService CategoryAPI service
type CategoryAPIService service

type ApiCategoryAddRequest struct {
	ctx context.Context
	ApiService *CategoryAPIService
	name *string
	parentId *string
	storesIds *string
	storeId *string
	langId *string
	avail *bool
	sortOrder *int32
	createdTime *string
	modifiedTime *string
	description *string
	shortDescription *string
	metaTitle *string
	metaDescription *string
	metaKeywords *string
	seoUrl *string
}

// Defines category&#39;s name that has to be added
func (r ApiCategoryAddRequest) Name(name string) ApiCategoryAddRequest {
	r.name = &name
	return r
}

// Adds categories specified by parent id
func (r ApiCategoryAddRequest) ParentId(parentId string) ApiCategoryAddRequest {
	r.parentId = &parentId
	return r
}

// Create category in the stores that is specified by comma-separated stores&#39; id
func (r ApiCategoryAddRequest) StoresIds(storesIds string) ApiCategoryAddRequest {
	r.storesIds = &storesIds
	return r
}

// Store Id
func (r ApiCategoryAddRequest) StoreId(storeId string) ApiCategoryAddRequest {
	r.storeId = &storeId
	return r
}

// Language id
func (r ApiCategoryAddRequest) LangId(langId string) ApiCategoryAddRequest {
	r.langId = &langId
	return r
}

// Defines category&#39;s visibility status
func (r ApiCategoryAddRequest) Avail(avail bool) ApiCategoryAddRequest {
	r.avail = &avail
	return r
}

// Sort number in the list
func (r ApiCategoryAddRequest) SortOrder(sortOrder int32) ApiCategoryAddRequest {
	r.sortOrder = &sortOrder
	return r
}

// Entity&#39;s date creation
func (r ApiCategoryAddRequest) CreatedTime(createdTime string) ApiCategoryAddRequest {
	r.createdTime = &createdTime
	return r
}

// Entity&#39;s date modification
func (r ApiCategoryAddRequest) ModifiedTime(modifiedTime string) ApiCategoryAddRequest {
	r.modifiedTime = &modifiedTime
	return r
}

// Defines category&#39;s description
func (r ApiCategoryAddRequest) Description(description string) ApiCategoryAddRequest {
	r.description = &description
	return r
}

// Defines short description
func (r ApiCategoryAddRequest) ShortDescription(shortDescription string) ApiCategoryAddRequest {
	r.shortDescription = &shortDescription
	return r
}

// Defines unique meta title for each entity
func (r ApiCategoryAddRequest) MetaTitle(metaTitle string) ApiCategoryAddRequest {
	r.metaTitle = &metaTitle
	return r
}

// Defines unique meta description of a entity
func (r ApiCategoryAddRequest) MetaDescription(metaDescription string) ApiCategoryAddRequest {
	r.metaDescription = &metaDescription
	return r
}

// Defines unique meta keywords for each entity
func (r ApiCategoryAddRequest) MetaKeywords(metaKeywords string) ApiCategoryAddRequest {
	r.metaKeywords = &metaKeywords
	return r
}

// Defines unique category&#39;s URL for SEO
func (r ApiCategoryAddRequest) SeoUrl(seoUrl string) ApiCategoryAddRequest {
	r.seoUrl = &seoUrl
	return r
}

func (r ApiCategoryAddRequest) Execute() (*CategoryAdd200Response, *http.Response, error) {
	return r.ApiService.CategoryAddExecute(r)
}

/*
CategoryAdd category.add

Add new category in store

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryAddRequest
*/
func (a *CategoryAPIService) CategoryAdd(ctx context.Context) ApiCategoryAddRequest {
	return ApiCategoryAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CategoryAdd200Response
func (a *CategoryAPIService) CategoryAddExecute(r ApiCategoryAddRequest) (*CategoryAdd200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CategoryAdd200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryAPIService.CategoryAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/category.add.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", r.parentId, "form", "")
	}
	if r.storesIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stores_ids", r.storesIds, "form", "")
	}
	if r.storeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "store_id", r.storeId, "form", "")
	}
	if r.langId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lang_id", r.langId, "form", "")
	}
	if r.avail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "avail", r.avail, "form", "")
	} else {
		var defaultValue bool = true
		r.avail = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_order", r.sortOrder, "form", "")
	} else {
		var defaultValue int32 = 0
		r.sortOrder = &defaultValue
	}
	if r.createdTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_time", r.createdTime, "form", "")
	}
	if r.modifiedTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_time", r.modifiedTime, "form", "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "form", "")
	}
	if r.shortDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "short_description", r.shortDescription, "form", "")
	}
	if r.metaTitle != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "meta_title", r.metaTitle, "form", "")
	}
	if r.metaDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "meta_description", r.metaDescription, "form", "")
	}
	if r.metaKeywords != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "meta_keywords", r.metaKeywords, "form", "")
	}
	if r.seoUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seo_url", r.seoUrl, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["StoreKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-store-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCategoryAddBatchRequest struct {
	ctx context.Context
	ApiService *CategoryAPIService
	categoryAddBatch *CategoryAddBatch
}

func (r ApiCategoryAddBatchRequest) CategoryAddBatch(categoryAddBatch CategoryAddBatch) ApiCategoryAddBatchRequest {
	r.categoryAddBatch = &categoryAddBatch
	return r
}

func (r ApiCategoryAddBatchRequest) Execute() (*CategoryAddBatch200Response, *http.Response, error) {
	return r.ApiService.CategoryAddBatchExecute(r)
}

/*
CategoryAddBatch category.add.batch

Add new categories to the store.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryAddBatchRequest
*/
func (a *CategoryAPIService) CategoryAddBatch(ctx context.Context) ApiCategoryAddBatchRequest {
	return ApiCategoryAddBatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CategoryAddBatch200Response
func (a *CategoryAPIService) CategoryAddBatchExecute(r ApiCategoryAddBatchRequest) (*CategoryAddBatch200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CategoryAddBatch200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryAPIService.CategoryAddBatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/category.add.batch.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.categoryAddBatch == nil {
		return localVarReturnValue, nil, reportError("categoryAddBatch is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.categoryAddBatch
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["StoreKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-store-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCategoryAssignRequest struct {
	ctx context.Context
	ApiService *CategoryAPIService
	productId *string
	categoryId *string
	storeId *string
}

// Defines category assign to the product, specified by product id
func (r ApiCategoryAssignRequest) ProductId(productId string) ApiCategoryAssignRequest {
	r.productId = &productId
	return r
}

// Defines category assign, specified by category id
func (r ApiCategoryAssignRequest) CategoryId(categoryId string) ApiCategoryAssignRequest {
	r.categoryId = &categoryId
	return r
}

// Store Id
func (r ApiCategoryAssignRequest) StoreId(storeId string) ApiCategoryAssignRequest {
	r.storeId = &storeId
	return r
}

func (r ApiCategoryAssignRequest) Execute() (*CartConfigUpdate200Response, *http.Response, error) {
	return r.ApiService.CategoryAssignExecute(r)
}

/*
CategoryAssign category.assign

Assign category to product

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryAssignRequest
*/
func (a *CategoryAPIService) CategoryAssign(ctx context.Context) ApiCategoryAssignRequest {
	return ApiCategoryAssignRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CartConfigUpdate200Response
func (a *CategoryAPIService) CategoryAssignExecute(r ApiCategoryAssignRequest) (*CartConfigUpdate200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CartConfigUpdate200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryAPIService.CategoryAssign")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/category.assign.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.productId == nil {
		return localVarReturnValue, nil, reportError("productId is required and must be specified")
	}
	if r.categoryId == nil {
		return localVarReturnValue, nil, reportError("categoryId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "product_id", r.productId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "category_id", r.categoryId, "form", "")
	if r.storeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "store_id", r.storeId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["StoreKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-store-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCategoryCountRequest struct {
	ctx context.Context
	ApiService *CategoryAPIService
	parentId *string
	storeId *string
	langId *string
	createdFrom *string
	createdTo *string
	modifiedFrom *string
	modifiedTo *string
	avail *bool
	productType *string
	findValue *string
	findWhere *string
	reportRequestId *string
	disableReportCache *bool
}

// Counts categories specified by parent id
func (r ApiCategoryCountRequest) ParentId(parentId string) ApiCategoryCountRequest {
	r.parentId = &parentId
	return r
}

// Counts category specified by store id
func (r ApiCategoryCountRequest) StoreId(storeId string) ApiCategoryCountRequest {
	r.storeId = &storeId
	return r
}

// Counts category specified by language id
func (r ApiCategoryCountRequest) LangId(langId string) ApiCategoryCountRequest {
	r.langId = &langId
	return r
}

// Retrieve entities from their creation date
func (r ApiCategoryCountRequest) CreatedFrom(createdFrom string) ApiCategoryCountRequest {
	r.createdFrom = &createdFrom
	return r
}

// Retrieve entities to their creation date
func (r ApiCategoryCountRequest) CreatedTo(createdTo string) ApiCategoryCountRequest {
	r.createdTo = &createdTo
	return r
}

// Retrieve entities from their modification date
func (r ApiCategoryCountRequest) ModifiedFrom(modifiedFrom string) ApiCategoryCountRequest {
	r.modifiedFrom = &modifiedFrom
	return r
}

// Retrieve entities to their modification date
func (r ApiCategoryCountRequest) ModifiedTo(modifiedTo string) ApiCategoryCountRequest {
	r.modifiedTo = &modifiedTo
	return r
}

// Defines category&#39;s visibility status
func (r ApiCategoryCountRequest) Avail(avail bool) ApiCategoryCountRequest {
	r.avail = &avail
	return r
}

// A categorization for the product
func (r ApiCategoryCountRequest) ProductType(productType string) ApiCategoryCountRequest {
	r.productType = &productType
	return r
}

// Entity search that is specified by some value
func (r ApiCategoryCountRequest) FindValue(findValue string) ApiCategoryCountRequest {
	r.findValue = &findValue
	return r
}

// Counts categories that are searched specified by field
func (r ApiCategoryCountRequest) FindWhere(findWhere string) ApiCategoryCountRequest {
	r.findWhere = &findWhere
	return r
}

// Report request id
func (r ApiCategoryCountRequest) ReportRequestId(reportRequestId string) ApiCategoryCountRequest {
	r.reportRequestId = &reportRequestId
	return r
}

// Disable report cache for current request
func (r ApiCategoryCountRequest) DisableReportCache(disableReportCache bool) ApiCategoryCountRequest {
	r.disableReportCache = &disableReportCache
	return r
}

func (r ApiCategoryCountRequest) Execute() (*CategoryCount200Response, *http.Response, error) {
	return r.ApiService.CategoryCountExecute(r)
}

/*
CategoryCount category.count

Count categories in store.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryCountRequest
*/
func (a *CategoryAPIService) CategoryCount(ctx context.Context) ApiCategoryCountRequest {
	return ApiCategoryCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CategoryCount200Response
func (a *CategoryAPIService) CategoryCountExecute(r ApiCategoryCountRequest) (*CategoryCount200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CategoryCount200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryAPIService.CategoryCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/category.count.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", r.parentId, "form", "")
	}
	if r.storeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "store_id", r.storeId, "form", "")
	}
	if r.langId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lang_id", r.langId, "form", "")
	}
	if r.createdFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_from", r.createdFrom, "form", "")
	}
	if r.createdTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_to", r.createdTo, "form", "")
	}
	if r.modifiedFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_from", r.modifiedFrom, "form", "")
	}
	if r.modifiedTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_to", r.modifiedTo, "form", "")
	}
	if r.avail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "avail", r.avail, "form", "")
	} else {
		var defaultValue bool = true
		r.avail = &defaultValue
	}
	if r.productType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "product_type", r.productType, "form", "")
	}
	if r.findValue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "find_value", r.findValue, "form", "")
	}
	if r.findWhere != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "find_where", r.findWhere, "form", "")
	}
	if r.reportRequestId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "report_request_id", r.reportRequestId, "form", "")
	}
	if r.disableReportCache != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "disable_report_cache", r.disableReportCache, "form", "")
	} else {
		var defaultValue bool = false
		r.disableReportCache = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["StoreKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-store-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCategoryDeleteRequest struct {
	ctx context.Context
	ApiService *CategoryAPIService
	id *string
	storeId *string
}

// Defines category removal, specified by category id
func (r ApiCategoryDeleteRequest) Id(id string) ApiCategoryDeleteRequest {
	r.id = &id
	return r
}

// Store Id
func (r ApiCategoryDeleteRequest) StoreId(storeId string) ApiCategoryDeleteRequest {
	r.storeId = &storeId
	return r
}

func (r ApiCategoryDeleteRequest) Execute() (*CategoryDelete200Response, *http.Response, error) {
	return r.ApiService.CategoryDeleteExecute(r)
}

/*
CategoryDelete category.delete

Delete category in store

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryDeleteRequest
*/
func (a *CategoryAPIService) CategoryDelete(ctx context.Context) ApiCategoryDeleteRequest {
	return ApiCategoryDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CategoryDelete200Response
func (a *CategoryAPIService) CategoryDeleteExecute(r ApiCategoryDeleteRequest) (*CategoryDelete200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CategoryDelete200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryAPIService.CategoryDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/category.delete.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	if r.storeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "store_id", r.storeId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["StoreKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-store-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCategoryFindRequest struct {
	ctx context.Context
	ApiService *CategoryAPIService
	findValue *string
	findWhere *string
	findParams *string
	storeId *string
	langId *string
}

// Entity search that is specified by some value
func (r ApiCategoryFindRequest) FindValue(findValue string) ApiCategoryFindRequest {
	r.findValue = &findValue
	return r
}

// Entity search that is specified by the comma-separated unique fields
func (r ApiCategoryFindRequest) FindWhere(findWhere string) ApiCategoryFindRequest {
	r.findWhere = &findWhere
	return r
}

// Entity search that is specified by comma-separated parameters
func (r ApiCategoryFindRequest) FindParams(findParams string) ApiCategoryFindRequest {
	r.findParams = &findParams
	return r
}

// Store Id
func (r ApiCategoryFindRequest) StoreId(storeId string) ApiCategoryFindRequest {
	r.storeId = &storeId
	return r
}

// Language id
func (r ApiCategoryFindRequest) LangId(langId string) ApiCategoryFindRequest {
	r.langId = &langId
	return r
}

func (r ApiCategoryFindRequest) Execute() (*CategoryFind200Response, *http.Response, error) {
	return r.ApiService.CategoryFindExecute(r)
}

/*
CategoryFind category.find

Search category in store. "Laptop" is specified here by default.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryFindRequest
*/
func (a *CategoryAPIService) CategoryFind(ctx context.Context) ApiCategoryFindRequest {
	return ApiCategoryFindRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CategoryFind200Response
func (a *CategoryAPIService) CategoryFindExecute(r ApiCategoryFindRequest) (*CategoryFind200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CategoryFind200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryAPIService.CategoryFind")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/category.find.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.findValue == nil {
		return localVarReturnValue, nil, reportError("findValue is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "find_value", r.findValue, "form", "")
	if r.findWhere != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "find_where", r.findWhere, "form", "")
	} else {
		var defaultValue string = "name"
		r.findWhere = &defaultValue
	}
	if r.findParams != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "find_params", r.findParams, "form", "")
	} else {
		var defaultValue string = "whole_words"
		r.findParams = &defaultValue
	}
	if r.storeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "store_id", r.storeId, "form", "")
	}
	if r.langId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lang_id", r.langId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["StoreKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-store-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCategoryImageAddRequest struct {
	ctx context.Context
	ApiService *CategoryAPIService
	categoryId *string
	imageName *string
	url *string
	type_ *string
	label *string
	mime *string
	position *int32
	storeId *string
}

// Defines category id where the image should be added
func (r ApiCategoryImageAddRequest) CategoryId(categoryId string) ApiCategoryImageAddRequest {
	r.categoryId = &categoryId
	return r
}

// Defines image&#39;s name
func (r ApiCategoryImageAddRequest) ImageName(imageName string) ApiCategoryImageAddRequest {
	r.imageName = &imageName
	return r
}

// Defines URL of the image that has to be added
func (r ApiCategoryImageAddRequest) Url(url string) ApiCategoryImageAddRequest {
	r.url = &url
	return r
}

// Defines image&#39;s types that are specified by comma-separated list
func (r ApiCategoryImageAddRequest) Type_(type_ string) ApiCategoryImageAddRequest {
	r.type_ = &type_
	return r
}

// Defines alternative text that has to be attached to the picture
func (r ApiCategoryImageAddRequest) Label(label string) ApiCategoryImageAddRequest {
	r.label = &label
	return r
}

// Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
func (r ApiCategoryImageAddRequest) Mime(mime string) ApiCategoryImageAddRequest {
	r.mime = &mime
	return r
}

// Defines image’s position in the list
func (r ApiCategoryImageAddRequest) Position(position int32) ApiCategoryImageAddRequest {
	r.position = &position
	return r
}

// Store Id
func (r ApiCategoryImageAddRequest) StoreId(storeId string) ApiCategoryImageAddRequest {
	r.storeId = &storeId
	return r
}

func (r ApiCategoryImageAddRequest) Execute() (*CategoryImageAdd200Response, *http.Response, error) {
	return r.ApiService.CategoryImageAddExecute(r)
}

/*
CategoryImageAdd category.image.add

Add image to category

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryImageAddRequest
*/
func (a *CategoryAPIService) CategoryImageAdd(ctx context.Context) ApiCategoryImageAddRequest {
	return ApiCategoryImageAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CategoryImageAdd200Response
func (a *CategoryAPIService) CategoryImageAddExecute(r ApiCategoryImageAddRequest) (*CategoryImageAdd200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CategoryImageAdd200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryAPIService.CategoryImageAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/category.image.add.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.categoryId == nil {
		return localVarReturnValue, nil, reportError("categoryId is required and must be specified")
	}
	if r.imageName == nil {
		return localVarReturnValue, nil, reportError("imageName is required and must be specified")
	}
	if r.url == nil {
		return localVarReturnValue, nil, reportError("url is required and must be specified")
	}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "category_id", r.categoryId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "image_name", r.imageName, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "url", r.url, "form", "")
	if r.label != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label", r.label, "form", "")
	}
	if r.mime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mime", r.mime, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	if r.position != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "position", r.position, "form", "")
	} else {
		var defaultValue int32 = 0
		r.position = &defaultValue
	}
	if r.storeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "store_id", r.storeId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["StoreKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-store-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCategoryImageDeleteRequest struct {
	ctx context.Context
	ApiService *CategoryAPIService
	categoryId *string
	imageId *string
	storeId *string
}

// Defines category id where the image should be deleted
func (r ApiCategoryImageDeleteRequest) CategoryId(categoryId string) ApiCategoryImageDeleteRequest {
	r.categoryId = &categoryId
	return r
}

// Define image id
func (r ApiCategoryImageDeleteRequest) ImageId(imageId string) ApiCategoryImageDeleteRequest {
	r.imageId = &imageId
	return r
}

// Store Id
func (r ApiCategoryImageDeleteRequest) StoreId(storeId string) ApiCategoryImageDeleteRequest {
	r.storeId = &storeId
	return r
}

func (r ApiCategoryImageDeleteRequest) Execute() (*AttributeDelete200Response, *http.Response, error) {
	return r.ApiService.CategoryImageDeleteExecute(r)
}

/*
CategoryImageDelete category.image.delete

Delete image

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryImageDeleteRequest
*/
func (a *CategoryAPIService) CategoryImageDelete(ctx context.Context) ApiCategoryImageDeleteRequest {
	return ApiCategoryImageDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AttributeDelete200Response
func (a *CategoryAPIService) CategoryImageDeleteExecute(r ApiCategoryImageDeleteRequest) (*AttributeDelete200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AttributeDelete200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryAPIService.CategoryImageDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/category.image.delete.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.categoryId == nil {
		return localVarReturnValue, nil, reportError("categoryId is required and must be specified")
	}
	if r.imageId == nil {
		return localVarReturnValue, nil, reportError("imageId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "category_id", r.categoryId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "image_id", r.imageId, "form", "")
	if r.storeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "store_id", r.storeId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["StoreKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-store-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCategoryInfoRequest struct {
	ctx context.Context
	ApiService *CategoryAPIService
	id *string
	params *string
	responseFields *string
	exclude *string
	storeId *string
	langId *string
	schemaType *string
	reportRequestId *string
	disableReportCache *bool
}

// Retrieves category&#39;s info specified by category id
func (r ApiCategoryInfoRequest) Id(id string) ApiCategoryInfoRequest {
	r.id = &id
	return r
}

// Set this parameter in order to choose which entity fields you want to retrieve
func (r ApiCategoryInfoRequest) Params(params string) ApiCategoryInfoRequest {
	r.params = &params
	return r
}

// Set this parameter in order to choose which entity fields you want to retrieve
func (r ApiCategoryInfoRequest) ResponseFields(responseFields string) ApiCategoryInfoRequest {
	r.responseFields = &responseFields
	return r
}

// Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
func (r ApiCategoryInfoRequest) Exclude(exclude string) ApiCategoryInfoRequest {
	r.exclude = &exclude
	return r
}

// Retrieves category info  specified by store id
func (r ApiCategoryInfoRequest) StoreId(storeId string) ApiCategoryInfoRequest {
	r.storeId = &storeId
	return r
}

// Retrieves category info  specified by language id
func (r ApiCategoryInfoRequest) LangId(langId string) ApiCategoryInfoRequest {
	r.langId = &langId
	return r
}

// The name of the requirements set for the provided schema.
func (r ApiCategoryInfoRequest) SchemaType(schemaType string) ApiCategoryInfoRequest {
	r.schemaType = &schemaType
	return r
}

// Report request id
func (r ApiCategoryInfoRequest) ReportRequestId(reportRequestId string) ApiCategoryInfoRequest {
	r.reportRequestId = &reportRequestId
	return r
}

// Disable report cache for current request
func (r ApiCategoryInfoRequest) DisableReportCache(disableReportCache bool) ApiCategoryInfoRequest {
	r.disableReportCache = &disableReportCache
	return r
}

func (r ApiCategoryInfoRequest) Execute() (*CategoryInfo200Response, *http.Response, error) {
	return r.ApiService.CategoryInfoExecute(r)
}

/*
CategoryInfo category.info

Get category info about category ID*** or specify other category ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryInfoRequest
*/
func (a *CategoryAPIService) CategoryInfo(ctx context.Context) ApiCategoryInfoRequest {
	return ApiCategoryInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CategoryInfo200Response
func (a *CategoryAPIService) CategoryInfoExecute(r ApiCategoryInfoRequest) (*CategoryInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CategoryInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryAPIService.CategoryInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/category.info.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	if r.params != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "params", r.params, "form", "")
	} else {
		var defaultValue string = "id,parent_id,name,description"
		r.params = &defaultValue
	}
	if r.responseFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "response_fields", r.responseFields, "form", "")
	}
	if r.exclude != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude", r.exclude, "form", "")
	}
	if r.storeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "store_id", r.storeId, "form", "")
	}
	if r.langId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lang_id", r.langId, "form", "")
	}
	if r.schemaType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "schema_type", r.schemaType, "form", "")
	}
	if r.reportRequestId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "report_request_id", r.reportRequestId, "form", "")
	}
	if r.disableReportCache != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "disable_report_cache", r.disableReportCache, "form", "")
	} else {
		var defaultValue bool = false
		r.disableReportCache = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["StoreKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-store-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCategoryListRequest struct {
	ctx context.Context
	ApiService *CategoryAPIService
	start *int32
	count *int32
	pageCursor *string
	parentId *string
	params *string
	responseFields *string
	exclude *string
	storeId *string
	langId *string
	createdFrom *string
	createdTo *string
	modifiedFrom *string
	modifiedTo *string
	avail *bool
	productType *string
	findValue *string
	findWhere *string
	reportRequestId *string
	disableReportCache *bool
	disableCache *bool
}

// This parameter sets the number from which you want to get entities
func (r ApiCategoryListRequest) Start(start int32) ApiCategoryListRequest {
	r.start = &start
	return r
}

// This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
func (r ApiCategoryListRequest) Count(count int32) ApiCategoryListRequest {
	r.count = &count
	return r
}

// Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
func (r ApiCategoryListRequest) PageCursor(pageCursor string) ApiCategoryListRequest {
	r.pageCursor = &pageCursor
	return r
}

// Retrieves categories specified by parent id
func (r ApiCategoryListRequest) ParentId(parentId string) ApiCategoryListRequest {
	r.parentId = &parentId
	return r
}

// Set this parameter in order to choose which entity fields you want to retrieve
func (r ApiCategoryListRequest) Params(params string) ApiCategoryListRequest {
	r.params = &params
	return r
}

// Set this parameter in order to choose which entity fields you want to retrieve
func (r ApiCategoryListRequest) ResponseFields(responseFields string) ApiCategoryListRequest {
	r.responseFields = &responseFields
	return r
}

// Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
func (r ApiCategoryListRequest) Exclude(exclude string) ApiCategoryListRequest {
	r.exclude = &exclude
	return r
}

// Retrieves categories specified by store id
func (r ApiCategoryListRequest) StoreId(storeId string) ApiCategoryListRequest {
	r.storeId = &storeId
	return r
}

// Retrieves categorys specified by language id
func (r ApiCategoryListRequest) LangId(langId string) ApiCategoryListRequest {
	r.langId = &langId
	return r
}

// Retrieve entities from their creation date
func (r ApiCategoryListRequest) CreatedFrom(createdFrom string) ApiCategoryListRequest {
	r.createdFrom = &createdFrom
	return r
}

// Retrieve entities to their creation date
func (r ApiCategoryListRequest) CreatedTo(createdTo string) ApiCategoryListRequest {
	r.createdTo = &createdTo
	return r
}

// Retrieve entities from their modification date
func (r ApiCategoryListRequest) ModifiedFrom(modifiedFrom string) ApiCategoryListRequest {
	r.modifiedFrom = &modifiedFrom
	return r
}

// Retrieve entities to their modification date
func (r ApiCategoryListRequest) ModifiedTo(modifiedTo string) ApiCategoryListRequest {
	r.modifiedTo = &modifiedTo
	return r
}

// Defines category&#39;s visibility status
func (r ApiCategoryListRequest) Avail(avail bool) ApiCategoryListRequest {
	r.avail = &avail
	return r
}

// A categorization for the product
func (r ApiCategoryListRequest) ProductType(productType string) ApiCategoryListRequest {
	r.productType = &productType
	return r
}

// Entity search that is specified by some value
func (r ApiCategoryListRequest) FindValue(findValue string) ApiCategoryListRequest {
	r.findValue = &findValue
	return r
}

// Category search that is specified by field
func (r ApiCategoryListRequest) FindWhere(findWhere string) ApiCategoryListRequest {
	r.findWhere = &findWhere
	return r
}

// Report request id
func (r ApiCategoryListRequest) ReportRequestId(reportRequestId string) ApiCategoryListRequest {
	r.reportRequestId = &reportRequestId
	return r
}

// Disable report cache for current request
func (r ApiCategoryListRequest) DisableReportCache(disableReportCache bool) ApiCategoryListRequest {
	r.disableReportCache = &disableReportCache
	return r
}

// Disable cache for current request
func (r ApiCategoryListRequest) DisableCache(disableCache bool) ApiCategoryListRequest {
	r.disableCache = &disableCache
	return r
}

func (r ApiCategoryListRequest) Execute() (*ModelResponseCategoryList, *http.Response, error) {
	return r.ApiService.CategoryListExecute(r)
}

/*
CategoryList category.list

Get list of categories from store.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryListRequest
*/
func (a *CategoryAPIService) CategoryList(ctx context.Context) ApiCategoryListRequest {
	return ApiCategoryListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelResponseCategoryList
func (a *CategoryAPIService) CategoryListExecute(r ApiCategoryListRequest) (*ModelResponseCategoryList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelResponseCategoryList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryAPIService.CategoryList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/category.list.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	} else {
		var defaultValue int32 = 0
		r.start = &defaultValue
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.pageCursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_cursor", r.pageCursor, "form", "")
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", r.parentId, "form", "")
	}
	if r.params != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "params", r.params, "form", "")
	} else {
		var defaultValue string = "id,parent_id,name,description"
		r.params = &defaultValue
	}
	if r.responseFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "response_fields", r.responseFields, "form", "")
	}
	if r.exclude != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude", r.exclude, "form", "")
	}
	if r.storeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "store_id", r.storeId, "form", "")
	}
	if r.langId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lang_id", r.langId, "form", "")
	}
	if r.createdFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_from", r.createdFrom, "form", "")
	}
	if r.createdTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_to", r.createdTo, "form", "")
	}
	if r.modifiedFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_from", r.modifiedFrom, "form", "")
	}
	if r.modifiedTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_to", r.modifiedTo, "form", "")
	}
	if r.avail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "avail", r.avail, "form", "")
	} else {
		var defaultValue bool = true
		r.avail = &defaultValue
	}
	if r.productType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "product_type", r.productType, "form", "")
	}
	if r.findValue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "find_value", r.findValue, "form", "")
	}
	if r.findWhere != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "find_where", r.findWhere, "form", "")
	}
	if r.reportRequestId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "report_request_id", r.reportRequestId, "form", "")
	}
	if r.disableReportCache != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "disable_report_cache", r.disableReportCache, "form", "")
	} else {
		var defaultValue bool = false
		r.disableReportCache = &defaultValue
	}
	if r.disableCache != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "disable_cache", r.disableCache, "form", "")
	} else {
		var defaultValue bool = false
		r.disableCache = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["StoreKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-store-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCategoryUnassignRequest struct {
	ctx context.Context
	ApiService *CategoryAPIService
	categoryId *string
	productId *string
	storeId *string
}

// Defines category unassign, specified by category id
func (r ApiCategoryUnassignRequest) CategoryId(categoryId string) ApiCategoryUnassignRequest {
	r.categoryId = &categoryId
	return r
}

// Defines category unassign to the product, specified by product id
func (r ApiCategoryUnassignRequest) ProductId(productId string) ApiCategoryUnassignRequest {
	r.productId = &productId
	return r
}

// Store Id
func (r ApiCategoryUnassignRequest) StoreId(storeId string) ApiCategoryUnassignRequest {
	r.storeId = &storeId
	return r
}

func (r ApiCategoryUnassignRequest) Execute() (*CartConfigUpdate200Response, *http.Response, error) {
	return r.ApiService.CategoryUnassignExecute(r)
}

/*
CategoryUnassign category.unassign

Unassign category to product

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryUnassignRequest
*/
func (a *CategoryAPIService) CategoryUnassign(ctx context.Context) ApiCategoryUnassignRequest {
	return ApiCategoryUnassignRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CartConfigUpdate200Response
func (a *CategoryAPIService) CategoryUnassignExecute(r ApiCategoryUnassignRequest) (*CartConfigUpdate200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CartConfigUpdate200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryAPIService.CategoryUnassign")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/category.unassign.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.categoryId == nil {
		return localVarReturnValue, nil, reportError("categoryId is required and must be specified")
	}
	if r.productId == nil {
		return localVarReturnValue, nil, reportError("productId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "category_id", r.categoryId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "product_id", r.productId, "form", "")
	if r.storeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "store_id", r.storeId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["StoreKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-store-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCategoryUpdateRequest struct {
	ctx context.Context
	ApiService *CategoryAPIService
	id *string
	name *string
	parentId *string
	storesIds *string
	avail *bool
	sortOrder *int32
	modifiedTime *string
	description *string
	shortDescription *string
	metaTitle *string
	metaDescription *string
	metaKeywords *string
	seoUrl *string
	langId *string
	storeId *string
}

// Defines category update specified by category id
func (r ApiCategoryUpdateRequest) Id(id string) ApiCategoryUpdateRequest {
	r.id = &id
	return r
}

// Defines new category’s name
func (r ApiCategoryUpdateRequest) Name(name string) ApiCategoryUpdateRequest {
	r.name = &name
	return r
}

// Defines new parent category id
func (r ApiCategoryUpdateRequest) ParentId(parentId string) ApiCategoryUpdateRequest {
	r.parentId = &parentId
	return r
}

// Update category in the stores that is specified by comma-separated stores&#39; id
func (r ApiCategoryUpdateRequest) StoresIds(storesIds string) ApiCategoryUpdateRequest {
	r.storesIds = &storesIds
	return r
}

// Defines category&#39;s visibility status
func (r ApiCategoryUpdateRequest) Avail(avail bool) ApiCategoryUpdateRequest {
	r.avail = &avail
	return r
}

// Sort number in the list
func (r ApiCategoryUpdateRequest) SortOrder(sortOrder int32) ApiCategoryUpdateRequest {
	r.sortOrder = &sortOrder
	return r
}

// Entity&#39;s date modification
func (r ApiCategoryUpdateRequest) ModifiedTime(modifiedTime string) ApiCategoryUpdateRequest {
	r.modifiedTime = &modifiedTime
	return r
}

// Defines new category&#39;s description
func (r ApiCategoryUpdateRequest) Description(description string) ApiCategoryUpdateRequest {
	r.description = &description
	return r
}

// Defines short description
func (r ApiCategoryUpdateRequest) ShortDescription(shortDescription string) ApiCategoryUpdateRequest {
	r.shortDescription = &shortDescription
	return r
}

// Defines unique meta title for each entity
func (r ApiCategoryUpdateRequest) MetaTitle(metaTitle string) ApiCategoryUpdateRequest {
	r.metaTitle = &metaTitle
	return r
}

// Defines unique meta description of a entity
func (r ApiCategoryUpdateRequest) MetaDescription(metaDescription string) ApiCategoryUpdateRequest {
	r.metaDescription = &metaDescription
	return r
}

// Defines unique meta keywords for each entity
func (r ApiCategoryUpdateRequest) MetaKeywords(metaKeywords string) ApiCategoryUpdateRequest {
	r.metaKeywords = &metaKeywords
	return r
}

// Defines unique category&#39;s URL for SEO
func (r ApiCategoryUpdateRequest) SeoUrl(seoUrl string) ApiCategoryUpdateRequest {
	r.seoUrl = &seoUrl
	return r
}

// Language id
func (r ApiCategoryUpdateRequest) LangId(langId string) ApiCategoryUpdateRequest {
	r.langId = &langId
	return r
}

// Store Id
func (r ApiCategoryUpdateRequest) StoreId(storeId string) ApiCategoryUpdateRequest {
	r.storeId = &storeId
	return r
}

func (r ApiCategoryUpdateRequest) Execute() (*AccountConfigUpdate200Response, *http.Response, error) {
	return r.ApiService.CategoryUpdateExecute(r)
}

/*
CategoryUpdate category.update

Update category in store

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryUpdateRequest
*/
func (a *CategoryAPIService) CategoryUpdate(ctx context.Context) ApiCategoryUpdateRequest {
	return ApiCategoryUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountConfigUpdate200Response
func (a *CategoryAPIService) CategoryUpdateExecute(r ApiCategoryUpdateRequest) (*AccountConfigUpdate200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountConfigUpdate200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryAPIService.CategoryUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/category.update.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", r.parentId, "form", "")
	}
	if r.storesIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stores_ids", r.storesIds, "form", "")
	}
	if r.avail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "avail", r.avail, "form", "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_order", r.sortOrder, "form", "")
	}
	if r.modifiedTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_time", r.modifiedTime, "form", "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "form", "")
	}
	if r.shortDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "short_description", r.shortDescription, "form", "")
	}
	if r.metaTitle != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "meta_title", r.metaTitle, "form", "")
	}
	if r.metaDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "meta_description", r.metaDescription, "form", "")
	}
	if r.metaKeywords != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "meta_keywords", r.metaKeywords, "form", "")
	}
	if r.seoUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "seo_url", r.seoUrl, "form", "")
	}
	if r.langId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lang_id", r.langId, "form", "")
	}
	if r.storeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "store_id", r.storeId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["StoreKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-store-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
