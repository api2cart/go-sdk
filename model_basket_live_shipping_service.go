/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BasketLiveShippingService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BasketLiveShippingService{}

// BasketLiveShippingService struct for BasketLiveShippingService
type BasketLiveShippingService struct {
	Id *string `json:"id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Callback *string `json:"callback,omitempty"`
	CallbackErrCnt NullableInt32 `json:"callback_err_cnt,omitempty"`
	EnabledOnStore NullableBool `json:"enabled_on_store,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewBasketLiveShippingService instantiates a new BasketLiveShippingService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasketLiveShippingService() *BasketLiveShippingService {
	this := BasketLiveShippingService{}
	return &this
}

// NewBasketLiveShippingServiceWithDefaults instantiates a new BasketLiveShippingService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasketLiveShippingServiceWithDefaults() *BasketLiveShippingService {
	this := BasketLiveShippingService{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BasketLiveShippingService) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasketLiveShippingService) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BasketLiveShippingService) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BasketLiveShippingService) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasketLiveShippingService) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasketLiveShippingService) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *BasketLiveShippingService) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *BasketLiveShippingService) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *BasketLiveShippingService) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *BasketLiveShippingService) UnsetName() {
	o.Name.Unset()
}

// GetCallback returns the Callback field value if set, zero value otherwise.
func (o *BasketLiveShippingService) GetCallback() string {
	if o == nil || IsNil(o.Callback) {
		var ret string
		return ret
	}
	return *o.Callback
}

// GetCallbackOk returns a tuple with the Callback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasketLiveShippingService) GetCallbackOk() (*string, bool) {
	if o == nil || IsNil(o.Callback) {
		return nil, false
	}
	return o.Callback, true
}

// HasCallback returns a boolean if a field has been set.
func (o *BasketLiveShippingService) HasCallback() bool {
	if o != nil && !IsNil(o.Callback) {
		return true
	}

	return false
}

// SetCallback gets a reference to the given string and assigns it to the Callback field.
func (o *BasketLiveShippingService) SetCallback(v string) {
	o.Callback = &v
}

// GetCallbackErrCnt returns the CallbackErrCnt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasketLiveShippingService) GetCallbackErrCnt() int32 {
	if o == nil || IsNil(o.CallbackErrCnt.Get()) {
		var ret int32
		return ret
	}
	return *o.CallbackErrCnt.Get()
}

// GetCallbackErrCntOk returns a tuple with the CallbackErrCnt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasketLiveShippingService) GetCallbackErrCntOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CallbackErrCnt.Get(), o.CallbackErrCnt.IsSet()
}

// HasCallbackErrCnt returns a boolean if a field has been set.
func (o *BasketLiveShippingService) HasCallbackErrCnt() bool {
	if o != nil && o.CallbackErrCnt.IsSet() {
		return true
	}

	return false
}

// SetCallbackErrCnt gets a reference to the given NullableInt32 and assigns it to the CallbackErrCnt field.
func (o *BasketLiveShippingService) SetCallbackErrCnt(v int32) {
	o.CallbackErrCnt.Set(&v)
}
// SetCallbackErrCntNil sets the value for CallbackErrCnt to be an explicit nil
func (o *BasketLiveShippingService) SetCallbackErrCntNil() {
	o.CallbackErrCnt.Set(nil)
}

// UnsetCallbackErrCnt ensures that no value is present for CallbackErrCnt, not even an explicit nil
func (o *BasketLiveShippingService) UnsetCallbackErrCnt() {
	o.CallbackErrCnt.Unset()
}

// GetEnabledOnStore returns the EnabledOnStore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasketLiveShippingService) GetEnabledOnStore() bool {
	if o == nil || IsNil(o.EnabledOnStore.Get()) {
		var ret bool
		return ret
	}
	return *o.EnabledOnStore.Get()
}

// GetEnabledOnStoreOk returns a tuple with the EnabledOnStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasketLiveShippingService) GetEnabledOnStoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnabledOnStore.Get(), o.EnabledOnStore.IsSet()
}

// HasEnabledOnStore returns a boolean if a field has been set.
func (o *BasketLiveShippingService) HasEnabledOnStore() bool {
	if o != nil && o.EnabledOnStore.IsSet() {
		return true
	}

	return false
}

// SetEnabledOnStore gets a reference to the given NullableBool and assigns it to the EnabledOnStore field.
func (o *BasketLiveShippingService) SetEnabledOnStore(v bool) {
	o.EnabledOnStore.Set(&v)
}
// SetEnabledOnStoreNil sets the value for EnabledOnStore to be an explicit nil
func (o *BasketLiveShippingService) SetEnabledOnStoreNil() {
	o.EnabledOnStore.Set(nil)
}

// UnsetEnabledOnStore ensures that no value is present for EnabledOnStore, not even an explicit nil
func (o *BasketLiveShippingService) UnsetEnabledOnStore() {
	o.EnabledOnStore.Unset()
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasketLiveShippingService) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasketLiveShippingService) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *BasketLiveShippingService) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *BasketLiveShippingService) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasketLiveShippingService) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasketLiveShippingService) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *BasketLiveShippingService) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *BasketLiveShippingService) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o BasketLiveShippingService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BasketLiveShippingService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.Callback) {
		toSerialize["callback"] = o.Callback
	}
	if o.CallbackErrCnt.IsSet() {
		toSerialize["callback_err_cnt"] = o.CallbackErrCnt.Get()
	}
	if o.EnabledOnStore.IsSet() {
		toSerialize["enabled_on_store"] = o.EnabledOnStore.Get()
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableBasketLiveShippingService struct {
	value *BasketLiveShippingService
	isSet bool
}

func (v NullableBasketLiveShippingService) Get() *BasketLiveShippingService {
	return v.value
}

func (v *NullableBasketLiveShippingService) Set(val *BasketLiveShippingService) {
	v.value = val
	v.isSet = true
}

func (v NullableBasketLiveShippingService) IsSet() bool {
	return v.isSet
}

func (v *NullableBasketLiveShippingService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasketLiveShippingService(val *BasketLiveShippingService) *NullableBasketLiveShippingService {
	return &NullableBasketLiveShippingService{value: val, isSet: true}
}

func (v NullableBasketLiveShippingService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasketLiveShippingService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


