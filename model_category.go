/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Category type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Category{}

// Category struct for Category
type Category struct {
	Id *string `json:"id,omitempty"`
	ParentId NullableString `json:"parent_id,omitempty"`
	CreatedAt NullableA2CDateTime `json:"created_at,omitempty"`
	ModifiedAt NullableA2CDateTime `json:"modified_at,omitempty"`
	Name *string `json:"name,omitempty"`
	ShortDescription NullableString `json:"short_description,omitempty"`
	Description NullableString `json:"description,omitempty"`
	StoresIds []string `json:"stores_ids,omitempty"`
	Keywords NullableString `json:"keywords,omitempty"`
	MetaDescription NullableString `json:"meta_description,omitempty"`
	MetaTitle NullableString `json:"meta_title,omitempty"`
	Avail *bool `json:"avail,omitempty"`
	Path NullableString `json:"path,omitempty"`
	SeoUrl NullableString `json:"seo_url,omitempty"`
	SortOrder NullableInt32 `json:"sort_order,omitempty"`
	Images []Image `json:"images,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewCategory instantiates a new Category object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategory() *Category {
	this := Category{}
	return &this
}

// NewCategoryWithDefaults instantiates a new Category object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryWithDefaults() *Category {
	this := Category{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Category) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Category) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Category) SetId(v string) {
	o.Id = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Category) GetParentId() string {
	if o == nil || IsNil(o.ParentId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Category) GetParentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *Category) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableString and assigns it to the ParentId field.
func (o *Category) SetParentId(v string) {
	o.ParentId.Set(&v)
}
// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *Category) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *Category) UnsetParentId() {
	o.ParentId.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Category) GetCreatedAt() A2CDateTime {
	if o == nil || IsNil(o.CreatedAt.Get()) {
		var ret A2CDateTime
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Category) GetCreatedAtOk() (*A2CDateTime, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Category) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given NullableA2CDateTime and assigns it to the CreatedAt field.
func (o *Category) SetCreatedAt(v A2CDateTime) {
	o.CreatedAt.Set(&v)
}
// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *Category) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *Category) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Category) GetModifiedAt() A2CDateTime {
	if o == nil || IsNil(o.ModifiedAt.Get()) {
		var ret A2CDateTime
		return ret
	}
	return *o.ModifiedAt.Get()
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Category) GetModifiedAtOk() (*A2CDateTime, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedAt.Get(), o.ModifiedAt.IsSet()
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *Category) HasModifiedAt() bool {
	if o != nil && o.ModifiedAt.IsSet() {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given NullableA2CDateTime and assigns it to the ModifiedAt field.
func (o *Category) SetModifiedAt(v A2CDateTime) {
	o.ModifiedAt.Set(&v)
}
// SetModifiedAtNil sets the value for ModifiedAt to be an explicit nil
func (o *Category) SetModifiedAtNil() {
	o.ModifiedAt.Set(nil)
}

// UnsetModifiedAt ensures that no value is present for ModifiedAt, not even an explicit nil
func (o *Category) UnsetModifiedAt() {
	o.ModifiedAt.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Category) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Category) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Category) SetName(v string) {
	o.Name = &v
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Category) GetShortDescription() string {
	if o == nil || IsNil(o.ShortDescription.Get()) {
		var ret string
		return ret
	}
	return *o.ShortDescription.Get()
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Category) GetShortDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShortDescription.Get(), o.ShortDescription.IsSet()
}

// HasShortDescription returns a boolean if a field has been set.
func (o *Category) HasShortDescription() bool {
	if o != nil && o.ShortDescription.IsSet() {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given NullableString and assigns it to the ShortDescription field.
func (o *Category) SetShortDescription(v string) {
	o.ShortDescription.Set(&v)
}
// SetShortDescriptionNil sets the value for ShortDescription to be an explicit nil
func (o *Category) SetShortDescriptionNil() {
	o.ShortDescription.Set(nil)
}

// UnsetShortDescription ensures that no value is present for ShortDescription, not even an explicit nil
func (o *Category) UnsetShortDescription() {
	o.ShortDescription.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Category) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Category) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Category) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Category) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Category) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Category) UnsetDescription() {
	o.Description.Unset()
}

// GetStoresIds returns the StoresIds field value if set, zero value otherwise.
func (o *Category) GetStoresIds() []string {
	if o == nil || IsNil(o.StoresIds) {
		var ret []string
		return ret
	}
	return o.StoresIds
}

// GetStoresIdsOk returns a tuple with the StoresIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetStoresIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.StoresIds) {
		return nil, false
	}
	return o.StoresIds, true
}

// HasStoresIds returns a boolean if a field has been set.
func (o *Category) HasStoresIds() bool {
	if o != nil && !IsNil(o.StoresIds) {
		return true
	}

	return false
}

// SetStoresIds gets a reference to the given []string and assigns it to the StoresIds field.
func (o *Category) SetStoresIds(v []string) {
	o.StoresIds = v
}

// GetKeywords returns the Keywords field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Category) GetKeywords() string {
	if o == nil || IsNil(o.Keywords.Get()) {
		var ret string
		return ret
	}
	return *o.Keywords.Get()
}

// GetKeywordsOk returns a tuple with the Keywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Category) GetKeywordsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Keywords.Get(), o.Keywords.IsSet()
}

// HasKeywords returns a boolean if a field has been set.
func (o *Category) HasKeywords() bool {
	if o != nil && o.Keywords.IsSet() {
		return true
	}

	return false
}

// SetKeywords gets a reference to the given NullableString and assigns it to the Keywords field.
func (o *Category) SetKeywords(v string) {
	o.Keywords.Set(&v)
}
// SetKeywordsNil sets the value for Keywords to be an explicit nil
func (o *Category) SetKeywordsNil() {
	o.Keywords.Set(nil)
}

// UnsetKeywords ensures that no value is present for Keywords, not even an explicit nil
func (o *Category) UnsetKeywords() {
	o.Keywords.Unset()
}

// GetMetaDescription returns the MetaDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Category) GetMetaDescription() string {
	if o == nil || IsNil(o.MetaDescription.Get()) {
		var ret string
		return ret
	}
	return *o.MetaDescription.Get()
}

// GetMetaDescriptionOk returns a tuple with the MetaDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Category) GetMetaDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetaDescription.Get(), o.MetaDescription.IsSet()
}

// HasMetaDescription returns a boolean if a field has been set.
func (o *Category) HasMetaDescription() bool {
	if o != nil && o.MetaDescription.IsSet() {
		return true
	}

	return false
}

// SetMetaDescription gets a reference to the given NullableString and assigns it to the MetaDescription field.
func (o *Category) SetMetaDescription(v string) {
	o.MetaDescription.Set(&v)
}
// SetMetaDescriptionNil sets the value for MetaDescription to be an explicit nil
func (o *Category) SetMetaDescriptionNil() {
	o.MetaDescription.Set(nil)
}

// UnsetMetaDescription ensures that no value is present for MetaDescription, not even an explicit nil
func (o *Category) UnsetMetaDescription() {
	o.MetaDescription.Unset()
}

// GetMetaTitle returns the MetaTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Category) GetMetaTitle() string {
	if o == nil || IsNil(o.MetaTitle.Get()) {
		var ret string
		return ret
	}
	return *o.MetaTitle.Get()
}

// GetMetaTitleOk returns a tuple with the MetaTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Category) GetMetaTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetaTitle.Get(), o.MetaTitle.IsSet()
}

// HasMetaTitle returns a boolean if a field has been set.
func (o *Category) HasMetaTitle() bool {
	if o != nil && o.MetaTitle.IsSet() {
		return true
	}

	return false
}

// SetMetaTitle gets a reference to the given NullableString and assigns it to the MetaTitle field.
func (o *Category) SetMetaTitle(v string) {
	o.MetaTitle.Set(&v)
}
// SetMetaTitleNil sets the value for MetaTitle to be an explicit nil
func (o *Category) SetMetaTitleNil() {
	o.MetaTitle.Set(nil)
}

// UnsetMetaTitle ensures that no value is present for MetaTitle, not even an explicit nil
func (o *Category) UnsetMetaTitle() {
	o.MetaTitle.Unset()
}

// GetAvail returns the Avail field value if set, zero value otherwise.
func (o *Category) GetAvail() bool {
	if o == nil || IsNil(o.Avail) {
		var ret bool
		return ret
	}
	return *o.Avail
}

// GetAvailOk returns a tuple with the Avail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetAvailOk() (*bool, bool) {
	if o == nil || IsNil(o.Avail) {
		return nil, false
	}
	return o.Avail, true
}

// HasAvail returns a boolean if a field has been set.
func (o *Category) HasAvail() bool {
	if o != nil && !IsNil(o.Avail) {
		return true
	}

	return false
}

// SetAvail gets a reference to the given bool and assigns it to the Avail field.
func (o *Category) SetAvail(v bool) {
	o.Avail = &v
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Category) GetPath() string {
	if o == nil || IsNil(o.Path.Get()) {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Category) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *Category) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *Category) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *Category) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *Category) UnsetPath() {
	o.Path.Unset()
}

// GetSeoUrl returns the SeoUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Category) GetSeoUrl() string {
	if o == nil || IsNil(o.SeoUrl.Get()) {
		var ret string
		return ret
	}
	return *o.SeoUrl.Get()
}

// GetSeoUrlOk returns a tuple with the SeoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Category) GetSeoUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SeoUrl.Get(), o.SeoUrl.IsSet()
}

// HasSeoUrl returns a boolean if a field has been set.
func (o *Category) HasSeoUrl() bool {
	if o != nil && o.SeoUrl.IsSet() {
		return true
	}

	return false
}

// SetSeoUrl gets a reference to the given NullableString and assigns it to the SeoUrl field.
func (o *Category) SetSeoUrl(v string) {
	o.SeoUrl.Set(&v)
}
// SetSeoUrlNil sets the value for SeoUrl to be an explicit nil
func (o *Category) SetSeoUrlNil() {
	o.SeoUrl.Set(nil)
}

// UnsetSeoUrl ensures that no value is present for SeoUrl, not even an explicit nil
func (o *Category) UnsetSeoUrl() {
	o.SeoUrl.Unset()
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Category) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder.Get()) {
		var ret int32
		return ret
	}
	return *o.SortOrder.Get()
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Category) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SortOrder.Get(), o.SortOrder.IsSet()
}

// HasSortOrder returns a boolean if a field has been set.
func (o *Category) HasSortOrder() bool {
	if o != nil && o.SortOrder.IsSet() {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given NullableInt32 and assigns it to the SortOrder field.
func (o *Category) SetSortOrder(v int32) {
	o.SortOrder.Set(&v)
}
// SetSortOrderNil sets the value for SortOrder to be an explicit nil
func (o *Category) SetSortOrderNil() {
	o.SortOrder.Set(nil)
}

// UnsetSortOrder ensures that no value is present for SortOrder, not even an explicit nil
func (o *Category) UnsetSortOrder() {
	o.SortOrder.Unset()
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *Category) GetImages() []Image {
	if o == nil || IsNil(o.Images) {
		var ret []Image
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetImagesOk() ([]Image, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *Category) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []Image and assigns it to the Images field.
func (o *Category) SetImages(v []Image) {
	o.Images = v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Category) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Category) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *Category) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *Category) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Category) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Category) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Category) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *Category) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o Category) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Category) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.ParentId.IsSet() {
		toSerialize["parent_id"] = o.ParentId.Get()
	}
	if o.CreatedAt.IsSet() {
		toSerialize["created_at"] = o.CreatedAt.Get()
	}
	if o.ModifiedAt.IsSet() {
		toSerialize["modified_at"] = o.ModifiedAt.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.ShortDescription.IsSet() {
		toSerialize["short_description"] = o.ShortDescription.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.StoresIds) {
		toSerialize["stores_ids"] = o.StoresIds
	}
	if o.Keywords.IsSet() {
		toSerialize["keywords"] = o.Keywords.Get()
	}
	if o.MetaDescription.IsSet() {
		toSerialize["meta_description"] = o.MetaDescription.Get()
	}
	if o.MetaTitle.IsSet() {
		toSerialize["meta_title"] = o.MetaTitle.Get()
	}
	if !IsNil(o.Avail) {
		toSerialize["avail"] = o.Avail
	}
	if o.Path.IsSet() {
		toSerialize["path"] = o.Path.Get()
	}
	if o.SeoUrl.IsSet() {
		toSerialize["seo_url"] = o.SeoUrl.Get()
	}
	if o.SortOrder.IsSet() {
		toSerialize["sort_order"] = o.SortOrder.Get()
	}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableCategory struct {
	value *Category
	isSet bool
}

func (v NullableCategory) Get() *Category {
	return v.value
}

func (v *NullableCategory) Set(val *Category) {
	v.value = val
	v.isSet = true
}

func (v NullableCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategory(val *Category) *NullableCategory {
	return &NullableCategory{value: val, isSet: true}
}

func (v NullableCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


