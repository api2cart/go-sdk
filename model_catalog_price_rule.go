/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CatalogPriceRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogPriceRule{}

// CatalogPriceRule struct for CatalogPriceRule
type CatalogPriceRule struct {
	Id *string `json:"id,omitempty"`
	Gid NullableString `json:"gid,omitempty"`
	Type NullableString `json:"type,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	ShortDescription NullableString `json:"short_description,omitempty"`
	Avail NullableBool `json:"avail,omitempty"`
	Actions []CatalogPriceRuleAction `json:"actions,omitempty"`
	CreatedTime NullableA2CDateTime `json:"created_time,omitempty"`
	DateStart NullableA2CDateTime `json:"date_start,omitempty"`
	DateEnd NullableA2CDateTime `json:"date_end,omitempty"`
	UsageCount NullableFloat32 `json:"usage_count,omitempty"`
	Conditions []CouponCondition `json:"conditions,omitempty"`
	UsesPerOrderLimit NullableInt32 `json:"uses_per_order_limit,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewCatalogPriceRule instantiates a new CatalogPriceRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogPriceRule() *CatalogPriceRule {
	this := CatalogPriceRule{}
	return &this
}

// NewCatalogPriceRuleWithDefaults instantiates a new CatalogPriceRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogPriceRuleWithDefaults() *CatalogPriceRule {
	this := CatalogPriceRule{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CatalogPriceRule) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogPriceRule) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CatalogPriceRule) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CatalogPriceRule) SetId(v string) {
	o.Id = &v
}

// GetGid returns the Gid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPriceRule) GetGid() string {
	if o == nil || IsNil(o.Gid.Get()) {
		var ret string
		return ret
	}
	return *o.Gid.Get()
}

// GetGidOk returns a tuple with the Gid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPriceRule) GetGidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gid.Get(), o.Gid.IsSet()
}

// HasGid returns a boolean if a field has been set.
func (o *CatalogPriceRule) HasGid() bool {
	if o != nil && o.Gid.IsSet() {
		return true
	}

	return false
}

// SetGid gets a reference to the given NullableString and assigns it to the Gid field.
func (o *CatalogPriceRule) SetGid(v string) {
	o.Gid.Set(&v)
}
// SetGidNil sets the value for Gid to be an explicit nil
func (o *CatalogPriceRule) SetGidNil() {
	o.Gid.Set(nil)
}

// UnsetGid ensures that no value is present for Gid, not even an explicit nil
func (o *CatalogPriceRule) UnsetGid() {
	o.Gid.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPriceRule) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPriceRule) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *CatalogPriceRule) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *CatalogPriceRule) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *CatalogPriceRule) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *CatalogPriceRule) UnsetType() {
	o.Type.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPriceRule) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPriceRule) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CatalogPriceRule) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CatalogPriceRule) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CatalogPriceRule) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CatalogPriceRule) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPriceRule) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPriceRule) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CatalogPriceRule) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CatalogPriceRule) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CatalogPriceRule) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CatalogPriceRule) UnsetDescription() {
	o.Description.Unset()
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPriceRule) GetShortDescription() string {
	if o == nil || IsNil(o.ShortDescription.Get()) {
		var ret string
		return ret
	}
	return *o.ShortDescription.Get()
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPriceRule) GetShortDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShortDescription.Get(), o.ShortDescription.IsSet()
}

// HasShortDescription returns a boolean if a field has been set.
func (o *CatalogPriceRule) HasShortDescription() bool {
	if o != nil && o.ShortDescription.IsSet() {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given NullableString and assigns it to the ShortDescription field.
func (o *CatalogPriceRule) SetShortDescription(v string) {
	o.ShortDescription.Set(&v)
}
// SetShortDescriptionNil sets the value for ShortDescription to be an explicit nil
func (o *CatalogPriceRule) SetShortDescriptionNil() {
	o.ShortDescription.Set(nil)
}

// UnsetShortDescription ensures that no value is present for ShortDescription, not even an explicit nil
func (o *CatalogPriceRule) UnsetShortDescription() {
	o.ShortDescription.Unset()
}

// GetAvail returns the Avail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPriceRule) GetAvail() bool {
	if o == nil || IsNil(o.Avail.Get()) {
		var ret bool
		return ret
	}
	return *o.Avail.Get()
}

// GetAvailOk returns a tuple with the Avail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPriceRule) GetAvailOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avail.Get(), o.Avail.IsSet()
}

// HasAvail returns a boolean if a field has been set.
func (o *CatalogPriceRule) HasAvail() bool {
	if o != nil && o.Avail.IsSet() {
		return true
	}

	return false
}

// SetAvail gets a reference to the given NullableBool and assigns it to the Avail field.
func (o *CatalogPriceRule) SetAvail(v bool) {
	o.Avail.Set(&v)
}
// SetAvailNil sets the value for Avail to be an explicit nil
func (o *CatalogPriceRule) SetAvailNil() {
	o.Avail.Set(nil)
}

// UnsetAvail ensures that no value is present for Avail, not even an explicit nil
func (o *CatalogPriceRule) UnsetAvail() {
	o.Avail.Unset()
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *CatalogPriceRule) GetActions() []CatalogPriceRuleAction {
	if o == nil || IsNil(o.Actions) {
		var ret []CatalogPriceRuleAction
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogPriceRule) GetActionsOk() ([]CatalogPriceRuleAction, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *CatalogPriceRule) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []CatalogPriceRuleAction and assigns it to the Actions field.
func (o *CatalogPriceRule) SetActions(v []CatalogPriceRuleAction) {
	o.Actions = v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPriceRule) GetCreatedTime() A2CDateTime {
	if o == nil || IsNil(o.CreatedTime.Get()) {
		var ret A2CDateTime
		return ret
	}
	return *o.CreatedTime.Get()
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPriceRule) GetCreatedTimeOk() (*A2CDateTime, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedTime.Get(), o.CreatedTime.IsSet()
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *CatalogPriceRule) HasCreatedTime() bool {
	if o != nil && o.CreatedTime.IsSet() {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given NullableA2CDateTime and assigns it to the CreatedTime field.
func (o *CatalogPriceRule) SetCreatedTime(v A2CDateTime) {
	o.CreatedTime.Set(&v)
}
// SetCreatedTimeNil sets the value for CreatedTime to be an explicit nil
func (o *CatalogPriceRule) SetCreatedTimeNil() {
	o.CreatedTime.Set(nil)
}

// UnsetCreatedTime ensures that no value is present for CreatedTime, not even an explicit nil
func (o *CatalogPriceRule) UnsetCreatedTime() {
	o.CreatedTime.Unset()
}

// GetDateStart returns the DateStart field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPriceRule) GetDateStart() A2CDateTime {
	if o == nil || IsNil(o.DateStart.Get()) {
		var ret A2CDateTime
		return ret
	}
	return *o.DateStart.Get()
}

// GetDateStartOk returns a tuple with the DateStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPriceRule) GetDateStartOk() (*A2CDateTime, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateStart.Get(), o.DateStart.IsSet()
}

// HasDateStart returns a boolean if a field has been set.
func (o *CatalogPriceRule) HasDateStart() bool {
	if o != nil && o.DateStart.IsSet() {
		return true
	}

	return false
}

// SetDateStart gets a reference to the given NullableA2CDateTime and assigns it to the DateStart field.
func (o *CatalogPriceRule) SetDateStart(v A2CDateTime) {
	o.DateStart.Set(&v)
}
// SetDateStartNil sets the value for DateStart to be an explicit nil
func (o *CatalogPriceRule) SetDateStartNil() {
	o.DateStart.Set(nil)
}

// UnsetDateStart ensures that no value is present for DateStart, not even an explicit nil
func (o *CatalogPriceRule) UnsetDateStart() {
	o.DateStart.Unset()
}

// GetDateEnd returns the DateEnd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPriceRule) GetDateEnd() A2CDateTime {
	if o == nil || IsNil(o.DateEnd.Get()) {
		var ret A2CDateTime
		return ret
	}
	return *o.DateEnd.Get()
}

// GetDateEndOk returns a tuple with the DateEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPriceRule) GetDateEndOk() (*A2CDateTime, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateEnd.Get(), o.DateEnd.IsSet()
}

// HasDateEnd returns a boolean if a field has been set.
func (o *CatalogPriceRule) HasDateEnd() bool {
	if o != nil && o.DateEnd.IsSet() {
		return true
	}

	return false
}

// SetDateEnd gets a reference to the given NullableA2CDateTime and assigns it to the DateEnd field.
func (o *CatalogPriceRule) SetDateEnd(v A2CDateTime) {
	o.DateEnd.Set(&v)
}
// SetDateEndNil sets the value for DateEnd to be an explicit nil
func (o *CatalogPriceRule) SetDateEndNil() {
	o.DateEnd.Set(nil)
}

// UnsetDateEnd ensures that no value is present for DateEnd, not even an explicit nil
func (o *CatalogPriceRule) UnsetDateEnd() {
	o.DateEnd.Unset()
}

// GetUsageCount returns the UsageCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPriceRule) GetUsageCount() float32 {
	if o == nil || IsNil(o.UsageCount.Get()) {
		var ret float32
		return ret
	}
	return *o.UsageCount.Get()
}

// GetUsageCountOk returns a tuple with the UsageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPriceRule) GetUsageCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsageCount.Get(), o.UsageCount.IsSet()
}

// HasUsageCount returns a boolean if a field has been set.
func (o *CatalogPriceRule) HasUsageCount() bool {
	if o != nil && o.UsageCount.IsSet() {
		return true
	}

	return false
}

// SetUsageCount gets a reference to the given NullableFloat32 and assigns it to the UsageCount field.
func (o *CatalogPriceRule) SetUsageCount(v float32) {
	o.UsageCount.Set(&v)
}
// SetUsageCountNil sets the value for UsageCount to be an explicit nil
func (o *CatalogPriceRule) SetUsageCountNil() {
	o.UsageCount.Set(nil)
}

// UnsetUsageCount ensures that no value is present for UsageCount, not even an explicit nil
func (o *CatalogPriceRule) UnsetUsageCount() {
	o.UsageCount.Unset()
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *CatalogPriceRule) GetConditions() []CouponCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []CouponCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogPriceRule) GetConditionsOk() ([]CouponCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *CatalogPriceRule) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []CouponCondition and assigns it to the Conditions field.
func (o *CatalogPriceRule) SetConditions(v []CouponCondition) {
	o.Conditions = v
}

// GetUsesPerOrderLimit returns the UsesPerOrderLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPriceRule) GetUsesPerOrderLimit() int32 {
	if o == nil || IsNil(o.UsesPerOrderLimit.Get()) {
		var ret int32
		return ret
	}
	return *o.UsesPerOrderLimit.Get()
}

// GetUsesPerOrderLimitOk returns a tuple with the UsesPerOrderLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPriceRule) GetUsesPerOrderLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsesPerOrderLimit.Get(), o.UsesPerOrderLimit.IsSet()
}

// HasUsesPerOrderLimit returns a boolean if a field has been set.
func (o *CatalogPriceRule) HasUsesPerOrderLimit() bool {
	if o != nil && o.UsesPerOrderLimit.IsSet() {
		return true
	}

	return false
}

// SetUsesPerOrderLimit gets a reference to the given NullableInt32 and assigns it to the UsesPerOrderLimit field.
func (o *CatalogPriceRule) SetUsesPerOrderLimit(v int32) {
	o.UsesPerOrderLimit.Set(&v)
}
// SetUsesPerOrderLimitNil sets the value for UsesPerOrderLimit to be an explicit nil
func (o *CatalogPriceRule) SetUsesPerOrderLimitNil() {
	o.UsesPerOrderLimit.Set(nil)
}

// UnsetUsesPerOrderLimit ensures that no value is present for UsesPerOrderLimit, not even an explicit nil
func (o *CatalogPriceRule) UnsetUsesPerOrderLimit() {
	o.UsesPerOrderLimit.Unset()
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPriceRule) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPriceRule) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *CatalogPriceRule) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *CatalogPriceRule) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPriceRule) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPriceRule) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *CatalogPriceRule) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *CatalogPriceRule) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o CatalogPriceRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogPriceRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Gid.IsSet() {
		toSerialize["gid"] = o.Gid.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.ShortDescription.IsSet() {
		toSerialize["short_description"] = o.ShortDescription.Get()
	}
	if o.Avail.IsSet() {
		toSerialize["avail"] = o.Avail.Get()
	}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	if o.CreatedTime.IsSet() {
		toSerialize["created_time"] = o.CreatedTime.Get()
	}
	if o.DateStart.IsSet() {
		toSerialize["date_start"] = o.DateStart.Get()
	}
	if o.DateEnd.IsSet() {
		toSerialize["date_end"] = o.DateEnd.Get()
	}
	if o.UsageCount.IsSet() {
		toSerialize["usage_count"] = o.UsageCount.Get()
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if o.UsesPerOrderLimit.IsSet() {
		toSerialize["uses_per_order_limit"] = o.UsesPerOrderLimit.Get()
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableCatalogPriceRule struct {
	value *CatalogPriceRule
	isSet bool
}

func (v NullableCatalogPriceRule) Get() *CatalogPriceRule {
	return v.value
}

func (v *NullableCatalogPriceRule) Set(val *CatalogPriceRule) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogPriceRule) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogPriceRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogPriceRule(val *CatalogPriceRule) *NullableCatalogPriceRule {
	return &NullableCatalogPriceRule{value: val, isSet: true}
}

func (v NullableCatalogPriceRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogPriceRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


