/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProductAddSpecificsInnerFoodDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductAddSpecificsInnerFoodDetails{}

// ProductAddSpecificsInnerFoodDetails struct for ProductAddSpecificsInnerFoodDetails
type ProductAddSpecificsInnerFoodDetails struct {
	Calories float32 `json:"calories"`
}

type _ProductAddSpecificsInnerFoodDetails ProductAddSpecificsInnerFoodDetails

// NewProductAddSpecificsInnerFoodDetails instantiates a new ProductAddSpecificsInnerFoodDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductAddSpecificsInnerFoodDetails(calories float32) *ProductAddSpecificsInnerFoodDetails {
	this := ProductAddSpecificsInnerFoodDetails{}
	this.Calories = calories
	return &this
}

// NewProductAddSpecificsInnerFoodDetailsWithDefaults instantiates a new ProductAddSpecificsInnerFoodDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductAddSpecificsInnerFoodDetailsWithDefaults() *ProductAddSpecificsInnerFoodDetails {
	this := ProductAddSpecificsInnerFoodDetails{}
	return &this
}

// GetCalories returns the Calories field value
func (o *ProductAddSpecificsInnerFoodDetails) GetCalories() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Calories
}

// GetCaloriesOk returns a tuple with the Calories field value
// and a boolean to check if the value has been set.
func (o *ProductAddSpecificsInnerFoodDetails) GetCaloriesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Calories, true
}

// SetCalories sets field value
func (o *ProductAddSpecificsInnerFoodDetails) SetCalories(v float32) {
	o.Calories = v
}

func (o ProductAddSpecificsInnerFoodDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductAddSpecificsInnerFoodDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["calories"] = o.Calories
	return toSerialize, nil
}

func (o *ProductAddSpecificsInnerFoodDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"calories",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductAddSpecificsInnerFoodDetails := _ProductAddSpecificsInnerFoodDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductAddSpecificsInnerFoodDetails)

	if err != nil {
		return err
	}

	*o = ProductAddSpecificsInnerFoodDetails(varProductAddSpecificsInnerFoodDetails)

	return err
}

type NullableProductAddSpecificsInnerFoodDetails struct {
	value *ProductAddSpecificsInnerFoodDetails
	isSet bool
}

func (v NullableProductAddSpecificsInnerFoodDetails) Get() *ProductAddSpecificsInnerFoodDetails {
	return v.value
}

func (v *NullableProductAddSpecificsInnerFoodDetails) Set(val *ProductAddSpecificsInnerFoodDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableProductAddSpecificsInnerFoodDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableProductAddSpecificsInnerFoodDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductAddSpecificsInnerFoodDetails(val *ProductAddSpecificsInnerFoodDetails) *NullableProductAddSpecificsInnerFoodDetails {
	return &NullableProductAddSpecificsInnerFoodDetails{value: val, isSet: true}
}

func (v NullableProductAddSpecificsInnerFoodDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductAddSpecificsInnerFoodDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


