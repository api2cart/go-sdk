/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CartShippingZone2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CartShippingZone2{}

// CartShippingZone2 struct for CartShippingZone2
type CartShippingZone2 struct {
	Id *string `json:"id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Enabled NullableBool `json:"enabled,omitempty"`
	Countries []Country `json:"countries,omitempty"`
	ShippingMethods []CartShippingMethod `json:"shipping_methods,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewCartShippingZone2 instantiates a new CartShippingZone2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCartShippingZone2() *CartShippingZone2 {
	this := CartShippingZone2{}
	return &this
}

// NewCartShippingZone2WithDefaults instantiates a new CartShippingZone2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCartShippingZone2WithDefaults() *CartShippingZone2 {
	this := CartShippingZone2{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CartShippingZone2) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartShippingZone2) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CartShippingZone2) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CartShippingZone2) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CartShippingZone2) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CartShippingZone2) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CartShippingZone2) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CartShippingZone2) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CartShippingZone2) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CartShippingZone2) UnsetName() {
	o.Name.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CartShippingZone2) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CartShippingZone2) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *CartShippingZone2) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *CartShippingZone2) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}
// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *CartShippingZone2) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *CartShippingZone2) UnsetEnabled() {
	o.Enabled.Unset()
}

// GetCountries returns the Countries field value if set, zero value otherwise.
func (o *CartShippingZone2) GetCountries() []Country {
	if o == nil || IsNil(o.Countries) {
		var ret []Country
		return ret
	}
	return o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartShippingZone2) GetCountriesOk() ([]Country, bool) {
	if o == nil || IsNil(o.Countries) {
		return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *CartShippingZone2) HasCountries() bool {
	if o != nil && !IsNil(o.Countries) {
		return true
	}

	return false
}

// SetCountries gets a reference to the given []Country and assigns it to the Countries field.
func (o *CartShippingZone2) SetCountries(v []Country) {
	o.Countries = v
}

// GetShippingMethods returns the ShippingMethods field value if set, zero value otherwise.
func (o *CartShippingZone2) GetShippingMethods() []CartShippingMethod {
	if o == nil || IsNil(o.ShippingMethods) {
		var ret []CartShippingMethod
		return ret
	}
	return o.ShippingMethods
}

// GetShippingMethodsOk returns a tuple with the ShippingMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartShippingZone2) GetShippingMethodsOk() ([]CartShippingMethod, bool) {
	if o == nil || IsNil(o.ShippingMethods) {
		return nil, false
	}
	return o.ShippingMethods, true
}

// HasShippingMethods returns a boolean if a field has been set.
func (o *CartShippingZone2) HasShippingMethods() bool {
	if o != nil && !IsNil(o.ShippingMethods) {
		return true
	}

	return false
}

// SetShippingMethods gets a reference to the given []CartShippingMethod and assigns it to the ShippingMethods field.
func (o *CartShippingZone2) SetShippingMethods(v []CartShippingMethod) {
	o.ShippingMethods = v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CartShippingZone2) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CartShippingZone2) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *CartShippingZone2) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *CartShippingZone2) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CartShippingZone2) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CartShippingZone2) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *CartShippingZone2) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *CartShippingZone2) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o CartShippingZone2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CartShippingZone2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Enabled.IsSet() {
		toSerialize["enabled"] = o.Enabled.Get()
	}
	if !IsNil(o.Countries) {
		toSerialize["countries"] = o.Countries
	}
	if !IsNil(o.ShippingMethods) {
		toSerialize["shipping_methods"] = o.ShippingMethods
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableCartShippingZone2 struct {
	value *CartShippingZone2
	isSet bool
}

func (v NullableCartShippingZone2) Get() *CartShippingZone2 {
	return v.value
}

func (v *NullableCartShippingZone2) Set(val *CartShippingZone2) {
	v.value = val
	v.isSet = true
}

func (v NullableCartShippingZone2) IsSet() bool {
	return v.isSet
}

func (v *NullableCartShippingZone2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCartShippingZone2(val *CartShippingZone2) *NullableCartShippingZone2 {
	return &NullableCartShippingZone2{value: val, isSet: true}
}

func (v NullableCartShippingZone2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCartShippingZone2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


