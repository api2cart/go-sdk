/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TaxClassZipCodes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxClassZipCodes{}

// TaxClassZipCodes struct for TaxClassZipCodes
type TaxClassZipCodes struct {
	IsRange *bool `json:"is_range,omitempty"`
	Range []string `json:"range,omitempty"`
	Fields []TaxClassZipCodesRange `json:"fields,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewTaxClassZipCodes instantiates a new TaxClassZipCodes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxClassZipCodes() *TaxClassZipCodes {
	this := TaxClassZipCodes{}
	return &this
}

// NewTaxClassZipCodesWithDefaults instantiates a new TaxClassZipCodes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxClassZipCodesWithDefaults() *TaxClassZipCodes {
	this := TaxClassZipCodes{}
	return &this
}

// GetIsRange returns the IsRange field value if set, zero value otherwise.
func (o *TaxClassZipCodes) GetIsRange() bool {
	if o == nil || IsNil(o.IsRange) {
		var ret bool
		return ret
	}
	return *o.IsRange
}

// GetIsRangeOk returns a tuple with the IsRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassZipCodes) GetIsRangeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRange) {
		return nil, false
	}
	return o.IsRange, true
}

// HasIsRange returns a boolean if a field has been set.
func (o *TaxClassZipCodes) HasIsRange() bool {
	if o != nil && !IsNil(o.IsRange) {
		return true
	}

	return false
}

// SetIsRange gets a reference to the given bool and assigns it to the IsRange field.
func (o *TaxClassZipCodes) SetIsRange(v bool) {
	o.IsRange = &v
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *TaxClassZipCodes) GetRange() []string {
	if o == nil || IsNil(o.Range) {
		var ret []string
		return ret
	}
	return o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassZipCodes) GetRangeOk() ([]string, bool) {
	if o == nil || IsNil(o.Range) {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *TaxClassZipCodes) HasRange() bool {
	if o != nil && !IsNil(o.Range) {
		return true
	}

	return false
}

// SetRange gets a reference to the given []string and assigns it to the Range field.
func (o *TaxClassZipCodes) SetRange(v []string) {
	o.Range = v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *TaxClassZipCodes) GetFields() []TaxClassZipCodesRange {
	if o == nil || IsNil(o.Fields) {
		var ret []TaxClassZipCodesRange
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassZipCodes) GetFieldsOk() ([]TaxClassZipCodesRange, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *TaxClassZipCodes) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given []TaxClassZipCodesRange and assigns it to the Fields field.
func (o *TaxClassZipCodes) SetFields(v []TaxClassZipCodesRange) {
	o.Fields = v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise.
func (o *TaxClassZipCodes) GetAdditionalFields() map[string]interface{} {
	if o == nil || IsNil(o.AdditionalFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassZipCodes) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *TaxClassZipCodes) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *TaxClassZipCodes) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *TaxClassZipCodes) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassZipCodes) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *TaxClassZipCodes) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *TaxClassZipCodes) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o TaxClassZipCodes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxClassZipCodes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsRange) {
		toSerialize["is_range"] = o.IsRange
	}
	if !IsNil(o.Range) {
		toSerialize["range"] = o.Range
	}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.AdditionalFields) {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableTaxClassZipCodes struct {
	value *TaxClassZipCodes
	isSet bool
}

func (v NullableTaxClassZipCodes) Get() *TaxClassZipCodes {
	return v.value
}

func (v *NullableTaxClassZipCodes) Set(val *TaxClassZipCodes) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxClassZipCodes) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxClassZipCodes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxClassZipCodes(val *TaxClassZipCodes) *NullableTaxClassZipCodes {
	return &NullableTaxClassZipCodes{value: val, isSet: true}
}

func (v NullableTaxClassZipCodes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxClassZipCodes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


