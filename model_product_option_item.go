/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProductOptionItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductOptionItem{}

// ProductOptionItem struct for ProductOptionItem
type ProductOptionItem struct {
	Id *string `json:"id,omitempty"`
	ProductOptionItemId NullableString `json:"product_option_item_id,omitempty"`
	Name *string `json:"name,omitempty"`
	SortOrder NullableInt32 `json:"sort_order,omitempty"`
	Price NullableString `json:"price,omitempty"`
	Weight NullableString `json:"weight,omitempty"`
	Quantity NullableInt32 `json:"quantity,omitempty"`
	TypePrice NullableString `json:"type_price,omitempty"`
	Sku NullableString `json:"sku,omitempty"`
	IsDefault NullableBool `json:"is_default,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewProductOptionItem instantiates a new ProductOptionItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductOptionItem() *ProductOptionItem {
	this := ProductOptionItem{}
	return &this
}

// NewProductOptionItemWithDefaults instantiates a new ProductOptionItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductOptionItemWithDefaults() *ProductOptionItem {
	this := ProductOptionItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProductOptionItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductOptionItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProductOptionItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProductOptionItem) SetId(v string) {
	o.Id = &v
}

// GetProductOptionItemId returns the ProductOptionItemId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductOptionItem) GetProductOptionItemId() string {
	if o == nil || IsNil(o.ProductOptionItemId.Get()) {
		var ret string
		return ret
	}
	return *o.ProductOptionItemId.Get()
}

// GetProductOptionItemIdOk returns a tuple with the ProductOptionItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductOptionItem) GetProductOptionItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductOptionItemId.Get(), o.ProductOptionItemId.IsSet()
}

// HasProductOptionItemId returns a boolean if a field has been set.
func (o *ProductOptionItem) HasProductOptionItemId() bool {
	if o != nil && o.ProductOptionItemId.IsSet() {
		return true
	}

	return false
}

// SetProductOptionItemId gets a reference to the given NullableString and assigns it to the ProductOptionItemId field.
func (o *ProductOptionItem) SetProductOptionItemId(v string) {
	o.ProductOptionItemId.Set(&v)
}
// SetProductOptionItemIdNil sets the value for ProductOptionItemId to be an explicit nil
func (o *ProductOptionItem) SetProductOptionItemIdNil() {
	o.ProductOptionItemId.Set(nil)
}

// UnsetProductOptionItemId ensures that no value is present for ProductOptionItemId, not even an explicit nil
func (o *ProductOptionItem) UnsetProductOptionItemId() {
	o.ProductOptionItemId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProductOptionItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductOptionItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProductOptionItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProductOptionItem) SetName(v string) {
	o.Name = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductOptionItem) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder.Get()) {
		var ret int32
		return ret
	}
	return *o.SortOrder.Get()
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductOptionItem) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SortOrder.Get(), o.SortOrder.IsSet()
}

// HasSortOrder returns a boolean if a field has been set.
func (o *ProductOptionItem) HasSortOrder() bool {
	if o != nil && o.SortOrder.IsSet() {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given NullableInt32 and assigns it to the SortOrder field.
func (o *ProductOptionItem) SetSortOrder(v int32) {
	o.SortOrder.Set(&v)
}
// SetSortOrderNil sets the value for SortOrder to be an explicit nil
func (o *ProductOptionItem) SetSortOrderNil() {
	o.SortOrder.Set(nil)
}

// UnsetSortOrder ensures that no value is present for SortOrder, not even an explicit nil
func (o *ProductOptionItem) UnsetSortOrder() {
	o.SortOrder.Unset()
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductOptionItem) GetPrice() string {
	if o == nil || IsNil(o.Price.Get()) {
		var ret string
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductOptionItem) GetPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *ProductOptionItem) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableString and assigns it to the Price field.
func (o *ProductOptionItem) SetPrice(v string) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *ProductOptionItem) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *ProductOptionItem) UnsetPrice() {
	o.Price.Unset()
}

// GetWeight returns the Weight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductOptionItem) GetWeight() string {
	if o == nil || IsNil(o.Weight.Get()) {
		var ret string
		return ret
	}
	return *o.Weight.Get()
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductOptionItem) GetWeightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Weight.Get(), o.Weight.IsSet()
}

// HasWeight returns a boolean if a field has been set.
func (o *ProductOptionItem) HasWeight() bool {
	if o != nil && o.Weight.IsSet() {
		return true
	}

	return false
}

// SetWeight gets a reference to the given NullableString and assigns it to the Weight field.
func (o *ProductOptionItem) SetWeight(v string) {
	o.Weight.Set(&v)
}
// SetWeightNil sets the value for Weight to be an explicit nil
func (o *ProductOptionItem) SetWeightNil() {
	o.Weight.Set(nil)
}

// UnsetWeight ensures that no value is present for Weight, not even an explicit nil
func (o *ProductOptionItem) UnsetWeight() {
	o.Weight.Unset()
}

// GetQuantity returns the Quantity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductOptionItem) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity.Get()) {
		var ret int32
		return ret
	}
	return *o.Quantity.Get()
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductOptionItem) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quantity.Get(), o.Quantity.IsSet()
}

// HasQuantity returns a boolean if a field has been set.
func (o *ProductOptionItem) HasQuantity() bool {
	if o != nil && o.Quantity.IsSet() {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given NullableInt32 and assigns it to the Quantity field.
func (o *ProductOptionItem) SetQuantity(v int32) {
	o.Quantity.Set(&v)
}
// SetQuantityNil sets the value for Quantity to be an explicit nil
func (o *ProductOptionItem) SetQuantityNil() {
	o.Quantity.Set(nil)
}

// UnsetQuantity ensures that no value is present for Quantity, not even an explicit nil
func (o *ProductOptionItem) UnsetQuantity() {
	o.Quantity.Unset()
}

// GetTypePrice returns the TypePrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductOptionItem) GetTypePrice() string {
	if o == nil || IsNil(o.TypePrice.Get()) {
		var ret string
		return ret
	}
	return *o.TypePrice.Get()
}

// GetTypePriceOk returns a tuple with the TypePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductOptionItem) GetTypePriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TypePrice.Get(), o.TypePrice.IsSet()
}

// HasTypePrice returns a boolean if a field has been set.
func (o *ProductOptionItem) HasTypePrice() bool {
	if o != nil && o.TypePrice.IsSet() {
		return true
	}

	return false
}

// SetTypePrice gets a reference to the given NullableString and assigns it to the TypePrice field.
func (o *ProductOptionItem) SetTypePrice(v string) {
	o.TypePrice.Set(&v)
}
// SetTypePriceNil sets the value for TypePrice to be an explicit nil
func (o *ProductOptionItem) SetTypePriceNil() {
	o.TypePrice.Set(nil)
}

// UnsetTypePrice ensures that no value is present for TypePrice, not even an explicit nil
func (o *ProductOptionItem) UnsetTypePrice() {
	o.TypePrice.Unset()
}

// GetSku returns the Sku field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductOptionItem) GetSku() string {
	if o == nil || IsNil(o.Sku.Get()) {
		var ret string
		return ret
	}
	return *o.Sku.Get()
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductOptionItem) GetSkuOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sku.Get(), o.Sku.IsSet()
}

// HasSku returns a boolean if a field has been set.
func (o *ProductOptionItem) HasSku() bool {
	if o != nil && o.Sku.IsSet() {
		return true
	}

	return false
}

// SetSku gets a reference to the given NullableString and assigns it to the Sku field.
func (o *ProductOptionItem) SetSku(v string) {
	o.Sku.Set(&v)
}
// SetSkuNil sets the value for Sku to be an explicit nil
func (o *ProductOptionItem) SetSkuNil() {
	o.Sku.Set(nil)
}

// UnsetSku ensures that no value is present for Sku, not even an explicit nil
func (o *ProductOptionItem) UnsetSku() {
	o.Sku.Unset()
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductOptionItem) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault.Get()) {
		var ret bool
		return ret
	}
	return *o.IsDefault.Get()
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductOptionItem) GetIsDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsDefault.Get(), o.IsDefault.IsSet()
}

// HasIsDefault returns a boolean if a field has been set.
func (o *ProductOptionItem) HasIsDefault() bool {
	if o != nil && o.IsDefault.IsSet() {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given NullableBool and assigns it to the IsDefault field.
func (o *ProductOptionItem) SetIsDefault(v bool) {
	o.IsDefault.Set(&v)
}
// SetIsDefaultNil sets the value for IsDefault to be an explicit nil
func (o *ProductOptionItem) SetIsDefaultNil() {
	o.IsDefault.Set(nil)
}

// UnsetIsDefault ensures that no value is present for IsDefault, not even an explicit nil
func (o *ProductOptionItem) UnsetIsDefault() {
	o.IsDefault.Unset()
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductOptionItem) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductOptionItem) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *ProductOptionItem) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *ProductOptionItem) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductOptionItem) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductOptionItem) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *ProductOptionItem) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *ProductOptionItem) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o ProductOptionItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductOptionItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.ProductOptionItemId.IsSet() {
		toSerialize["product_option_item_id"] = o.ProductOptionItemId.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.SortOrder.IsSet() {
		toSerialize["sort_order"] = o.SortOrder.Get()
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	if o.Weight.IsSet() {
		toSerialize["weight"] = o.Weight.Get()
	}
	if o.Quantity.IsSet() {
		toSerialize["quantity"] = o.Quantity.Get()
	}
	if o.TypePrice.IsSet() {
		toSerialize["type_price"] = o.TypePrice.Get()
	}
	if o.Sku.IsSet() {
		toSerialize["sku"] = o.Sku.Get()
	}
	if o.IsDefault.IsSet() {
		toSerialize["is_default"] = o.IsDefault.Get()
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableProductOptionItem struct {
	value *ProductOptionItem
	isSet bool
}

func (v NullableProductOptionItem) Get() *ProductOptionItem {
	return v.value
}

func (v *NullableProductOptionItem) Set(val *ProductOptionItem) {
	v.value = val
	v.isSet = true
}

func (v NullableProductOptionItem) IsSet() bool {
	return v.isSet
}

func (v *NullableProductOptionItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductOptionItem(val *ProductOptionItem) *NullableProductOptionItem {
	return &NullableProductOptionItem{value: val, isSet: true}
}

func (v NullableProductOptionItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductOptionItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


