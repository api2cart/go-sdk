/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProductImageAdd type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductImageAdd{}

// ProductImageAdd struct for ProductImageAdd
type ProductImageAdd struct {
	// Defines product id where the image should be added
	ProductId *string `json:"product_id,omitempty"`
	// Defines image's name
	ImageName string `json:"image_name"`
	// Defines image's types that are specified by comma-separated list
	Type string `json:"type"`
	// Defines URL of the image that has to be added
	Url *string `json:"url,omitempty"`
	// Defines alternative text that has to be attached to the picture
	Label *string `json:"label,omitempty"`
	// Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
	Mime *string `json:"mime,omitempty"`
	// Defines imageâ€™s position in the list
	Position *int32 `json:"position,omitempty"`
	// Content(body) encoded in base64 of image file
	Content *string `json:"content,omitempty"`
	// Defines product's variants specified by variant id
	ProductVariantId *string `json:"product_variant_id,omitempty"`
	// Defines product's variants ids
	VariantIds *string `json:"variant_ids,omitempty"`
	// Defines product's option values ids
	OptionValueIds *string `json:"option_value_ids,omitempty"`
	// Store Id
	StoreId *string `json:"store_id,omitempty"`
	// Add product image on specified language id
	LangId *string `json:"lang_id,omitempty"`
	// Use the latest platform API version
	UseLatestApiVersion *bool `json:"use_latest_api_version,omitempty"`
}

type _ProductImageAdd ProductImageAdd

// NewProductImageAdd instantiates a new ProductImageAdd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductImageAdd(imageName string, type_ string) *ProductImageAdd {
	this := ProductImageAdd{}
	this.ImageName = imageName
	this.Type = type_
	var position int32 = 0
	this.Position = &position
	var useLatestApiVersion bool = false
	this.UseLatestApiVersion = &useLatestApiVersion
	return &this
}

// NewProductImageAddWithDefaults instantiates a new ProductImageAdd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductImageAddWithDefaults() *ProductImageAdd {
	this := ProductImageAdd{}
	var position int32 = 0
	this.Position = &position
	var useLatestApiVersion bool = false
	this.UseLatestApiVersion = &useLatestApiVersion
	return &this
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *ProductImageAdd) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductImageAdd) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *ProductImageAdd) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *ProductImageAdd) SetProductId(v string) {
	o.ProductId = &v
}

// GetImageName returns the ImageName field value
func (o *ProductImageAdd) GetImageName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value
// and a boolean to check if the value has been set.
func (o *ProductImageAdd) GetImageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageName, true
}

// SetImageName sets field value
func (o *ProductImageAdd) SetImageName(v string) {
	o.ImageName = v
}

// GetType returns the Type field value
func (o *ProductImageAdd) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProductImageAdd) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProductImageAdd) SetType(v string) {
	o.Type = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ProductImageAdd) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductImageAdd) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ProductImageAdd) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ProductImageAdd) SetUrl(v string) {
	o.Url = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ProductImageAdd) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductImageAdd) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ProductImageAdd) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ProductImageAdd) SetLabel(v string) {
	o.Label = &v
}

// GetMime returns the Mime field value if set, zero value otherwise.
func (o *ProductImageAdd) GetMime() string {
	if o == nil || IsNil(o.Mime) {
		var ret string
		return ret
	}
	return *o.Mime
}

// GetMimeOk returns a tuple with the Mime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductImageAdd) GetMimeOk() (*string, bool) {
	if o == nil || IsNil(o.Mime) {
		return nil, false
	}
	return o.Mime, true
}

// HasMime returns a boolean if a field has been set.
func (o *ProductImageAdd) HasMime() bool {
	if o != nil && !IsNil(o.Mime) {
		return true
	}

	return false
}

// SetMime gets a reference to the given string and assigns it to the Mime field.
func (o *ProductImageAdd) SetMime(v string) {
	o.Mime = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ProductImageAdd) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductImageAdd) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ProductImageAdd) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *ProductImageAdd) SetPosition(v int32) {
	o.Position = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ProductImageAdd) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductImageAdd) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ProductImageAdd) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ProductImageAdd) SetContent(v string) {
	o.Content = &v
}

// GetProductVariantId returns the ProductVariantId field value if set, zero value otherwise.
func (o *ProductImageAdd) GetProductVariantId() string {
	if o == nil || IsNil(o.ProductVariantId) {
		var ret string
		return ret
	}
	return *o.ProductVariantId
}

// GetProductVariantIdOk returns a tuple with the ProductVariantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductImageAdd) GetProductVariantIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductVariantId) {
		return nil, false
	}
	return o.ProductVariantId, true
}

// HasProductVariantId returns a boolean if a field has been set.
func (o *ProductImageAdd) HasProductVariantId() bool {
	if o != nil && !IsNil(o.ProductVariantId) {
		return true
	}

	return false
}

// SetProductVariantId gets a reference to the given string and assigns it to the ProductVariantId field.
func (o *ProductImageAdd) SetProductVariantId(v string) {
	o.ProductVariantId = &v
}

// GetVariantIds returns the VariantIds field value if set, zero value otherwise.
func (o *ProductImageAdd) GetVariantIds() string {
	if o == nil || IsNil(o.VariantIds) {
		var ret string
		return ret
	}
	return *o.VariantIds
}

// GetVariantIdsOk returns a tuple with the VariantIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductImageAdd) GetVariantIdsOk() (*string, bool) {
	if o == nil || IsNil(o.VariantIds) {
		return nil, false
	}
	return o.VariantIds, true
}

// HasVariantIds returns a boolean if a field has been set.
func (o *ProductImageAdd) HasVariantIds() bool {
	if o != nil && !IsNil(o.VariantIds) {
		return true
	}

	return false
}

// SetVariantIds gets a reference to the given string and assigns it to the VariantIds field.
func (o *ProductImageAdd) SetVariantIds(v string) {
	o.VariantIds = &v
}

// GetOptionValueIds returns the OptionValueIds field value if set, zero value otherwise.
func (o *ProductImageAdd) GetOptionValueIds() string {
	if o == nil || IsNil(o.OptionValueIds) {
		var ret string
		return ret
	}
	return *o.OptionValueIds
}

// GetOptionValueIdsOk returns a tuple with the OptionValueIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductImageAdd) GetOptionValueIdsOk() (*string, bool) {
	if o == nil || IsNil(o.OptionValueIds) {
		return nil, false
	}
	return o.OptionValueIds, true
}

// HasOptionValueIds returns a boolean if a field has been set.
func (o *ProductImageAdd) HasOptionValueIds() bool {
	if o != nil && !IsNil(o.OptionValueIds) {
		return true
	}

	return false
}

// SetOptionValueIds gets a reference to the given string and assigns it to the OptionValueIds field.
func (o *ProductImageAdd) SetOptionValueIds(v string) {
	o.OptionValueIds = &v
}

// GetStoreId returns the StoreId field value if set, zero value otherwise.
func (o *ProductImageAdd) GetStoreId() string {
	if o == nil || IsNil(o.StoreId) {
		var ret string
		return ret
	}
	return *o.StoreId
}

// GetStoreIdOk returns a tuple with the StoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductImageAdd) GetStoreIdOk() (*string, bool) {
	if o == nil || IsNil(o.StoreId) {
		return nil, false
	}
	return o.StoreId, true
}

// HasStoreId returns a boolean if a field has been set.
func (o *ProductImageAdd) HasStoreId() bool {
	if o != nil && !IsNil(o.StoreId) {
		return true
	}

	return false
}

// SetStoreId gets a reference to the given string and assigns it to the StoreId field.
func (o *ProductImageAdd) SetStoreId(v string) {
	o.StoreId = &v
}

// GetLangId returns the LangId field value if set, zero value otherwise.
func (o *ProductImageAdd) GetLangId() string {
	if o == nil || IsNil(o.LangId) {
		var ret string
		return ret
	}
	return *o.LangId
}

// GetLangIdOk returns a tuple with the LangId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductImageAdd) GetLangIdOk() (*string, bool) {
	if o == nil || IsNil(o.LangId) {
		return nil, false
	}
	return o.LangId, true
}

// HasLangId returns a boolean if a field has been set.
func (o *ProductImageAdd) HasLangId() bool {
	if o != nil && !IsNil(o.LangId) {
		return true
	}

	return false
}

// SetLangId gets a reference to the given string and assigns it to the LangId field.
func (o *ProductImageAdd) SetLangId(v string) {
	o.LangId = &v
}

// GetUseLatestApiVersion returns the UseLatestApiVersion field value if set, zero value otherwise.
func (o *ProductImageAdd) GetUseLatestApiVersion() bool {
	if o == nil || IsNil(o.UseLatestApiVersion) {
		var ret bool
		return ret
	}
	return *o.UseLatestApiVersion
}

// GetUseLatestApiVersionOk returns a tuple with the UseLatestApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductImageAdd) GetUseLatestApiVersionOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLatestApiVersion) {
		return nil, false
	}
	return o.UseLatestApiVersion, true
}

// HasUseLatestApiVersion returns a boolean if a field has been set.
func (o *ProductImageAdd) HasUseLatestApiVersion() bool {
	if o != nil && !IsNil(o.UseLatestApiVersion) {
		return true
	}

	return false
}

// SetUseLatestApiVersion gets a reference to the given bool and assigns it to the UseLatestApiVersion field.
func (o *ProductImageAdd) SetUseLatestApiVersion(v bool) {
	o.UseLatestApiVersion = &v
}

func (o ProductImageAdd) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductImageAdd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	toSerialize["image_name"] = o.ImageName
	toSerialize["type"] = o.Type
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Mime) {
		toSerialize["mime"] = o.Mime
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.ProductVariantId) {
		toSerialize["product_variant_id"] = o.ProductVariantId
	}
	if !IsNil(o.VariantIds) {
		toSerialize["variant_ids"] = o.VariantIds
	}
	if !IsNil(o.OptionValueIds) {
		toSerialize["option_value_ids"] = o.OptionValueIds
	}
	if !IsNil(o.StoreId) {
		toSerialize["store_id"] = o.StoreId
	}
	if !IsNil(o.LangId) {
		toSerialize["lang_id"] = o.LangId
	}
	if !IsNil(o.UseLatestApiVersion) {
		toSerialize["use_latest_api_version"] = o.UseLatestApiVersion
	}
	return toSerialize, nil
}

func (o *ProductImageAdd) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image_name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductImageAdd := _ProductImageAdd{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductImageAdd)

	if err != nil {
		return err
	}

	*o = ProductImageAdd(varProductImageAdd)

	return err
}

type NullableProductImageAdd struct {
	value *ProductImageAdd
	isSet bool
}

func (v NullableProductImageAdd) Get() *ProductImageAdd {
	return v.value
}

func (v *NullableProductImageAdd) Set(val *ProductImageAdd) {
	v.value = val
	v.isSet = true
}

func (v NullableProductImageAdd) IsSet() bool {
	return v.isSet
}

func (v *NullableProductImageAdd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductImageAdd(val *ProductImageAdd) *NullableProductImageAdd {
	return &NullableProductImageAdd{value: val, isSet: true}
}

func (v NullableProductImageAdd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductImageAdd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


