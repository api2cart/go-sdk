/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProductOptionAdd type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductOptionAdd{}

// ProductOptionAdd struct for ProductOptionAdd
type ProductOptionAdd struct {
	// Defines option's name
	Name string `json:"name"`
	// Defines option's type that has to be added
	Type string `json:"type"`
	// Defines product id where the option should be added
	ProductId *string `json:"product_id,omitempty"`
	// Defines default option value that has to be added
	DefaultOptionValue *string `json:"default_option_value,omitempty"`
	// Defines option values that has to be added
	OptionValues *string `json:"option_values,omitempty"`
	// Defines option's description
	Description *string `json:"description,omitempty"`
	// Defines whether the option is available
	Avail *bool `json:"avail,omitempty"`
	// Sort number in the list
	SortOrder *int32 `json:"sort_order,omitempty"`
	// Defines if the option is required
	Required *bool `json:"required,omitempty"`
	// An array of option values.</b>
	Values []ProductOptionAddValuesInner `json:"values,omitempty"`
	// Is cache clear required
	ClearCache *bool `json:"clear_cache,omitempty"`
}

type _ProductOptionAdd ProductOptionAdd

// NewProductOptionAdd instantiates a new ProductOptionAdd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductOptionAdd(name string, type_ string) *ProductOptionAdd {
	this := ProductOptionAdd{}
	this.Name = name
	this.Type = type_
	var avail bool = true
	this.Avail = &avail
	var sortOrder int32 = 0
	this.SortOrder = &sortOrder
	var required bool = false
	this.Required = &required
	var clearCache bool = true
	this.ClearCache = &clearCache
	return &this
}

// NewProductOptionAddWithDefaults instantiates a new ProductOptionAdd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductOptionAddWithDefaults() *ProductOptionAdd {
	this := ProductOptionAdd{}
	var avail bool = true
	this.Avail = &avail
	var sortOrder int32 = 0
	this.SortOrder = &sortOrder
	var required bool = false
	this.Required = &required
	var clearCache bool = true
	this.ClearCache = &clearCache
	return &this
}

// GetName returns the Name field value
func (o *ProductOptionAdd) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProductOptionAdd) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProductOptionAdd) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *ProductOptionAdd) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProductOptionAdd) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProductOptionAdd) SetType(v string) {
	o.Type = v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *ProductOptionAdd) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductOptionAdd) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *ProductOptionAdd) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *ProductOptionAdd) SetProductId(v string) {
	o.ProductId = &v
}

// GetDefaultOptionValue returns the DefaultOptionValue field value if set, zero value otherwise.
func (o *ProductOptionAdd) GetDefaultOptionValue() string {
	if o == nil || IsNil(o.DefaultOptionValue) {
		var ret string
		return ret
	}
	return *o.DefaultOptionValue
}

// GetDefaultOptionValueOk returns a tuple with the DefaultOptionValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductOptionAdd) GetDefaultOptionValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultOptionValue) {
		return nil, false
	}
	return o.DefaultOptionValue, true
}

// HasDefaultOptionValue returns a boolean if a field has been set.
func (o *ProductOptionAdd) HasDefaultOptionValue() bool {
	if o != nil && !IsNil(o.DefaultOptionValue) {
		return true
	}

	return false
}

// SetDefaultOptionValue gets a reference to the given string and assigns it to the DefaultOptionValue field.
func (o *ProductOptionAdd) SetDefaultOptionValue(v string) {
	o.DefaultOptionValue = &v
}

// GetOptionValues returns the OptionValues field value if set, zero value otherwise.
func (o *ProductOptionAdd) GetOptionValues() string {
	if o == nil || IsNil(o.OptionValues) {
		var ret string
		return ret
	}
	return *o.OptionValues
}

// GetOptionValuesOk returns a tuple with the OptionValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductOptionAdd) GetOptionValuesOk() (*string, bool) {
	if o == nil || IsNil(o.OptionValues) {
		return nil, false
	}
	return o.OptionValues, true
}

// HasOptionValues returns a boolean if a field has been set.
func (o *ProductOptionAdd) HasOptionValues() bool {
	if o != nil && !IsNil(o.OptionValues) {
		return true
	}

	return false
}

// SetOptionValues gets a reference to the given string and assigns it to the OptionValues field.
func (o *ProductOptionAdd) SetOptionValues(v string) {
	o.OptionValues = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProductOptionAdd) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductOptionAdd) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProductOptionAdd) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProductOptionAdd) SetDescription(v string) {
	o.Description = &v
}

// GetAvail returns the Avail field value if set, zero value otherwise.
func (o *ProductOptionAdd) GetAvail() bool {
	if o == nil || IsNil(o.Avail) {
		var ret bool
		return ret
	}
	return *o.Avail
}

// GetAvailOk returns a tuple with the Avail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductOptionAdd) GetAvailOk() (*bool, bool) {
	if o == nil || IsNil(o.Avail) {
		return nil, false
	}
	return o.Avail, true
}

// HasAvail returns a boolean if a field has been set.
func (o *ProductOptionAdd) HasAvail() bool {
	if o != nil && !IsNil(o.Avail) {
		return true
	}

	return false
}

// SetAvail gets a reference to the given bool and assigns it to the Avail field.
func (o *ProductOptionAdd) SetAvail(v bool) {
	o.Avail = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *ProductOptionAdd) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder) {
		var ret int32
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductOptionAdd) GetSortOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.SortOrder) {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *ProductOptionAdd) HasSortOrder() bool {
	if o != nil && !IsNil(o.SortOrder) {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given int32 and assigns it to the SortOrder field.
func (o *ProductOptionAdd) SetSortOrder(v int32) {
	o.SortOrder = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *ProductOptionAdd) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductOptionAdd) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *ProductOptionAdd) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *ProductOptionAdd) SetRequired(v bool) {
	o.Required = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ProductOptionAdd) GetValues() []ProductOptionAddValuesInner {
	if o == nil || IsNil(o.Values) {
		var ret []ProductOptionAddValuesInner
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductOptionAdd) GetValuesOk() ([]ProductOptionAddValuesInner, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ProductOptionAdd) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []ProductOptionAddValuesInner and assigns it to the Values field.
func (o *ProductOptionAdd) SetValues(v []ProductOptionAddValuesInner) {
	o.Values = v
}

// GetClearCache returns the ClearCache field value if set, zero value otherwise.
func (o *ProductOptionAdd) GetClearCache() bool {
	if o == nil || IsNil(o.ClearCache) {
		var ret bool
		return ret
	}
	return *o.ClearCache
}

// GetClearCacheOk returns a tuple with the ClearCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductOptionAdd) GetClearCacheOk() (*bool, bool) {
	if o == nil || IsNil(o.ClearCache) {
		return nil, false
	}
	return o.ClearCache, true
}

// HasClearCache returns a boolean if a field has been set.
func (o *ProductOptionAdd) HasClearCache() bool {
	if o != nil && !IsNil(o.ClearCache) {
		return true
	}

	return false
}

// SetClearCache gets a reference to the given bool and assigns it to the ClearCache field.
func (o *ProductOptionAdd) SetClearCache(v bool) {
	o.ClearCache = &v
}

func (o ProductOptionAdd) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductOptionAdd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	if !IsNil(o.DefaultOptionValue) {
		toSerialize["default_option_value"] = o.DefaultOptionValue
	}
	if !IsNil(o.OptionValues) {
		toSerialize["option_values"] = o.OptionValues
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Avail) {
		toSerialize["avail"] = o.Avail
	}
	if !IsNil(o.SortOrder) {
		toSerialize["sort_order"] = o.SortOrder
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.ClearCache) {
		toSerialize["clear_cache"] = o.ClearCache
	}
	return toSerialize, nil
}

func (o *ProductOptionAdd) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductOptionAdd := _ProductOptionAdd{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductOptionAdd)

	if err != nil {
		return err
	}

	*o = ProductOptionAdd(varProductOptionAdd)

	return err
}

type NullableProductOptionAdd struct {
	value *ProductOptionAdd
	isSet bool
}

func (v NullableProductOptionAdd) Get() *ProductOptionAdd {
	return v.value
}

func (v *NullableProductOptionAdd) Set(val *ProductOptionAdd) {
	v.value = val
	v.isSet = true
}

func (v NullableProductOptionAdd) IsSet() bool {
	return v.isSet
}

func (v *NullableProductOptionAdd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductOptionAdd(val *ProductOptionAdd) *NullableProductOptionAdd {
	return &NullableProductOptionAdd{value: val, isSet: true}
}

func (v NullableProductOptionAdd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductOptionAdd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


