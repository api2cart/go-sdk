/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CouponCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CouponCondition{}

// CouponCondition struct for CouponCondition
type CouponCondition struct {
	Id *string `json:"id,omitempty"`
	Entity *string `json:"entity,omitempty"`
	MatchItems NullableString `json:"match_items,omitempty"`
	Key NullableString `json:"key,omitempty"`
	Operator NullableString `json:"operator,omitempty"`
	Value NullableString `json:"value,omitempty"`
	LogicOperator NullableString `json:"logic_operator,omitempty"`
	SubConditions []CouponCondition `json:"sub-conditions,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewCouponCondition instantiates a new CouponCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCouponCondition() *CouponCondition {
	this := CouponCondition{}
	return &this
}

// NewCouponConditionWithDefaults instantiates a new CouponCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCouponConditionWithDefaults() *CouponCondition {
	this := CouponCondition{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CouponCondition) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CouponCondition) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CouponCondition) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CouponCondition) SetId(v string) {
	o.Id = &v
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *CouponCondition) GetEntity() string {
	if o == nil || IsNil(o.Entity) {
		var ret string
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CouponCondition) GetEntityOk() (*string, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *CouponCondition) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given string and assigns it to the Entity field.
func (o *CouponCondition) SetEntity(v string) {
	o.Entity = &v
}

// GetMatchItems returns the MatchItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouponCondition) GetMatchItems() string {
	if o == nil || IsNil(o.MatchItems.Get()) {
		var ret string
		return ret
	}
	return *o.MatchItems.Get()
}

// GetMatchItemsOk returns a tuple with the MatchItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouponCondition) GetMatchItemsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchItems.Get(), o.MatchItems.IsSet()
}

// HasMatchItems returns a boolean if a field has been set.
func (o *CouponCondition) HasMatchItems() bool {
	if o != nil && o.MatchItems.IsSet() {
		return true
	}

	return false
}

// SetMatchItems gets a reference to the given NullableString and assigns it to the MatchItems field.
func (o *CouponCondition) SetMatchItems(v string) {
	o.MatchItems.Set(&v)
}
// SetMatchItemsNil sets the value for MatchItems to be an explicit nil
func (o *CouponCondition) SetMatchItemsNil() {
	o.MatchItems.Set(nil)
}

// UnsetMatchItems ensures that no value is present for MatchItems, not even an explicit nil
func (o *CouponCondition) UnsetMatchItems() {
	o.MatchItems.Unset()
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouponCondition) GetKey() string {
	if o == nil || IsNil(o.Key.Get()) {
		var ret string
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouponCondition) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *CouponCondition) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableString and assigns it to the Key field.
func (o *CouponCondition) SetKey(v string) {
	o.Key.Set(&v)
}
// SetKeyNil sets the value for Key to be an explicit nil
func (o *CouponCondition) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *CouponCondition) UnsetKey() {
	o.Key.Unset()
}

// GetOperator returns the Operator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouponCondition) GetOperator() string {
	if o == nil || IsNil(o.Operator.Get()) {
		var ret string
		return ret
	}
	return *o.Operator.Get()
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouponCondition) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Operator.Get(), o.Operator.IsSet()
}

// HasOperator returns a boolean if a field has been set.
func (o *CouponCondition) HasOperator() bool {
	if o != nil && o.Operator.IsSet() {
		return true
	}

	return false
}

// SetOperator gets a reference to the given NullableString and assigns it to the Operator field.
func (o *CouponCondition) SetOperator(v string) {
	o.Operator.Set(&v)
}
// SetOperatorNil sets the value for Operator to be an explicit nil
func (o *CouponCondition) SetOperatorNil() {
	o.Operator.Set(nil)
}

// UnsetOperator ensures that no value is present for Operator, not even an explicit nil
func (o *CouponCondition) UnsetOperator() {
	o.Operator.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouponCondition) GetValue() string {
	if o == nil || IsNil(o.Value.Get()) {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouponCondition) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *CouponCondition) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *CouponCondition) SetValue(v string) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *CouponCondition) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *CouponCondition) UnsetValue() {
	o.Value.Unset()
}

// GetLogicOperator returns the LogicOperator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouponCondition) GetLogicOperator() string {
	if o == nil || IsNil(o.LogicOperator.Get()) {
		var ret string
		return ret
	}
	return *o.LogicOperator.Get()
}

// GetLogicOperatorOk returns a tuple with the LogicOperator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouponCondition) GetLogicOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogicOperator.Get(), o.LogicOperator.IsSet()
}

// HasLogicOperator returns a boolean if a field has been set.
func (o *CouponCondition) HasLogicOperator() bool {
	if o != nil && o.LogicOperator.IsSet() {
		return true
	}

	return false
}

// SetLogicOperator gets a reference to the given NullableString and assigns it to the LogicOperator field.
func (o *CouponCondition) SetLogicOperator(v string) {
	o.LogicOperator.Set(&v)
}
// SetLogicOperatorNil sets the value for LogicOperator to be an explicit nil
func (o *CouponCondition) SetLogicOperatorNil() {
	o.LogicOperator.Set(nil)
}

// UnsetLogicOperator ensures that no value is present for LogicOperator, not even an explicit nil
func (o *CouponCondition) UnsetLogicOperator() {
	o.LogicOperator.Unset()
}

// GetSubConditions returns the SubConditions field value if set, zero value otherwise.
func (o *CouponCondition) GetSubConditions() []CouponCondition {
	if o == nil || IsNil(o.SubConditions) {
		var ret []CouponCondition
		return ret
	}
	return o.SubConditions
}

// GetSubConditionsOk returns a tuple with the SubConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CouponCondition) GetSubConditionsOk() ([]CouponCondition, bool) {
	if o == nil || IsNil(o.SubConditions) {
		return nil, false
	}
	return o.SubConditions, true
}

// HasSubConditions returns a boolean if a field has been set.
func (o *CouponCondition) HasSubConditions() bool {
	if o != nil && !IsNil(o.SubConditions) {
		return true
	}

	return false
}

// SetSubConditions gets a reference to the given []CouponCondition and assigns it to the SubConditions field.
func (o *CouponCondition) SetSubConditions(v []CouponCondition) {
	o.SubConditions = v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouponCondition) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouponCondition) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *CouponCondition) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *CouponCondition) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouponCondition) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouponCondition) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *CouponCondition) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *CouponCondition) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o CouponCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CouponCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	if o.MatchItems.IsSet() {
		toSerialize["match_items"] = o.MatchItems.Get()
	}
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	if o.Operator.IsSet() {
		toSerialize["operator"] = o.Operator.Get()
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	if o.LogicOperator.IsSet() {
		toSerialize["logic_operator"] = o.LogicOperator.Get()
	}
	if !IsNil(o.SubConditions) {
		toSerialize["sub-conditions"] = o.SubConditions
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableCouponCondition struct {
	value *CouponCondition
	isSet bool
}

func (v NullableCouponCondition) Get() *CouponCondition {
	return v.value
}

func (v *NullableCouponCondition) Set(val *CouponCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableCouponCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableCouponCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCouponCondition(val *CouponCondition) *NullableCouponCondition {
	return &NullableCouponCondition{value: val, isSet: true}
}

func (v NullableCouponCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCouponCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


