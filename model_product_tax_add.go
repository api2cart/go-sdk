/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProductTaxAdd type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductTaxAdd{}

// ProductTaxAdd struct for ProductTaxAdd
type ProductTaxAdd struct {
	// Defines products specified by product id
	ProductId *string `json:"product_id,omitempty"`
	// Defines tax class name where tax has to be added
	Name string `json:"name"`
	// Defines tax rates of specified tax classes
	TaxRates []ProductTaxAddTaxRatesInner `json:"tax_rates"`
}

type _ProductTaxAdd ProductTaxAdd

// NewProductTaxAdd instantiates a new ProductTaxAdd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductTaxAdd(name string, taxRates []ProductTaxAddTaxRatesInner) *ProductTaxAdd {
	this := ProductTaxAdd{}
	this.Name = name
	this.TaxRates = taxRates
	return &this
}

// NewProductTaxAddWithDefaults instantiates a new ProductTaxAdd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductTaxAddWithDefaults() *ProductTaxAdd {
	this := ProductTaxAdd{}
	return &this
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *ProductTaxAdd) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductTaxAdd) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *ProductTaxAdd) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *ProductTaxAdd) SetProductId(v string) {
	o.ProductId = &v
}

// GetName returns the Name field value
func (o *ProductTaxAdd) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProductTaxAdd) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProductTaxAdd) SetName(v string) {
	o.Name = v
}

// GetTaxRates returns the TaxRates field value
func (o *ProductTaxAdd) GetTaxRates() []ProductTaxAddTaxRatesInner {
	if o == nil {
		var ret []ProductTaxAddTaxRatesInner
		return ret
	}

	return o.TaxRates
}

// GetTaxRatesOk returns a tuple with the TaxRates field value
// and a boolean to check if the value has been set.
func (o *ProductTaxAdd) GetTaxRatesOk() ([]ProductTaxAddTaxRatesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxRates, true
}

// SetTaxRates sets field value
func (o *ProductTaxAdd) SetTaxRates(v []ProductTaxAddTaxRatesInner) {
	o.TaxRates = v
}

func (o ProductTaxAdd) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductTaxAdd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	toSerialize["name"] = o.Name
	toSerialize["tax_rates"] = o.TaxRates
	return toSerialize, nil
}

func (o *ProductTaxAdd) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"tax_rates",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductTaxAdd := _ProductTaxAdd{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductTaxAdd)

	if err != nil {
		return err
	}

	*o = ProductTaxAdd(varProductTaxAdd)

	return err
}

type NullableProductTaxAdd struct {
	value *ProductTaxAdd
	isSet bool
}

func (v NullableProductTaxAdd) Get() *ProductTaxAdd {
	return v.value
}

func (v *NullableProductTaxAdd) Set(val *ProductTaxAdd) {
	v.value = val
	v.isSet = true
}

func (v NullableProductTaxAdd) IsSet() bool {
	return v.isSet
}

func (v *NullableProductTaxAdd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductTaxAdd(val *ProductTaxAdd) *NullableProductTaxAdd {
	return &NullableProductTaxAdd{value: val, isSet: true}
}

func (v NullableProductTaxAdd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductTaxAdd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


