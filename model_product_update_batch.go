/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProductUpdateBatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductUpdateBatch{}

// ProductUpdateBatch struct for ProductUpdateBatch
type ProductUpdateBatch struct {
	//  Determines how updates to nested items should be handled.<hr><div style=\"font-style:normal\">  Values description:  <div style=\"margin-left: 2%; padding-top: 2%\">    <div style=\"font-size:85%\">      <b>  replace</b>: This option indicates that the nested items should be completely replaced with the new data provided. </br>      <b>  merge</b>: With this option, updates to nested items are merged with the existing data. </br>    </div>  </div></div>
	NestedItemsUpdateBehaviour *string `json:"nested_items_update_behaviour,omitempty"`
	ClearCache *bool `json:"clear_cache,omitempty"`
	Reindex *bool `json:"reindex,omitempty"`
	// Contains an array of product objects. The list of properties may vary depending on the specific platform.
	Payload []ProductUpdateBatchPayloadInner `json:"payload"`
}

type _ProductUpdateBatch ProductUpdateBatch

// NewProductUpdateBatch instantiates a new ProductUpdateBatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductUpdateBatch(payload []ProductUpdateBatchPayloadInner) *ProductUpdateBatch {
	this := ProductUpdateBatch{}
	var nestedItemsUpdateBehaviour string = "replace"
	this.NestedItemsUpdateBehaviour = &nestedItemsUpdateBehaviour
	var clearCache bool = false
	this.ClearCache = &clearCache
	var reindex bool = false
	this.Reindex = &reindex
	this.Payload = payload
	return &this
}

// NewProductUpdateBatchWithDefaults instantiates a new ProductUpdateBatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductUpdateBatchWithDefaults() *ProductUpdateBatch {
	this := ProductUpdateBatch{}
	var nestedItemsUpdateBehaviour string = "replace"
	this.NestedItemsUpdateBehaviour = &nestedItemsUpdateBehaviour
	var clearCache bool = false
	this.ClearCache = &clearCache
	var reindex bool = false
	this.Reindex = &reindex
	return &this
}

// GetNestedItemsUpdateBehaviour returns the NestedItemsUpdateBehaviour field value if set, zero value otherwise.
func (o *ProductUpdateBatch) GetNestedItemsUpdateBehaviour() string {
	if o == nil || IsNil(o.NestedItemsUpdateBehaviour) {
		var ret string
		return ret
	}
	return *o.NestedItemsUpdateBehaviour
}

// GetNestedItemsUpdateBehaviourOk returns a tuple with the NestedItemsUpdateBehaviour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductUpdateBatch) GetNestedItemsUpdateBehaviourOk() (*string, bool) {
	if o == nil || IsNil(o.NestedItemsUpdateBehaviour) {
		return nil, false
	}
	return o.NestedItemsUpdateBehaviour, true
}

// HasNestedItemsUpdateBehaviour returns a boolean if a field has been set.
func (o *ProductUpdateBatch) HasNestedItemsUpdateBehaviour() bool {
	if o != nil && !IsNil(o.NestedItemsUpdateBehaviour) {
		return true
	}

	return false
}

// SetNestedItemsUpdateBehaviour gets a reference to the given string and assigns it to the NestedItemsUpdateBehaviour field.
func (o *ProductUpdateBatch) SetNestedItemsUpdateBehaviour(v string) {
	o.NestedItemsUpdateBehaviour = &v
}

// GetClearCache returns the ClearCache field value if set, zero value otherwise.
func (o *ProductUpdateBatch) GetClearCache() bool {
	if o == nil || IsNil(o.ClearCache) {
		var ret bool
		return ret
	}
	return *o.ClearCache
}

// GetClearCacheOk returns a tuple with the ClearCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductUpdateBatch) GetClearCacheOk() (*bool, bool) {
	if o == nil || IsNil(o.ClearCache) {
		return nil, false
	}
	return o.ClearCache, true
}

// HasClearCache returns a boolean if a field has been set.
func (o *ProductUpdateBatch) HasClearCache() bool {
	if o != nil && !IsNil(o.ClearCache) {
		return true
	}

	return false
}

// SetClearCache gets a reference to the given bool and assigns it to the ClearCache field.
func (o *ProductUpdateBatch) SetClearCache(v bool) {
	o.ClearCache = &v
}

// GetReindex returns the Reindex field value if set, zero value otherwise.
func (o *ProductUpdateBatch) GetReindex() bool {
	if o == nil || IsNil(o.Reindex) {
		var ret bool
		return ret
	}
	return *o.Reindex
}

// GetReindexOk returns a tuple with the Reindex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductUpdateBatch) GetReindexOk() (*bool, bool) {
	if o == nil || IsNil(o.Reindex) {
		return nil, false
	}
	return o.Reindex, true
}

// HasReindex returns a boolean if a field has been set.
func (o *ProductUpdateBatch) HasReindex() bool {
	if o != nil && !IsNil(o.Reindex) {
		return true
	}

	return false
}

// SetReindex gets a reference to the given bool and assigns it to the Reindex field.
func (o *ProductUpdateBatch) SetReindex(v bool) {
	o.Reindex = &v
}

// GetPayload returns the Payload field value
func (o *ProductUpdateBatch) GetPayload() []ProductUpdateBatchPayloadInner {
	if o == nil {
		var ret []ProductUpdateBatchPayloadInner
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *ProductUpdateBatch) GetPayloadOk() ([]ProductUpdateBatchPayloadInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Payload, true
}

// SetPayload sets field value
func (o *ProductUpdateBatch) SetPayload(v []ProductUpdateBatchPayloadInner) {
	o.Payload = v
}

func (o ProductUpdateBatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductUpdateBatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NestedItemsUpdateBehaviour) {
		toSerialize["nested_items_update_behaviour"] = o.NestedItemsUpdateBehaviour
	}
	if !IsNil(o.ClearCache) {
		toSerialize["clear_cache"] = o.ClearCache
	}
	if !IsNil(o.Reindex) {
		toSerialize["reindex"] = o.Reindex
	}
	toSerialize["payload"] = o.Payload
	return toSerialize, nil
}

func (o *ProductUpdateBatch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"payload",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductUpdateBatch := _ProductUpdateBatch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductUpdateBatch)

	if err != nil {
		return err
	}

	*o = ProductUpdateBatch(varProductUpdateBatch)

	return err
}

type NullableProductUpdateBatch struct {
	value *ProductUpdateBatch
	isSet bool
}

func (v NullableProductUpdateBatch) Get() *ProductUpdateBatch {
	return v.value
}

func (v *NullableProductUpdateBatch) Set(val *ProductUpdateBatch) {
	v.value = val
	v.isSet = true
}

func (v NullableProductUpdateBatch) IsSet() bool {
	return v.isSet
}

func (v *NullableProductUpdateBatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductUpdateBatch(val *ProductUpdateBatch) *NullableProductUpdateBatch {
	return &NullableProductUpdateBatch{value: val, isSet: true}
}

func (v NullableProductUpdateBatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductUpdateBatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


