/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrderCalculateBundle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderCalculateBundle{}

// OrderCalculateBundle struct for OrderCalculateBundle
type OrderCalculateBundle struct {
	ProductId *string `json:"product_id,omitempty"`
	Sku *string `json:"sku,omitempty"`
	Name *string `json:"name,omitempty"`
	Quantity *int32 `json:"quantity,omitempty"`
	Price *float32 `json:"price,omitempty"`
	PriceIncTax *float32 `json:"price_inc_tax,omitempty"`
	TaxRate *float32 `json:"tax_rate,omitempty"`
	UnitDiscount *float32 `json:"unit_discount,omitempty"`
	Weight NullableFloat32 `json:"weight,omitempty"`
	WeightUnit NullableString `json:"weight_unit,omitempty"`
	Barcode NullableString `json:"barcode,omitempty"`
	VariantId NullableString `json:"variant_id,omitempty"`
	Options []OrderItemOption `json:"options,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewOrderCalculateBundle instantiates a new OrderCalculateBundle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderCalculateBundle() *OrderCalculateBundle {
	this := OrderCalculateBundle{}
	return &this
}

// NewOrderCalculateBundleWithDefaults instantiates a new OrderCalculateBundle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderCalculateBundleWithDefaults() *OrderCalculateBundle {
	this := OrderCalculateBundle{}
	return &this
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *OrderCalculateBundle) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCalculateBundle) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *OrderCalculateBundle) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *OrderCalculateBundle) SetProductId(v string) {
	o.ProductId = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *OrderCalculateBundle) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCalculateBundle) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *OrderCalculateBundle) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *OrderCalculateBundle) SetSku(v string) {
	o.Sku = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OrderCalculateBundle) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCalculateBundle) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OrderCalculateBundle) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OrderCalculateBundle) SetName(v string) {
	o.Name = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *OrderCalculateBundle) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCalculateBundle) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *OrderCalculateBundle) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *OrderCalculateBundle) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *OrderCalculateBundle) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCalculateBundle) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *OrderCalculateBundle) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *OrderCalculateBundle) SetPrice(v float32) {
	o.Price = &v
}

// GetPriceIncTax returns the PriceIncTax field value if set, zero value otherwise.
func (o *OrderCalculateBundle) GetPriceIncTax() float32 {
	if o == nil || IsNil(o.PriceIncTax) {
		var ret float32
		return ret
	}
	return *o.PriceIncTax
}

// GetPriceIncTaxOk returns a tuple with the PriceIncTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCalculateBundle) GetPriceIncTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.PriceIncTax) {
		return nil, false
	}
	return o.PriceIncTax, true
}

// HasPriceIncTax returns a boolean if a field has been set.
func (o *OrderCalculateBundle) HasPriceIncTax() bool {
	if o != nil && !IsNil(o.PriceIncTax) {
		return true
	}

	return false
}

// SetPriceIncTax gets a reference to the given float32 and assigns it to the PriceIncTax field.
func (o *OrderCalculateBundle) SetPriceIncTax(v float32) {
	o.PriceIncTax = &v
}

// GetTaxRate returns the TaxRate field value if set, zero value otherwise.
func (o *OrderCalculateBundle) GetTaxRate() float32 {
	if o == nil || IsNil(o.TaxRate) {
		var ret float32
		return ret
	}
	return *o.TaxRate
}

// GetTaxRateOk returns a tuple with the TaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCalculateBundle) GetTaxRateOk() (*float32, bool) {
	if o == nil || IsNil(o.TaxRate) {
		return nil, false
	}
	return o.TaxRate, true
}

// HasTaxRate returns a boolean if a field has been set.
func (o *OrderCalculateBundle) HasTaxRate() bool {
	if o != nil && !IsNil(o.TaxRate) {
		return true
	}

	return false
}

// SetTaxRate gets a reference to the given float32 and assigns it to the TaxRate field.
func (o *OrderCalculateBundle) SetTaxRate(v float32) {
	o.TaxRate = &v
}

// GetUnitDiscount returns the UnitDiscount field value if set, zero value otherwise.
func (o *OrderCalculateBundle) GetUnitDiscount() float32 {
	if o == nil || IsNil(o.UnitDiscount) {
		var ret float32
		return ret
	}
	return *o.UnitDiscount
}

// GetUnitDiscountOk returns a tuple with the UnitDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCalculateBundle) GetUnitDiscountOk() (*float32, bool) {
	if o == nil || IsNil(o.UnitDiscount) {
		return nil, false
	}
	return o.UnitDiscount, true
}

// HasUnitDiscount returns a boolean if a field has been set.
func (o *OrderCalculateBundle) HasUnitDiscount() bool {
	if o != nil && !IsNil(o.UnitDiscount) {
		return true
	}

	return false
}

// SetUnitDiscount gets a reference to the given float32 and assigns it to the UnitDiscount field.
func (o *OrderCalculateBundle) SetUnitDiscount(v float32) {
	o.UnitDiscount = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderCalculateBundle) GetWeight() float32 {
	if o == nil || IsNil(o.Weight.Get()) {
		var ret float32
		return ret
	}
	return *o.Weight.Get()
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderCalculateBundle) GetWeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Weight.Get(), o.Weight.IsSet()
}

// HasWeight returns a boolean if a field has been set.
func (o *OrderCalculateBundle) HasWeight() bool {
	if o != nil && o.Weight.IsSet() {
		return true
	}

	return false
}

// SetWeight gets a reference to the given NullableFloat32 and assigns it to the Weight field.
func (o *OrderCalculateBundle) SetWeight(v float32) {
	o.Weight.Set(&v)
}
// SetWeightNil sets the value for Weight to be an explicit nil
func (o *OrderCalculateBundle) SetWeightNil() {
	o.Weight.Set(nil)
}

// UnsetWeight ensures that no value is present for Weight, not even an explicit nil
func (o *OrderCalculateBundle) UnsetWeight() {
	o.Weight.Unset()
}

// GetWeightUnit returns the WeightUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderCalculateBundle) GetWeightUnit() string {
	if o == nil || IsNil(o.WeightUnit.Get()) {
		var ret string
		return ret
	}
	return *o.WeightUnit.Get()
}

// GetWeightUnitOk returns a tuple with the WeightUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderCalculateBundle) GetWeightUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WeightUnit.Get(), o.WeightUnit.IsSet()
}

// HasWeightUnit returns a boolean if a field has been set.
func (o *OrderCalculateBundle) HasWeightUnit() bool {
	if o != nil && o.WeightUnit.IsSet() {
		return true
	}

	return false
}

// SetWeightUnit gets a reference to the given NullableString and assigns it to the WeightUnit field.
func (o *OrderCalculateBundle) SetWeightUnit(v string) {
	o.WeightUnit.Set(&v)
}
// SetWeightUnitNil sets the value for WeightUnit to be an explicit nil
func (o *OrderCalculateBundle) SetWeightUnitNil() {
	o.WeightUnit.Set(nil)
}

// UnsetWeightUnit ensures that no value is present for WeightUnit, not even an explicit nil
func (o *OrderCalculateBundle) UnsetWeightUnit() {
	o.WeightUnit.Unset()
}

// GetBarcode returns the Barcode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderCalculateBundle) GetBarcode() string {
	if o == nil || IsNil(o.Barcode.Get()) {
		var ret string
		return ret
	}
	return *o.Barcode.Get()
}

// GetBarcodeOk returns a tuple with the Barcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderCalculateBundle) GetBarcodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Barcode.Get(), o.Barcode.IsSet()
}

// HasBarcode returns a boolean if a field has been set.
func (o *OrderCalculateBundle) HasBarcode() bool {
	if o != nil && o.Barcode.IsSet() {
		return true
	}

	return false
}

// SetBarcode gets a reference to the given NullableString and assigns it to the Barcode field.
func (o *OrderCalculateBundle) SetBarcode(v string) {
	o.Barcode.Set(&v)
}
// SetBarcodeNil sets the value for Barcode to be an explicit nil
func (o *OrderCalculateBundle) SetBarcodeNil() {
	o.Barcode.Set(nil)
}

// UnsetBarcode ensures that no value is present for Barcode, not even an explicit nil
func (o *OrderCalculateBundle) UnsetBarcode() {
	o.Barcode.Unset()
}

// GetVariantId returns the VariantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderCalculateBundle) GetVariantId() string {
	if o == nil || IsNil(o.VariantId.Get()) {
		var ret string
		return ret
	}
	return *o.VariantId.Get()
}

// GetVariantIdOk returns a tuple with the VariantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderCalculateBundle) GetVariantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariantId.Get(), o.VariantId.IsSet()
}

// HasVariantId returns a boolean if a field has been set.
func (o *OrderCalculateBundle) HasVariantId() bool {
	if o != nil && o.VariantId.IsSet() {
		return true
	}

	return false
}

// SetVariantId gets a reference to the given NullableString and assigns it to the VariantId field.
func (o *OrderCalculateBundle) SetVariantId(v string) {
	o.VariantId.Set(&v)
}
// SetVariantIdNil sets the value for VariantId to be an explicit nil
func (o *OrderCalculateBundle) SetVariantIdNil() {
	o.VariantId.Set(nil)
}

// UnsetVariantId ensures that no value is present for VariantId, not even an explicit nil
func (o *OrderCalculateBundle) UnsetVariantId() {
	o.VariantId.Unset()
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *OrderCalculateBundle) GetOptions() []OrderItemOption {
	if o == nil || IsNil(o.Options) {
		var ret []OrderItemOption
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCalculateBundle) GetOptionsOk() ([]OrderItemOption, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *OrderCalculateBundle) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []OrderItemOption and assigns it to the Options field.
func (o *OrderCalculateBundle) SetOptions(v []OrderItemOption) {
	o.Options = v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderCalculateBundle) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderCalculateBundle) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *OrderCalculateBundle) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *OrderCalculateBundle) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderCalculateBundle) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderCalculateBundle) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *OrderCalculateBundle) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *OrderCalculateBundle) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o OrderCalculateBundle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderCalculateBundle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.PriceIncTax) {
		toSerialize["price_inc_tax"] = o.PriceIncTax
	}
	if !IsNil(o.TaxRate) {
		toSerialize["tax_rate"] = o.TaxRate
	}
	if !IsNil(o.UnitDiscount) {
		toSerialize["unit_discount"] = o.UnitDiscount
	}
	if o.Weight.IsSet() {
		toSerialize["weight"] = o.Weight.Get()
	}
	if o.WeightUnit.IsSet() {
		toSerialize["weight_unit"] = o.WeightUnit.Get()
	}
	if o.Barcode.IsSet() {
		toSerialize["barcode"] = o.Barcode.Get()
	}
	if o.VariantId.IsSet() {
		toSerialize["variant_id"] = o.VariantId.Get()
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableOrderCalculateBundle struct {
	value *OrderCalculateBundle
	isSet bool
}

func (v NullableOrderCalculateBundle) Get() *OrderCalculateBundle {
	return v.value
}

func (v *NullableOrderCalculateBundle) Set(val *OrderCalculateBundle) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderCalculateBundle) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderCalculateBundle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderCalculateBundle(val *OrderCalculateBundle) *NullableOrderCalculateBundle {
	return &NullableOrderCalculateBundle{value: val, isSet: true}
}

func (v NullableOrderCalculateBundle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderCalculateBundle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


