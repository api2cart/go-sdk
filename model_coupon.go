/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Coupon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Coupon{}

// Coupon struct for Coupon
type Coupon struct {
	Id *string `json:"id,omitempty"`
	Code *string `json:"code,omitempty"`
	Codes []CouponCode `json:"codes,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Actions []CouponAction `json:"actions,omitempty"`
	DateStart *A2CDateTime `json:"date_start,omitempty"`
	DateEnd *A2CDateTime `json:"date_end,omitempty"`
	Avail *bool `json:"avail,omitempty"`
	Priority *int32 `json:"priority,omitempty"`
	UsedTimes *int32 `json:"used_times,omitempty"`
	UsageLimit *int32 `json:"usage_limit,omitempty"`
	UsageLimitPerCustomer *int32 `json:"usage_limit_per_customer,omitempty"`
	LogicOperator *string `json:"logic_operator,omitempty"`
	Conditions []CouponCondition `json:"conditions,omitempty"`
	UsageHistory []CouponHistory `json:"usage_history,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewCoupon instantiates a new Coupon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoupon() *Coupon {
	this := Coupon{}
	return &this
}

// NewCouponWithDefaults instantiates a new Coupon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCouponWithDefaults() *Coupon {
	this := Coupon{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Coupon) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coupon) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Coupon) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Coupon) SetId(v string) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Coupon) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coupon) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Coupon) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Coupon) SetCode(v string) {
	o.Code = &v
}

// GetCodes returns the Codes field value if set, zero value otherwise.
func (o *Coupon) GetCodes() []CouponCode {
	if o == nil || IsNil(o.Codes) {
		var ret []CouponCode
		return ret
	}
	return o.Codes
}

// GetCodesOk returns a tuple with the Codes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coupon) GetCodesOk() ([]CouponCode, bool) {
	if o == nil || IsNil(o.Codes) {
		return nil, false
	}
	return o.Codes, true
}

// HasCodes returns a boolean if a field has been set.
func (o *Coupon) HasCodes() bool {
	if o != nil && !IsNil(o.Codes) {
		return true
	}

	return false
}

// SetCodes gets a reference to the given []CouponCode and assigns it to the Codes field.
func (o *Coupon) SetCodes(v []CouponCode) {
	o.Codes = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Coupon) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coupon) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Coupon) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Coupon) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Coupon) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coupon) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Coupon) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Coupon) SetDescription(v string) {
	o.Description = &v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *Coupon) GetActions() []CouponAction {
	if o == nil || IsNil(o.Actions) {
		var ret []CouponAction
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coupon) GetActionsOk() ([]CouponAction, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *Coupon) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []CouponAction and assigns it to the Actions field.
func (o *Coupon) SetActions(v []CouponAction) {
	o.Actions = v
}

// GetDateStart returns the DateStart field value if set, zero value otherwise.
func (o *Coupon) GetDateStart() A2CDateTime {
	if o == nil || IsNil(o.DateStart) {
		var ret A2CDateTime
		return ret
	}
	return *o.DateStart
}

// GetDateStartOk returns a tuple with the DateStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coupon) GetDateStartOk() (*A2CDateTime, bool) {
	if o == nil || IsNil(o.DateStart) {
		return nil, false
	}
	return o.DateStart, true
}

// HasDateStart returns a boolean if a field has been set.
func (o *Coupon) HasDateStart() bool {
	if o != nil && !IsNil(o.DateStart) {
		return true
	}

	return false
}

// SetDateStart gets a reference to the given A2CDateTime and assigns it to the DateStart field.
func (o *Coupon) SetDateStart(v A2CDateTime) {
	o.DateStart = &v
}

// GetDateEnd returns the DateEnd field value if set, zero value otherwise.
func (o *Coupon) GetDateEnd() A2CDateTime {
	if o == nil || IsNil(o.DateEnd) {
		var ret A2CDateTime
		return ret
	}
	return *o.DateEnd
}

// GetDateEndOk returns a tuple with the DateEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coupon) GetDateEndOk() (*A2CDateTime, bool) {
	if o == nil || IsNil(o.DateEnd) {
		return nil, false
	}
	return o.DateEnd, true
}

// HasDateEnd returns a boolean if a field has been set.
func (o *Coupon) HasDateEnd() bool {
	if o != nil && !IsNil(o.DateEnd) {
		return true
	}

	return false
}

// SetDateEnd gets a reference to the given A2CDateTime and assigns it to the DateEnd field.
func (o *Coupon) SetDateEnd(v A2CDateTime) {
	o.DateEnd = &v
}

// GetAvail returns the Avail field value if set, zero value otherwise.
func (o *Coupon) GetAvail() bool {
	if o == nil || IsNil(o.Avail) {
		var ret bool
		return ret
	}
	return *o.Avail
}

// GetAvailOk returns a tuple with the Avail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coupon) GetAvailOk() (*bool, bool) {
	if o == nil || IsNil(o.Avail) {
		return nil, false
	}
	return o.Avail, true
}

// HasAvail returns a boolean if a field has been set.
func (o *Coupon) HasAvail() bool {
	if o != nil && !IsNil(o.Avail) {
		return true
	}

	return false
}

// SetAvail gets a reference to the given bool and assigns it to the Avail field.
func (o *Coupon) SetAvail(v bool) {
	o.Avail = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *Coupon) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coupon) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Coupon) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *Coupon) SetPriority(v int32) {
	o.Priority = &v
}

// GetUsedTimes returns the UsedTimes field value if set, zero value otherwise.
func (o *Coupon) GetUsedTimes() int32 {
	if o == nil || IsNil(o.UsedTimes) {
		var ret int32
		return ret
	}
	return *o.UsedTimes
}

// GetUsedTimesOk returns a tuple with the UsedTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coupon) GetUsedTimesOk() (*int32, bool) {
	if o == nil || IsNil(o.UsedTimes) {
		return nil, false
	}
	return o.UsedTimes, true
}

// HasUsedTimes returns a boolean if a field has been set.
func (o *Coupon) HasUsedTimes() bool {
	if o != nil && !IsNil(o.UsedTimes) {
		return true
	}

	return false
}

// SetUsedTimes gets a reference to the given int32 and assigns it to the UsedTimes field.
func (o *Coupon) SetUsedTimes(v int32) {
	o.UsedTimes = &v
}

// GetUsageLimit returns the UsageLimit field value if set, zero value otherwise.
func (o *Coupon) GetUsageLimit() int32 {
	if o == nil || IsNil(o.UsageLimit) {
		var ret int32
		return ret
	}
	return *o.UsageLimit
}

// GetUsageLimitOk returns a tuple with the UsageLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coupon) GetUsageLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.UsageLimit) {
		return nil, false
	}
	return o.UsageLimit, true
}

// HasUsageLimit returns a boolean if a field has been set.
func (o *Coupon) HasUsageLimit() bool {
	if o != nil && !IsNil(o.UsageLimit) {
		return true
	}

	return false
}

// SetUsageLimit gets a reference to the given int32 and assigns it to the UsageLimit field.
func (o *Coupon) SetUsageLimit(v int32) {
	o.UsageLimit = &v
}

// GetUsageLimitPerCustomer returns the UsageLimitPerCustomer field value if set, zero value otherwise.
func (o *Coupon) GetUsageLimitPerCustomer() int32 {
	if o == nil || IsNil(o.UsageLimitPerCustomer) {
		var ret int32
		return ret
	}
	return *o.UsageLimitPerCustomer
}

// GetUsageLimitPerCustomerOk returns a tuple with the UsageLimitPerCustomer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coupon) GetUsageLimitPerCustomerOk() (*int32, bool) {
	if o == nil || IsNil(o.UsageLimitPerCustomer) {
		return nil, false
	}
	return o.UsageLimitPerCustomer, true
}

// HasUsageLimitPerCustomer returns a boolean if a field has been set.
func (o *Coupon) HasUsageLimitPerCustomer() bool {
	if o != nil && !IsNil(o.UsageLimitPerCustomer) {
		return true
	}

	return false
}

// SetUsageLimitPerCustomer gets a reference to the given int32 and assigns it to the UsageLimitPerCustomer field.
func (o *Coupon) SetUsageLimitPerCustomer(v int32) {
	o.UsageLimitPerCustomer = &v
}

// GetLogicOperator returns the LogicOperator field value if set, zero value otherwise.
func (o *Coupon) GetLogicOperator() string {
	if o == nil || IsNil(o.LogicOperator) {
		var ret string
		return ret
	}
	return *o.LogicOperator
}

// GetLogicOperatorOk returns a tuple with the LogicOperator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coupon) GetLogicOperatorOk() (*string, bool) {
	if o == nil || IsNil(o.LogicOperator) {
		return nil, false
	}
	return o.LogicOperator, true
}

// HasLogicOperator returns a boolean if a field has been set.
func (o *Coupon) HasLogicOperator() bool {
	if o != nil && !IsNil(o.LogicOperator) {
		return true
	}

	return false
}

// SetLogicOperator gets a reference to the given string and assigns it to the LogicOperator field.
func (o *Coupon) SetLogicOperator(v string) {
	o.LogicOperator = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *Coupon) GetConditions() []CouponCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []CouponCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coupon) GetConditionsOk() ([]CouponCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *Coupon) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []CouponCondition and assigns it to the Conditions field.
func (o *Coupon) SetConditions(v []CouponCondition) {
	o.Conditions = v
}

// GetUsageHistory returns the UsageHistory field value if set, zero value otherwise.
func (o *Coupon) GetUsageHistory() []CouponHistory {
	if o == nil || IsNil(o.UsageHistory) {
		var ret []CouponHistory
		return ret
	}
	return o.UsageHistory
}

// GetUsageHistoryOk returns a tuple with the UsageHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coupon) GetUsageHistoryOk() ([]CouponHistory, bool) {
	if o == nil || IsNil(o.UsageHistory) {
		return nil, false
	}
	return o.UsageHistory, true
}

// HasUsageHistory returns a boolean if a field has been set.
func (o *Coupon) HasUsageHistory() bool {
	if o != nil && !IsNil(o.UsageHistory) {
		return true
	}

	return false
}

// SetUsageHistory gets a reference to the given []CouponHistory and assigns it to the UsageHistory field.
func (o *Coupon) SetUsageHistory(v []CouponHistory) {
	o.UsageHistory = v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise.
func (o *Coupon) GetAdditionalFields() map[string]interface{} {
	if o == nil || IsNil(o.AdditionalFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coupon) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *Coupon) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *Coupon) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Coupon) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coupon) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Coupon) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *Coupon) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o Coupon) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Coupon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Codes) {
		toSerialize["codes"] = o.Codes
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	if !IsNil(o.DateStart) {
		toSerialize["date_start"] = o.DateStart
	}
	if !IsNil(o.DateEnd) {
		toSerialize["date_end"] = o.DateEnd
	}
	if !IsNil(o.Avail) {
		toSerialize["avail"] = o.Avail
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.UsedTimes) {
		toSerialize["used_times"] = o.UsedTimes
	}
	if !IsNil(o.UsageLimit) {
		toSerialize["usage_limit"] = o.UsageLimit
	}
	if !IsNil(o.UsageLimitPerCustomer) {
		toSerialize["usage_limit_per_customer"] = o.UsageLimitPerCustomer
	}
	if !IsNil(o.LogicOperator) {
		toSerialize["logic_operator"] = o.LogicOperator
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.UsageHistory) {
		toSerialize["usage_history"] = o.UsageHistory
	}
	if !IsNil(o.AdditionalFields) {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableCoupon struct {
	value *Coupon
	isSet bool
}

func (v NullableCoupon) Get() *Coupon {
	return v.value
}

func (v *NullableCoupon) Set(val *Coupon) {
	v.value = val
	v.isSet = true
}

func (v NullableCoupon) IsSet() bool {
	return v.isSet
}

func (v *NullableCoupon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoupon(val *Coupon) *NullableCoupon {
	return &NullableCoupon{value: val, isSet: true}
}

func (v NullableCoupon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoupon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


