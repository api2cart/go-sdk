/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrderRefundAdd type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderRefundAdd{}

// OrderRefundAdd struct for OrderRefundAdd
type OrderRefundAdd struct {
	// Defines the order for which the refund will be created.
	OrderId *string `json:"order_id,omitempty"`
	// Defines items in the order that will be refunded
	Items []OrderRefundAddItemsInner `json:"items,omitempty"`
	// Defines order refund amount.
	TotalPrice *float32 `json:"total_price,omitempty"`
	// Defines refund shipping amount.
	ShippingPrice *float32 `json:"shipping_price,omitempty"`
	// Specifies refund's fee price
	FeePrice *float32 `json:"fee_price,omitempty"`
	// Refund reason, or some else message which assigned to refund.
	Message *string `json:"message,omitempty"`
	// Boolean, whether or not to add the line items back to the store inventory.
	ItemRestock *bool `json:"item_restock,omitempty"`
	// Send notifications to customer after refund was created
	SendNotifications *bool `json:"send_notifications,omitempty"`
	// Specifies an order creation date in format Y-m-d H:i:s
	Date *string `json:"date,omitempty"`
	// Indicates whether refund type is online
	IsOnline *bool `json:"is_online,omitempty"`
}

// NewOrderRefundAdd instantiates a new OrderRefundAdd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderRefundAdd() *OrderRefundAdd {
	this := OrderRefundAdd{}
	var itemRestock bool = false
	this.ItemRestock = &itemRestock
	var sendNotifications bool = false
	this.SendNotifications = &sendNotifications
	var isOnline bool = false
	this.IsOnline = &isOnline
	return &this
}

// NewOrderRefundAddWithDefaults instantiates a new OrderRefundAdd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderRefundAddWithDefaults() *OrderRefundAdd {
	this := OrderRefundAdd{}
	var itemRestock bool = false
	this.ItemRestock = &itemRestock
	var sendNotifications bool = false
	this.SendNotifications = &sendNotifications
	var isOnline bool = false
	this.IsOnline = &isOnline
	return &this
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *OrderRefundAdd) GetOrderId() string {
	if o == nil || IsNil(o.OrderId) {
		var ret string
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRefundAdd) GetOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *OrderRefundAdd) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given string and assigns it to the OrderId field.
func (o *OrderRefundAdd) SetOrderId(v string) {
	o.OrderId = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *OrderRefundAdd) GetItems() []OrderRefundAddItemsInner {
	if o == nil || IsNil(o.Items) {
		var ret []OrderRefundAddItemsInner
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRefundAdd) GetItemsOk() ([]OrderRefundAddItemsInner, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *OrderRefundAdd) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []OrderRefundAddItemsInner and assigns it to the Items field.
func (o *OrderRefundAdd) SetItems(v []OrderRefundAddItemsInner) {
	o.Items = v
}

// GetTotalPrice returns the TotalPrice field value if set, zero value otherwise.
func (o *OrderRefundAdd) GetTotalPrice() float32 {
	if o == nil || IsNil(o.TotalPrice) {
		var ret float32
		return ret
	}
	return *o.TotalPrice
}

// GetTotalPriceOk returns a tuple with the TotalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRefundAdd) GetTotalPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalPrice) {
		return nil, false
	}
	return o.TotalPrice, true
}

// HasTotalPrice returns a boolean if a field has been set.
func (o *OrderRefundAdd) HasTotalPrice() bool {
	if o != nil && !IsNil(o.TotalPrice) {
		return true
	}

	return false
}

// SetTotalPrice gets a reference to the given float32 and assigns it to the TotalPrice field.
func (o *OrderRefundAdd) SetTotalPrice(v float32) {
	o.TotalPrice = &v
}

// GetShippingPrice returns the ShippingPrice field value if set, zero value otherwise.
func (o *OrderRefundAdd) GetShippingPrice() float32 {
	if o == nil || IsNil(o.ShippingPrice) {
		var ret float32
		return ret
	}
	return *o.ShippingPrice
}

// GetShippingPriceOk returns a tuple with the ShippingPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRefundAdd) GetShippingPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.ShippingPrice) {
		return nil, false
	}
	return o.ShippingPrice, true
}

// HasShippingPrice returns a boolean if a field has been set.
func (o *OrderRefundAdd) HasShippingPrice() bool {
	if o != nil && !IsNil(o.ShippingPrice) {
		return true
	}

	return false
}

// SetShippingPrice gets a reference to the given float32 and assigns it to the ShippingPrice field.
func (o *OrderRefundAdd) SetShippingPrice(v float32) {
	o.ShippingPrice = &v
}

// GetFeePrice returns the FeePrice field value if set, zero value otherwise.
func (o *OrderRefundAdd) GetFeePrice() float32 {
	if o == nil || IsNil(o.FeePrice) {
		var ret float32
		return ret
	}
	return *o.FeePrice
}

// GetFeePriceOk returns a tuple with the FeePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRefundAdd) GetFeePriceOk() (*float32, bool) {
	if o == nil || IsNil(o.FeePrice) {
		return nil, false
	}
	return o.FeePrice, true
}

// HasFeePrice returns a boolean if a field has been set.
func (o *OrderRefundAdd) HasFeePrice() bool {
	if o != nil && !IsNil(o.FeePrice) {
		return true
	}

	return false
}

// SetFeePrice gets a reference to the given float32 and assigns it to the FeePrice field.
func (o *OrderRefundAdd) SetFeePrice(v float32) {
	o.FeePrice = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *OrderRefundAdd) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRefundAdd) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *OrderRefundAdd) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *OrderRefundAdd) SetMessage(v string) {
	o.Message = &v
}

// GetItemRestock returns the ItemRestock field value if set, zero value otherwise.
func (o *OrderRefundAdd) GetItemRestock() bool {
	if o == nil || IsNil(o.ItemRestock) {
		var ret bool
		return ret
	}
	return *o.ItemRestock
}

// GetItemRestockOk returns a tuple with the ItemRestock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRefundAdd) GetItemRestockOk() (*bool, bool) {
	if o == nil || IsNil(o.ItemRestock) {
		return nil, false
	}
	return o.ItemRestock, true
}

// HasItemRestock returns a boolean if a field has been set.
func (o *OrderRefundAdd) HasItemRestock() bool {
	if o != nil && !IsNil(o.ItemRestock) {
		return true
	}

	return false
}

// SetItemRestock gets a reference to the given bool and assigns it to the ItemRestock field.
func (o *OrderRefundAdd) SetItemRestock(v bool) {
	o.ItemRestock = &v
}

// GetSendNotifications returns the SendNotifications field value if set, zero value otherwise.
func (o *OrderRefundAdd) GetSendNotifications() bool {
	if o == nil || IsNil(o.SendNotifications) {
		var ret bool
		return ret
	}
	return *o.SendNotifications
}

// GetSendNotificationsOk returns a tuple with the SendNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRefundAdd) GetSendNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.SendNotifications) {
		return nil, false
	}
	return o.SendNotifications, true
}

// HasSendNotifications returns a boolean if a field has been set.
func (o *OrderRefundAdd) HasSendNotifications() bool {
	if o != nil && !IsNil(o.SendNotifications) {
		return true
	}

	return false
}

// SetSendNotifications gets a reference to the given bool and assigns it to the SendNotifications field.
func (o *OrderRefundAdd) SetSendNotifications(v bool) {
	o.SendNotifications = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *OrderRefundAdd) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRefundAdd) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *OrderRefundAdd) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *OrderRefundAdd) SetDate(v string) {
	o.Date = &v
}

// GetIsOnline returns the IsOnline field value if set, zero value otherwise.
func (o *OrderRefundAdd) GetIsOnline() bool {
	if o == nil || IsNil(o.IsOnline) {
		var ret bool
		return ret
	}
	return *o.IsOnline
}

// GetIsOnlineOk returns a tuple with the IsOnline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRefundAdd) GetIsOnlineOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOnline) {
		return nil, false
	}
	return o.IsOnline, true
}

// HasIsOnline returns a boolean if a field has been set.
func (o *OrderRefundAdd) HasIsOnline() bool {
	if o != nil && !IsNil(o.IsOnline) {
		return true
	}

	return false
}

// SetIsOnline gets a reference to the given bool and assigns it to the IsOnline field.
func (o *OrderRefundAdd) SetIsOnline(v bool) {
	o.IsOnline = &v
}

func (o OrderRefundAdd) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderRefundAdd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrderId) {
		toSerialize["order_id"] = o.OrderId
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.TotalPrice) {
		toSerialize["total_price"] = o.TotalPrice
	}
	if !IsNil(o.ShippingPrice) {
		toSerialize["shipping_price"] = o.ShippingPrice
	}
	if !IsNil(o.FeePrice) {
		toSerialize["fee_price"] = o.FeePrice
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.ItemRestock) {
		toSerialize["item_restock"] = o.ItemRestock
	}
	if !IsNil(o.SendNotifications) {
		toSerialize["send_notifications"] = o.SendNotifications
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.IsOnline) {
		toSerialize["is_online"] = o.IsOnline
	}
	return toSerialize, nil
}

type NullableOrderRefundAdd struct {
	value *OrderRefundAdd
	isSet bool
}

func (v NullableOrderRefundAdd) Get() *OrderRefundAdd {
	return v.value
}

func (v *NullableOrderRefundAdd) Set(val *OrderRefundAdd) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderRefundAdd) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderRefundAdd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderRefundAdd(val *OrderRefundAdd) *NullableOrderRefundAdd {
	return &NullableOrderRefundAdd{value: val, isSet: true}
}

func (v NullableOrderRefundAdd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderRefundAdd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


