/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CartCouponAdd type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CartCouponAdd{}

// CartCouponAdd struct for CartCouponAdd
type CartCouponAdd struct {
	// Coupon code
	Code string `json:"code"`
	// Coupon discount type
	ActionType string `json:"action_type"`
	// Defines where discount should be applied
	ActionApplyTo string `json:"action_apply_to"`
	// Specify how discount should be applied. If scope=matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.
	ActionScope string `json:"action_scope"`
	// Defines the discount amount value.
	ActionAmount float32 `json:"action_amount"`
	// Entity codes
	Codes []string `json:"codes,omitempty"`
	// Coupon name
	Name *string `json:"name,omitempty"`
	// Date start
	DateStart *string `json:"date_start,omitempty"`
	// Defines when discount code will be expired.
	DateEnd *string `json:"date_end,omitempty"`
	// Usage limit for coupon.
	UsageLimit *int32 `json:"usage_limit,omitempty"`
	// Usage limit per customer.
	UsageLimitPerCustomer *int32 `json:"usage_limit_per_customer,omitempty"`
	// Defines entity for action condition.
	ActionConditionEntity *string `json:"action_condition_entity,omitempty"`
	// Defines entity attribute code for action condition.
	ActionConditionKey *string `json:"action_condition_key,omitempty"`
	// Defines condition operator.
	ActionConditionOperator *string `json:"action_condition_operator,omitempty"`
	// Defines condition attribute value/s. Can be comma separated string.
	ActionConditionValue *string `json:"action_condition_value,omitempty"`
	// Indicates whether to apply a discount for taxes.
	IncludeTax *bool `json:"include_tax,omitempty"`
	// Store Id
	StoreId *string `json:"store_id,omitempty"`
	// Defines whether the coupon provides free cash on delivery
	FreeCashOnDelivery *bool `json:"free_cash_on_delivery,omitempty"`
}

type _CartCouponAdd CartCouponAdd

// NewCartCouponAdd instantiates a new CartCouponAdd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCartCouponAdd(code string, actionType string, actionApplyTo string, actionScope string, actionAmount float32) *CartCouponAdd {
	this := CartCouponAdd{}
	this.Code = code
	this.ActionType = actionType
	this.ActionApplyTo = actionApplyTo
	this.ActionScope = actionScope
	this.ActionAmount = actionAmount
	var dateStart string = "now"
	this.DateStart = &dateStart
	var includeTax bool = false
	this.IncludeTax = &includeTax
	return &this
}

// NewCartCouponAddWithDefaults instantiates a new CartCouponAdd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCartCouponAddWithDefaults() *CartCouponAdd {
	this := CartCouponAdd{}
	var dateStart string = "now"
	this.DateStart = &dateStart
	var includeTax bool = false
	this.IncludeTax = &includeTax
	return &this
}

// GetCode returns the Code field value
func (o *CartCouponAdd) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *CartCouponAdd) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *CartCouponAdd) SetCode(v string) {
	o.Code = v
}

// GetActionType returns the ActionType field value
func (o *CartCouponAdd) GetActionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value
// and a boolean to check if the value has been set.
func (o *CartCouponAdd) GetActionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionType, true
}

// SetActionType sets field value
func (o *CartCouponAdd) SetActionType(v string) {
	o.ActionType = v
}

// GetActionApplyTo returns the ActionApplyTo field value
func (o *CartCouponAdd) GetActionApplyTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActionApplyTo
}

// GetActionApplyToOk returns a tuple with the ActionApplyTo field value
// and a boolean to check if the value has been set.
func (o *CartCouponAdd) GetActionApplyToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionApplyTo, true
}

// SetActionApplyTo sets field value
func (o *CartCouponAdd) SetActionApplyTo(v string) {
	o.ActionApplyTo = v
}

// GetActionScope returns the ActionScope field value
func (o *CartCouponAdd) GetActionScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActionScope
}

// GetActionScopeOk returns a tuple with the ActionScope field value
// and a boolean to check if the value has been set.
func (o *CartCouponAdd) GetActionScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionScope, true
}

// SetActionScope sets field value
func (o *CartCouponAdd) SetActionScope(v string) {
	o.ActionScope = v
}

// GetActionAmount returns the ActionAmount field value
func (o *CartCouponAdd) GetActionAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ActionAmount
}

// GetActionAmountOk returns a tuple with the ActionAmount field value
// and a boolean to check if the value has been set.
func (o *CartCouponAdd) GetActionAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionAmount, true
}

// SetActionAmount sets field value
func (o *CartCouponAdd) SetActionAmount(v float32) {
	o.ActionAmount = v
}

// GetCodes returns the Codes field value if set, zero value otherwise.
func (o *CartCouponAdd) GetCodes() []string {
	if o == nil || IsNil(o.Codes) {
		var ret []string
		return ret
	}
	return o.Codes
}

// GetCodesOk returns a tuple with the Codes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartCouponAdd) GetCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.Codes) {
		return nil, false
	}
	return o.Codes, true
}

// HasCodes returns a boolean if a field has been set.
func (o *CartCouponAdd) HasCodes() bool {
	if o != nil && !IsNil(o.Codes) {
		return true
	}

	return false
}

// SetCodes gets a reference to the given []string and assigns it to the Codes field.
func (o *CartCouponAdd) SetCodes(v []string) {
	o.Codes = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CartCouponAdd) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartCouponAdd) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CartCouponAdd) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CartCouponAdd) SetName(v string) {
	o.Name = &v
}

// GetDateStart returns the DateStart field value if set, zero value otherwise.
func (o *CartCouponAdd) GetDateStart() string {
	if o == nil || IsNil(o.DateStart) {
		var ret string
		return ret
	}
	return *o.DateStart
}

// GetDateStartOk returns a tuple with the DateStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartCouponAdd) GetDateStartOk() (*string, bool) {
	if o == nil || IsNil(o.DateStart) {
		return nil, false
	}
	return o.DateStart, true
}

// HasDateStart returns a boolean if a field has been set.
func (o *CartCouponAdd) HasDateStart() bool {
	if o != nil && !IsNil(o.DateStart) {
		return true
	}

	return false
}

// SetDateStart gets a reference to the given string and assigns it to the DateStart field.
func (o *CartCouponAdd) SetDateStart(v string) {
	o.DateStart = &v
}

// GetDateEnd returns the DateEnd field value if set, zero value otherwise.
func (o *CartCouponAdd) GetDateEnd() string {
	if o == nil || IsNil(o.DateEnd) {
		var ret string
		return ret
	}
	return *o.DateEnd
}

// GetDateEndOk returns a tuple with the DateEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartCouponAdd) GetDateEndOk() (*string, bool) {
	if o == nil || IsNil(o.DateEnd) {
		return nil, false
	}
	return o.DateEnd, true
}

// HasDateEnd returns a boolean if a field has been set.
func (o *CartCouponAdd) HasDateEnd() bool {
	if o != nil && !IsNil(o.DateEnd) {
		return true
	}

	return false
}

// SetDateEnd gets a reference to the given string and assigns it to the DateEnd field.
func (o *CartCouponAdd) SetDateEnd(v string) {
	o.DateEnd = &v
}

// GetUsageLimit returns the UsageLimit field value if set, zero value otherwise.
func (o *CartCouponAdd) GetUsageLimit() int32 {
	if o == nil || IsNil(o.UsageLimit) {
		var ret int32
		return ret
	}
	return *o.UsageLimit
}

// GetUsageLimitOk returns a tuple with the UsageLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartCouponAdd) GetUsageLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.UsageLimit) {
		return nil, false
	}
	return o.UsageLimit, true
}

// HasUsageLimit returns a boolean if a field has been set.
func (o *CartCouponAdd) HasUsageLimit() bool {
	if o != nil && !IsNil(o.UsageLimit) {
		return true
	}

	return false
}

// SetUsageLimit gets a reference to the given int32 and assigns it to the UsageLimit field.
func (o *CartCouponAdd) SetUsageLimit(v int32) {
	o.UsageLimit = &v
}

// GetUsageLimitPerCustomer returns the UsageLimitPerCustomer field value if set, zero value otherwise.
func (o *CartCouponAdd) GetUsageLimitPerCustomer() int32 {
	if o == nil || IsNil(o.UsageLimitPerCustomer) {
		var ret int32
		return ret
	}
	return *o.UsageLimitPerCustomer
}

// GetUsageLimitPerCustomerOk returns a tuple with the UsageLimitPerCustomer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartCouponAdd) GetUsageLimitPerCustomerOk() (*int32, bool) {
	if o == nil || IsNil(o.UsageLimitPerCustomer) {
		return nil, false
	}
	return o.UsageLimitPerCustomer, true
}

// HasUsageLimitPerCustomer returns a boolean if a field has been set.
func (o *CartCouponAdd) HasUsageLimitPerCustomer() bool {
	if o != nil && !IsNil(o.UsageLimitPerCustomer) {
		return true
	}

	return false
}

// SetUsageLimitPerCustomer gets a reference to the given int32 and assigns it to the UsageLimitPerCustomer field.
func (o *CartCouponAdd) SetUsageLimitPerCustomer(v int32) {
	o.UsageLimitPerCustomer = &v
}

// GetActionConditionEntity returns the ActionConditionEntity field value if set, zero value otherwise.
func (o *CartCouponAdd) GetActionConditionEntity() string {
	if o == nil || IsNil(o.ActionConditionEntity) {
		var ret string
		return ret
	}
	return *o.ActionConditionEntity
}

// GetActionConditionEntityOk returns a tuple with the ActionConditionEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartCouponAdd) GetActionConditionEntityOk() (*string, bool) {
	if o == nil || IsNil(o.ActionConditionEntity) {
		return nil, false
	}
	return o.ActionConditionEntity, true
}

// HasActionConditionEntity returns a boolean if a field has been set.
func (o *CartCouponAdd) HasActionConditionEntity() bool {
	if o != nil && !IsNil(o.ActionConditionEntity) {
		return true
	}

	return false
}

// SetActionConditionEntity gets a reference to the given string and assigns it to the ActionConditionEntity field.
func (o *CartCouponAdd) SetActionConditionEntity(v string) {
	o.ActionConditionEntity = &v
}

// GetActionConditionKey returns the ActionConditionKey field value if set, zero value otherwise.
func (o *CartCouponAdd) GetActionConditionKey() string {
	if o == nil || IsNil(o.ActionConditionKey) {
		var ret string
		return ret
	}
	return *o.ActionConditionKey
}

// GetActionConditionKeyOk returns a tuple with the ActionConditionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartCouponAdd) GetActionConditionKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ActionConditionKey) {
		return nil, false
	}
	return o.ActionConditionKey, true
}

// HasActionConditionKey returns a boolean if a field has been set.
func (o *CartCouponAdd) HasActionConditionKey() bool {
	if o != nil && !IsNil(o.ActionConditionKey) {
		return true
	}

	return false
}

// SetActionConditionKey gets a reference to the given string and assigns it to the ActionConditionKey field.
func (o *CartCouponAdd) SetActionConditionKey(v string) {
	o.ActionConditionKey = &v
}

// GetActionConditionOperator returns the ActionConditionOperator field value if set, zero value otherwise.
func (o *CartCouponAdd) GetActionConditionOperator() string {
	if o == nil || IsNil(o.ActionConditionOperator) {
		var ret string
		return ret
	}
	return *o.ActionConditionOperator
}

// GetActionConditionOperatorOk returns a tuple with the ActionConditionOperator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartCouponAdd) GetActionConditionOperatorOk() (*string, bool) {
	if o == nil || IsNil(o.ActionConditionOperator) {
		return nil, false
	}
	return o.ActionConditionOperator, true
}

// HasActionConditionOperator returns a boolean if a field has been set.
func (o *CartCouponAdd) HasActionConditionOperator() bool {
	if o != nil && !IsNil(o.ActionConditionOperator) {
		return true
	}

	return false
}

// SetActionConditionOperator gets a reference to the given string and assigns it to the ActionConditionOperator field.
func (o *CartCouponAdd) SetActionConditionOperator(v string) {
	o.ActionConditionOperator = &v
}

// GetActionConditionValue returns the ActionConditionValue field value if set, zero value otherwise.
func (o *CartCouponAdd) GetActionConditionValue() string {
	if o == nil || IsNil(o.ActionConditionValue) {
		var ret string
		return ret
	}
	return *o.ActionConditionValue
}

// GetActionConditionValueOk returns a tuple with the ActionConditionValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartCouponAdd) GetActionConditionValueOk() (*string, bool) {
	if o == nil || IsNil(o.ActionConditionValue) {
		return nil, false
	}
	return o.ActionConditionValue, true
}

// HasActionConditionValue returns a boolean if a field has been set.
func (o *CartCouponAdd) HasActionConditionValue() bool {
	if o != nil && !IsNil(o.ActionConditionValue) {
		return true
	}

	return false
}

// SetActionConditionValue gets a reference to the given string and assigns it to the ActionConditionValue field.
func (o *CartCouponAdd) SetActionConditionValue(v string) {
	o.ActionConditionValue = &v
}

// GetIncludeTax returns the IncludeTax field value if set, zero value otherwise.
func (o *CartCouponAdd) GetIncludeTax() bool {
	if o == nil || IsNil(o.IncludeTax) {
		var ret bool
		return ret
	}
	return *o.IncludeTax
}

// GetIncludeTaxOk returns a tuple with the IncludeTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartCouponAdd) GetIncludeTaxOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeTax) {
		return nil, false
	}
	return o.IncludeTax, true
}

// HasIncludeTax returns a boolean if a field has been set.
func (o *CartCouponAdd) HasIncludeTax() bool {
	if o != nil && !IsNil(o.IncludeTax) {
		return true
	}

	return false
}

// SetIncludeTax gets a reference to the given bool and assigns it to the IncludeTax field.
func (o *CartCouponAdd) SetIncludeTax(v bool) {
	o.IncludeTax = &v
}

// GetStoreId returns the StoreId field value if set, zero value otherwise.
func (o *CartCouponAdd) GetStoreId() string {
	if o == nil || IsNil(o.StoreId) {
		var ret string
		return ret
	}
	return *o.StoreId
}

// GetStoreIdOk returns a tuple with the StoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartCouponAdd) GetStoreIdOk() (*string, bool) {
	if o == nil || IsNil(o.StoreId) {
		return nil, false
	}
	return o.StoreId, true
}

// HasStoreId returns a boolean if a field has been set.
func (o *CartCouponAdd) HasStoreId() bool {
	if o != nil && !IsNil(o.StoreId) {
		return true
	}

	return false
}

// SetStoreId gets a reference to the given string and assigns it to the StoreId field.
func (o *CartCouponAdd) SetStoreId(v string) {
	o.StoreId = &v
}

// GetFreeCashOnDelivery returns the FreeCashOnDelivery field value if set, zero value otherwise.
func (o *CartCouponAdd) GetFreeCashOnDelivery() bool {
	if o == nil || IsNil(o.FreeCashOnDelivery) {
		var ret bool
		return ret
	}
	return *o.FreeCashOnDelivery
}

// GetFreeCashOnDeliveryOk returns a tuple with the FreeCashOnDelivery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartCouponAdd) GetFreeCashOnDeliveryOk() (*bool, bool) {
	if o == nil || IsNil(o.FreeCashOnDelivery) {
		return nil, false
	}
	return o.FreeCashOnDelivery, true
}

// HasFreeCashOnDelivery returns a boolean if a field has been set.
func (o *CartCouponAdd) HasFreeCashOnDelivery() bool {
	if o != nil && !IsNil(o.FreeCashOnDelivery) {
		return true
	}

	return false
}

// SetFreeCashOnDelivery gets a reference to the given bool and assigns it to the FreeCashOnDelivery field.
func (o *CartCouponAdd) SetFreeCashOnDelivery(v bool) {
	o.FreeCashOnDelivery = &v
}

func (o CartCouponAdd) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CartCouponAdd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["action_type"] = o.ActionType
	toSerialize["action_apply_to"] = o.ActionApplyTo
	toSerialize["action_scope"] = o.ActionScope
	toSerialize["action_amount"] = o.ActionAmount
	if !IsNil(o.Codes) {
		toSerialize["codes"] = o.Codes
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DateStart) {
		toSerialize["date_start"] = o.DateStart
	}
	if !IsNil(o.DateEnd) {
		toSerialize["date_end"] = o.DateEnd
	}
	if !IsNil(o.UsageLimit) {
		toSerialize["usage_limit"] = o.UsageLimit
	}
	if !IsNil(o.UsageLimitPerCustomer) {
		toSerialize["usage_limit_per_customer"] = o.UsageLimitPerCustomer
	}
	if !IsNil(o.ActionConditionEntity) {
		toSerialize["action_condition_entity"] = o.ActionConditionEntity
	}
	if !IsNil(o.ActionConditionKey) {
		toSerialize["action_condition_key"] = o.ActionConditionKey
	}
	if !IsNil(o.ActionConditionOperator) {
		toSerialize["action_condition_operator"] = o.ActionConditionOperator
	}
	if !IsNil(o.ActionConditionValue) {
		toSerialize["action_condition_value"] = o.ActionConditionValue
	}
	if !IsNil(o.IncludeTax) {
		toSerialize["include_tax"] = o.IncludeTax
	}
	if !IsNil(o.StoreId) {
		toSerialize["store_id"] = o.StoreId
	}
	if !IsNil(o.FreeCashOnDelivery) {
		toSerialize["free_cash_on_delivery"] = o.FreeCashOnDelivery
	}
	return toSerialize, nil
}

func (o *CartCouponAdd) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"action_type",
		"action_apply_to",
		"action_scope",
		"action_amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCartCouponAdd := _CartCouponAdd{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCartCouponAdd)

	if err != nil {
		return err
	}

	*o = CartCouponAdd(varCartCouponAdd)

	return err
}

type NullableCartCouponAdd struct {
	value *CartCouponAdd
	isSet bool
}

func (v NullableCartCouponAdd) Get() *CartCouponAdd {
	return v.value
}

func (v *NullableCartCouponAdd) Set(val *CartCouponAdd) {
	v.value = val
	v.isSet = true
}

func (v NullableCartCouponAdd) IsSet() bool {
	return v.isSet
}

func (v *NullableCartCouponAdd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCartCouponAdd(val *CartCouponAdd) *NullableCartCouponAdd {
	return &NullableCartCouponAdd{value: val, isSet: true}
}

func (v NullableCartCouponAdd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCartCouponAdd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


