/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BatchJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchJob{}

// BatchJob struct for BatchJob
type BatchJob struct {
	Id *string `json:"id,omitempty"`
	Method *string `json:"method,omitempty"`
	Status *string `json:"status,omitempty"`
	CreatedTime *A2CDateTime `json:"created_time,omitempty"`
	ProcessedTime NullableA2CDateTime `json:"processed_time,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewBatchJob instantiates a new BatchJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchJob() *BatchJob {
	this := BatchJob{}
	return &this
}

// NewBatchJobWithDefaults instantiates a new BatchJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchJobWithDefaults() *BatchJob {
	this := BatchJob{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BatchJob) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchJob) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BatchJob) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BatchJob) SetId(v string) {
	o.Id = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *BatchJob) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchJob) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *BatchJob) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *BatchJob) SetMethod(v string) {
	o.Method = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BatchJob) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchJob) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BatchJob) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *BatchJob) SetStatus(v string) {
	o.Status = &v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *BatchJob) GetCreatedTime() A2CDateTime {
	if o == nil || IsNil(o.CreatedTime) {
		var ret A2CDateTime
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchJob) GetCreatedTimeOk() (*A2CDateTime, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *BatchJob) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given A2CDateTime and assigns it to the CreatedTime field.
func (o *BatchJob) SetCreatedTime(v A2CDateTime) {
	o.CreatedTime = &v
}

// GetProcessedTime returns the ProcessedTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchJob) GetProcessedTime() A2CDateTime {
	if o == nil || IsNil(o.ProcessedTime.Get()) {
		var ret A2CDateTime
		return ret
	}
	return *o.ProcessedTime.Get()
}

// GetProcessedTimeOk returns a tuple with the ProcessedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchJob) GetProcessedTimeOk() (*A2CDateTime, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessedTime.Get(), o.ProcessedTime.IsSet()
}

// HasProcessedTime returns a boolean if a field has been set.
func (o *BatchJob) HasProcessedTime() bool {
	if o != nil && o.ProcessedTime.IsSet() {
		return true
	}

	return false
}

// SetProcessedTime gets a reference to the given NullableA2CDateTime and assigns it to the ProcessedTime field.
func (o *BatchJob) SetProcessedTime(v A2CDateTime) {
	o.ProcessedTime.Set(&v)
}
// SetProcessedTimeNil sets the value for ProcessedTime to be an explicit nil
func (o *BatchJob) SetProcessedTimeNil() {
	o.ProcessedTime.Set(nil)
}

// UnsetProcessedTime ensures that no value is present for ProcessedTime, not even an explicit nil
func (o *BatchJob) UnsetProcessedTime() {
	o.ProcessedTime.Unset()
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchJob) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchJob) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *BatchJob) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *BatchJob) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchJob) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchJob) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *BatchJob) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *BatchJob) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o BatchJob) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if o.ProcessedTime.IsSet() {
		toSerialize["processed_time"] = o.ProcessedTime.Get()
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableBatchJob struct {
	value *BatchJob
	isSet bool
}

func (v NullableBatchJob) Get() *BatchJob {
	return v.value
}

func (v *NullableBatchJob) Set(val *BatchJob) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchJob) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchJob(val *BatchJob) *NullableBatchJob {
	return &NullableBatchJob{value: val, isSet: true}
}

func (v NullableBatchJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


