/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProductVariantUpdateOptionsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductVariantUpdateOptionsInner{}

// ProductVariantUpdateOptionsInner struct for ProductVariantUpdateOptionsInner
type ProductVariantUpdateOptionsInner struct {
	OptionName *string `json:"option_name,omitempty"`
	OptionValue *string `json:"option_value,omitempty"`
}

// NewProductVariantUpdateOptionsInner instantiates a new ProductVariantUpdateOptionsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductVariantUpdateOptionsInner() *ProductVariantUpdateOptionsInner {
	this := ProductVariantUpdateOptionsInner{}
	return &this
}

// NewProductVariantUpdateOptionsInnerWithDefaults instantiates a new ProductVariantUpdateOptionsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductVariantUpdateOptionsInnerWithDefaults() *ProductVariantUpdateOptionsInner {
	this := ProductVariantUpdateOptionsInner{}
	return &this
}

// GetOptionName returns the OptionName field value if set, zero value otherwise.
func (o *ProductVariantUpdateOptionsInner) GetOptionName() string {
	if o == nil || IsNil(o.OptionName) {
		var ret string
		return ret
	}
	return *o.OptionName
}

// GetOptionNameOk returns a tuple with the OptionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdateOptionsInner) GetOptionNameOk() (*string, bool) {
	if o == nil || IsNil(o.OptionName) {
		return nil, false
	}
	return o.OptionName, true
}

// HasOptionName returns a boolean if a field has been set.
func (o *ProductVariantUpdateOptionsInner) HasOptionName() bool {
	if o != nil && !IsNil(o.OptionName) {
		return true
	}

	return false
}

// SetOptionName gets a reference to the given string and assigns it to the OptionName field.
func (o *ProductVariantUpdateOptionsInner) SetOptionName(v string) {
	o.OptionName = &v
}

// GetOptionValue returns the OptionValue field value if set, zero value otherwise.
func (o *ProductVariantUpdateOptionsInner) GetOptionValue() string {
	if o == nil || IsNil(o.OptionValue) {
		var ret string
		return ret
	}
	return *o.OptionValue
}

// GetOptionValueOk returns a tuple with the OptionValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdateOptionsInner) GetOptionValueOk() (*string, bool) {
	if o == nil || IsNil(o.OptionValue) {
		return nil, false
	}
	return o.OptionValue, true
}

// HasOptionValue returns a boolean if a field has been set.
func (o *ProductVariantUpdateOptionsInner) HasOptionValue() bool {
	if o != nil && !IsNil(o.OptionValue) {
		return true
	}

	return false
}

// SetOptionValue gets a reference to the given string and assigns it to the OptionValue field.
func (o *ProductVariantUpdateOptionsInner) SetOptionValue(v string) {
	o.OptionValue = &v
}

func (o ProductVariantUpdateOptionsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductVariantUpdateOptionsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OptionName) {
		toSerialize["option_name"] = o.OptionName
	}
	if !IsNil(o.OptionValue) {
		toSerialize["option_value"] = o.OptionValue
	}
	return toSerialize, nil
}

type NullableProductVariantUpdateOptionsInner struct {
	value *ProductVariantUpdateOptionsInner
	isSet bool
}

func (v NullableProductVariantUpdateOptionsInner) Get() *ProductVariantUpdateOptionsInner {
	return v.value
}

func (v *NullableProductVariantUpdateOptionsInner) Set(val *ProductVariantUpdateOptionsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableProductVariantUpdateOptionsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableProductVariantUpdateOptionsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductVariantUpdateOptionsInner(val *ProductVariantUpdateOptionsInner) *NullableProductVariantUpdateOptionsInner {
	return &NullableProductVariantUpdateOptionsInner{value: val, isSet: true}
}

func (v NullableProductVariantUpdateOptionsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductVariantUpdateOptionsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


