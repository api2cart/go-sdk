/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CartShippingMethod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CartShippingMethod{}

// CartShippingMethod struct for CartShippingMethod
type CartShippingMethod struct {
	Name *string `json:"name,omitempty"`
	HandlingFee *string `json:"handling_fee,omitempty"`
	HandlingEnabled *string `json:"handling_enabled,omitempty"`
	HandlingType *string `json:"handling_type,omitempty"`
	DefaultPrice *string `json:"default_price,omitempty"`
	DefaultPriceType *string `json:"default_price_type,omitempty"`
	Type *string `json:"type,omitempty"`
	Enabled *string `json:"enabled,omitempty"`
	MinOrderAmount *string `json:"min_order_amount,omitempty"`
	Rates []CartShippingMethodRate `json:"rates,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewCartShippingMethod instantiates a new CartShippingMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCartShippingMethod() *CartShippingMethod {
	this := CartShippingMethod{}
	return &this
}

// NewCartShippingMethodWithDefaults instantiates a new CartShippingMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCartShippingMethodWithDefaults() *CartShippingMethod {
	this := CartShippingMethod{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CartShippingMethod) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartShippingMethod) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CartShippingMethod) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CartShippingMethod) SetName(v string) {
	o.Name = &v
}

// GetHandlingFee returns the HandlingFee field value if set, zero value otherwise.
func (o *CartShippingMethod) GetHandlingFee() string {
	if o == nil || IsNil(o.HandlingFee) {
		var ret string
		return ret
	}
	return *o.HandlingFee
}

// GetHandlingFeeOk returns a tuple with the HandlingFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartShippingMethod) GetHandlingFeeOk() (*string, bool) {
	if o == nil || IsNil(o.HandlingFee) {
		return nil, false
	}
	return o.HandlingFee, true
}

// HasHandlingFee returns a boolean if a field has been set.
func (o *CartShippingMethod) HasHandlingFee() bool {
	if o != nil && !IsNil(o.HandlingFee) {
		return true
	}

	return false
}

// SetHandlingFee gets a reference to the given string and assigns it to the HandlingFee field.
func (o *CartShippingMethod) SetHandlingFee(v string) {
	o.HandlingFee = &v
}

// GetHandlingEnabled returns the HandlingEnabled field value if set, zero value otherwise.
func (o *CartShippingMethod) GetHandlingEnabled() string {
	if o == nil || IsNil(o.HandlingEnabled) {
		var ret string
		return ret
	}
	return *o.HandlingEnabled
}

// GetHandlingEnabledOk returns a tuple with the HandlingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartShippingMethod) GetHandlingEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.HandlingEnabled) {
		return nil, false
	}
	return o.HandlingEnabled, true
}

// HasHandlingEnabled returns a boolean if a field has been set.
func (o *CartShippingMethod) HasHandlingEnabled() bool {
	if o != nil && !IsNil(o.HandlingEnabled) {
		return true
	}

	return false
}

// SetHandlingEnabled gets a reference to the given string and assigns it to the HandlingEnabled field.
func (o *CartShippingMethod) SetHandlingEnabled(v string) {
	o.HandlingEnabled = &v
}

// GetHandlingType returns the HandlingType field value if set, zero value otherwise.
func (o *CartShippingMethod) GetHandlingType() string {
	if o == nil || IsNil(o.HandlingType) {
		var ret string
		return ret
	}
	return *o.HandlingType
}

// GetHandlingTypeOk returns a tuple with the HandlingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartShippingMethod) GetHandlingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.HandlingType) {
		return nil, false
	}
	return o.HandlingType, true
}

// HasHandlingType returns a boolean if a field has been set.
func (o *CartShippingMethod) HasHandlingType() bool {
	if o != nil && !IsNil(o.HandlingType) {
		return true
	}

	return false
}

// SetHandlingType gets a reference to the given string and assigns it to the HandlingType field.
func (o *CartShippingMethod) SetHandlingType(v string) {
	o.HandlingType = &v
}

// GetDefaultPrice returns the DefaultPrice field value if set, zero value otherwise.
func (o *CartShippingMethod) GetDefaultPrice() string {
	if o == nil || IsNil(o.DefaultPrice) {
		var ret string
		return ret
	}
	return *o.DefaultPrice
}

// GetDefaultPriceOk returns a tuple with the DefaultPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartShippingMethod) GetDefaultPriceOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultPrice) {
		return nil, false
	}
	return o.DefaultPrice, true
}

// HasDefaultPrice returns a boolean if a field has been set.
func (o *CartShippingMethod) HasDefaultPrice() bool {
	if o != nil && !IsNil(o.DefaultPrice) {
		return true
	}

	return false
}

// SetDefaultPrice gets a reference to the given string and assigns it to the DefaultPrice field.
func (o *CartShippingMethod) SetDefaultPrice(v string) {
	o.DefaultPrice = &v
}

// GetDefaultPriceType returns the DefaultPriceType field value if set, zero value otherwise.
func (o *CartShippingMethod) GetDefaultPriceType() string {
	if o == nil || IsNil(o.DefaultPriceType) {
		var ret string
		return ret
	}
	return *o.DefaultPriceType
}

// GetDefaultPriceTypeOk returns a tuple with the DefaultPriceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartShippingMethod) GetDefaultPriceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultPriceType) {
		return nil, false
	}
	return o.DefaultPriceType, true
}

// HasDefaultPriceType returns a boolean if a field has been set.
func (o *CartShippingMethod) HasDefaultPriceType() bool {
	if o != nil && !IsNil(o.DefaultPriceType) {
		return true
	}

	return false
}

// SetDefaultPriceType gets a reference to the given string and assigns it to the DefaultPriceType field.
func (o *CartShippingMethod) SetDefaultPriceType(v string) {
	o.DefaultPriceType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CartShippingMethod) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartShippingMethod) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CartShippingMethod) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CartShippingMethod) SetType(v string) {
	o.Type = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CartShippingMethod) GetEnabled() string {
	if o == nil || IsNil(o.Enabled) {
		var ret string
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartShippingMethod) GetEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CartShippingMethod) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given string and assigns it to the Enabled field.
func (o *CartShippingMethod) SetEnabled(v string) {
	o.Enabled = &v
}

// GetMinOrderAmount returns the MinOrderAmount field value if set, zero value otherwise.
func (o *CartShippingMethod) GetMinOrderAmount() string {
	if o == nil || IsNil(o.MinOrderAmount) {
		var ret string
		return ret
	}
	return *o.MinOrderAmount
}

// GetMinOrderAmountOk returns a tuple with the MinOrderAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartShippingMethod) GetMinOrderAmountOk() (*string, bool) {
	if o == nil || IsNil(o.MinOrderAmount) {
		return nil, false
	}
	return o.MinOrderAmount, true
}

// HasMinOrderAmount returns a boolean if a field has been set.
func (o *CartShippingMethod) HasMinOrderAmount() bool {
	if o != nil && !IsNil(o.MinOrderAmount) {
		return true
	}

	return false
}

// SetMinOrderAmount gets a reference to the given string and assigns it to the MinOrderAmount field.
func (o *CartShippingMethod) SetMinOrderAmount(v string) {
	o.MinOrderAmount = &v
}

// GetRates returns the Rates field value if set, zero value otherwise.
func (o *CartShippingMethod) GetRates() []CartShippingMethodRate {
	if o == nil || IsNil(o.Rates) {
		var ret []CartShippingMethodRate
		return ret
	}
	return o.Rates
}

// GetRatesOk returns a tuple with the Rates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartShippingMethod) GetRatesOk() ([]CartShippingMethodRate, bool) {
	if o == nil || IsNil(o.Rates) {
		return nil, false
	}
	return o.Rates, true
}

// HasRates returns a boolean if a field has been set.
func (o *CartShippingMethod) HasRates() bool {
	if o != nil && !IsNil(o.Rates) {
		return true
	}

	return false
}

// SetRates gets a reference to the given []CartShippingMethodRate and assigns it to the Rates field.
func (o *CartShippingMethod) SetRates(v []CartShippingMethodRate) {
	o.Rates = v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise.
func (o *CartShippingMethod) GetAdditionalFields() map[string]interface{} {
	if o == nil || IsNil(o.AdditionalFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartShippingMethod) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *CartShippingMethod) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *CartShippingMethod) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *CartShippingMethod) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartShippingMethod) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *CartShippingMethod) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *CartShippingMethod) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o CartShippingMethod) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CartShippingMethod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.HandlingFee) {
		toSerialize["handling_fee"] = o.HandlingFee
	}
	if !IsNil(o.HandlingEnabled) {
		toSerialize["handling_enabled"] = o.HandlingEnabled
	}
	if !IsNil(o.HandlingType) {
		toSerialize["handling_type"] = o.HandlingType
	}
	if !IsNil(o.DefaultPrice) {
		toSerialize["default_price"] = o.DefaultPrice
	}
	if !IsNil(o.DefaultPriceType) {
		toSerialize["default_price_type"] = o.DefaultPriceType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.MinOrderAmount) {
		toSerialize["min_order_amount"] = o.MinOrderAmount
	}
	if !IsNil(o.Rates) {
		toSerialize["rates"] = o.Rates
	}
	if !IsNil(o.AdditionalFields) {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableCartShippingMethod struct {
	value *CartShippingMethod
	isSet bool
}

func (v NullableCartShippingMethod) Get() *CartShippingMethod {
	return v.value
}

func (v *NullableCartShippingMethod) Set(val *CartShippingMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableCartShippingMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableCartShippingMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCartShippingMethod(val *CartShippingMethod) *NullableCartShippingMethod {
	return &NullableCartShippingMethod{value: val, isSet: true}
}

func (v NullableCartShippingMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCartShippingMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


