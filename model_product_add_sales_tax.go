/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProductAddSalesTax type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductAddSalesTax{}

// ProductAddSalesTax Percent of an item's price to be charged as the sales tax for the order. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">sales_tax[<b>tax_percent</b>] = decimal (##.###)</br>sales_tax[<b>tax_state</b>] = string</br>sales_tax[<b>shipping_inc_in_tax</b>] = bool</br></code></div></div>
type ProductAddSalesTax struct {
	TaxPercent *float32 `json:"tax_percent,omitempty"`
	TaxState *string `json:"tax_state,omitempty"`
	ShippingIncInTax *bool `json:"shipping_inc_in_tax,omitempty"`
}

// NewProductAddSalesTax instantiates a new ProductAddSalesTax object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductAddSalesTax() *ProductAddSalesTax {
	this := ProductAddSalesTax{}
	return &this
}

// NewProductAddSalesTaxWithDefaults instantiates a new ProductAddSalesTax object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductAddSalesTaxWithDefaults() *ProductAddSalesTax {
	this := ProductAddSalesTax{}
	return &this
}

// GetTaxPercent returns the TaxPercent field value if set, zero value otherwise.
func (o *ProductAddSalesTax) GetTaxPercent() float32 {
	if o == nil || IsNil(o.TaxPercent) {
		var ret float32
		return ret
	}
	return *o.TaxPercent
}

// GetTaxPercentOk returns a tuple with the TaxPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAddSalesTax) GetTaxPercentOk() (*float32, bool) {
	if o == nil || IsNil(o.TaxPercent) {
		return nil, false
	}
	return o.TaxPercent, true
}

// HasTaxPercent returns a boolean if a field has been set.
func (o *ProductAddSalesTax) HasTaxPercent() bool {
	if o != nil && !IsNil(o.TaxPercent) {
		return true
	}

	return false
}

// SetTaxPercent gets a reference to the given float32 and assigns it to the TaxPercent field.
func (o *ProductAddSalesTax) SetTaxPercent(v float32) {
	o.TaxPercent = &v
}

// GetTaxState returns the TaxState field value if set, zero value otherwise.
func (o *ProductAddSalesTax) GetTaxState() string {
	if o == nil || IsNil(o.TaxState) {
		var ret string
		return ret
	}
	return *o.TaxState
}

// GetTaxStateOk returns a tuple with the TaxState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAddSalesTax) GetTaxStateOk() (*string, bool) {
	if o == nil || IsNil(o.TaxState) {
		return nil, false
	}
	return o.TaxState, true
}

// HasTaxState returns a boolean if a field has been set.
func (o *ProductAddSalesTax) HasTaxState() bool {
	if o != nil && !IsNil(o.TaxState) {
		return true
	}

	return false
}

// SetTaxState gets a reference to the given string and assigns it to the TaxState field.
func (o *ProductAddSalesTax) SetTaxState(v string) {
	o.TaxState = &v
}

// GetShippingIncInTax returns the ShippingIncInTax field value if set, zero value otherwise.
func (o *ProductAddSalesTax) GetShippingIncInTax() bool {
	if o == nil || IsNil(o.ShippingIncInTax) {
		var ret bool
		return ret
	}
	return *o.ShippingIncInTax
}

// GetShippingIncInTaxOk returns a tuple with the ShippingIncInTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAddSalesTax) GetShippingIncInTaxOk() (*bool, bool) {
	if o == nil || IsNil(o.ShippingIncInTax) {
		return nil, false
	}
	return o.ShippingIncInTax, true
}

// HasShippingIncInTax returns a boolean if a field has been set.
func (o *ProductAddSalesTax) HasShippingIncInTax() bool {
	if o != nil && !IsNil(o.ShippingIncInTax) {
		return true
	}

	return false
}

// SetShippingIncInTax gets a reference to the given bool and assigns it to the ShippingIncInTax field.
func (o *ProductAddSalesTax) SetShippingIncInTax(v bool) {
	o.ShippingIncInTax = &v
}

func (o ProductAddSalesTax) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductAddSalesTax) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaxPercent) {
		toSerialize["tax_percent"] = o.TaxPercent
	}
	if !IsNil(o.TaxState) {
		toSerialize["tax_state"] = o.TaxState
	}
	if !IsNil(o.ShippingIncInTax) {
		toSerialize["shipping_inc_in_tax"] = o.ShippingIncInTax
	}
	return toSerialize, nil
}

type NullableProductAddSalesTax struct {
	value *ProductAddSalesTax
	isSet bool
}

func (v NullableProductAddSalesTax) Get() *ProductAddSalesTax {
	return v.value
}

func (v *NullableProductAddSalesTax) Set(val *ProductAddSalesTax) {
	v.value = val
	v.isSet = true
}

func (v NullableProductAddSalesTax) IsSet() bool {
	return v.isSet
}

func (v *NullableProductAddSalesTax) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductAddSalesTax(val *ProductAddSalesTax) *NullableProductAddSalesTax {
	return &NullableProductAddSalesTax{value: val, isSet: true}
}

func (v NullableProductAddSalesTax) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductAddSalesTax) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


