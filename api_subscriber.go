/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SubscriberAPIService SubscriberAPI service
type SubscriberAPIService service

type ApiSubscriberListRequest struct {
	ctx context.Context
	ApiService *SubscriberAPIService
	start *int32
	count *int32
	subscribed *bool
	storeId *string
	email *string
	params *string
	exclude *string
	createdFrom *string
	createdTo *string
	modifiedFrom *string
	modifiedTo *string
	pageCursor *string
	responseFields *string
}

// This parameter sets the number from which you want to get entities
func (r ApiSubscriberListRequest) Start(start int32) ApiSubscriberListRequest {
	r.start = &start
	return r
}

// This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
func (r ApiSubscriberListRequest) Count(count int32) ApiSubscriberListRequest {
	r.count = &count
	return r
}

// Filter by subscription status
func (r ApiSubscriberListRequest) Subscribed(subscribed bool) ApiSubscriberListRequest {
	r.subscribed = &subscribed
	return r
}

// Store Id
func (r ApiSubscriberListRequest) StoreId(storeId string) ApiSubscriberListRequest {
	r.storeId = &storeId
	return r
}

// Filter subscribers by email
func (r ApiSubscriberListRequest) Email(email string) ApiSubscriberListRequest {
	r.email = &email
	return r
}

// Set this parameter in order to choose which entity fields you want to retrieve
func (r ApiSubscriberListRequest) Params(params string) ApiSubscriberListRequest {
	r.params = &params
	return r
}

// Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
func (r ApiSubscriberListRequest) Exclude(exclude string) ApiSubscriberListRequest {
	r.exclude = &exclude
	return r
}

// Retrieve entities from their creation date
func (r ApiSubscriberListRequest) CreatedFrom(createdFrom string) ApiSubscriberListRequest {
	r.createdFrom = &createdFrom
	return r
}

// Retrieve entities to their creation date
func (r ApiSubscriberListRequest) CreatedTo(createdTo string) ApiSubscriberListRequest {
	r.createdTo = &createdTo
	return r
}

// Retrieve entities from their modification date
func (r ApiSubscriberListRequest) ModifiedFrom(modifiedFrom string) ApiSubscriberListRequest {
	r.modifiedFrom = &modifiedFrom
	return r
}

// Retrieve entities to their modification date
func (r ApiSubscriberListRequest) ModifiedTo(modifiedTo string) ApiSubscriberListRequest {
	r.modifiedTo = &modifiedTo
	return r
}

// Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
func (r ApiSubscriberListRequest) PageCursor(pageCursor string) ApiSubscriberListRequest {
	r.pageCursor = &pageCursor
	return r
}

// Set this parameter in order to choose which entity fields you want to retrieve
func (r ApiSubscriberListRequest) ResponseFields(responseFields string) ApiSubscriberListRequest {
	r.responseFields = &responseFields
	return r
}

func (r ApiSubscriberListRequest) Execute() (*ModelResponseSubscriberList, *http.Response, error) {
	return r.ApiService.SubscriberListExecute(r)
}

/*
SubscriberList subscriber.list

Get subscribers list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSubscriberListRequest
*/
func (a *SubscriberAPIService) SubscriberList(ctx context.Context) ApiSubscriberListRequest {
	return ApiSubscriberListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelResponseSubscriberList
func (a *SubscriberAPIService) SubscriberListExecute(r ApiSubscriberListRequest) (*ModelResponseSubscriberList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelResponseSubscriberList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriberAPIService.SubscriberList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscriber.list.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	} else {
		var defaultValue int32 = 0
		r.start = &defaultValue
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.subscribed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscribed", r.subscribed, "form", "")
	}
	if r.storeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "store_id", r.storeId, "form", "")
	}
	if r.email != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "form", "")
	}
	if r.params != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "params", r.params, "form", "")
	} else {
		var defaultValue string = "force_all"
		r.params = &defaultValue
	}
	if r.exclude != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude", r.exclude, "form", "")
	}
	if r.createdFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_from", r.createdFrom, "form", "")
	}
	if r.createdTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_to", r.createdTo, "form", "")
	}
	if r.modifiedFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_from", r.modifiedFrom, "form", "")
	}
	if r.modifiedTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_to", r.modifiedTo, "form", "")
	}
	if r.pageCursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_cursor", r.pageCursor, "form", "")
	}
	if r.responseFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "response_fields", r.responseFields, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["StoreKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-store-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
