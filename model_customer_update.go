/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CustomerUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerUpdate{}

// CustomerUpdate struct for CustomerUpdate
type CustomerUpdate struct {
	// Entity id
	Id *string `json:"id,omitempty"`
	// Customer group_id
	GroupId *string `json:"group_id,omitempty"`
	// Groups that will be assigned to a customer
	GroupIds *string `json:"group_ids,omitempty"`
	// Defines the group where the customer
	Group *string `json:"group,omitempty"`
	// Defines customer's email
	Email *string `json:"email,omitempty"`
	// Defines customer's phone number
	Phone *string `json:"phone,omitempty"`
	// Defines customer's first name
	FirstName *string `json:"first_name,omitempty"`
	// Defines customer's last name
	LastName *string `json:"last_name,omitempty"`
	// Defines customer's birthday
	BirthDay *string `json:"birth_day,omitempty"`
	// Defines whether the newsletter subscription is available for the user
	NewsLetterSubscription *bool `json:"news_letter_subscription,omitempty"`
	// Defines consents to notifications
	Consents []CustomerAddConsentsInner `json:"consents,omitempty"`
	// Customer tags
	Tags *string `json:"tags,omitempty"`
	// Defines customer's gender
	Gender *string `json:"gender,omitempty"`
	// The customer note.
	Note *string `json:"note,omitempty"`
	// Defines customer's status
	Status *string `json:"status,omitempty"`
	// Store Id
	StoreId *string `json:"store_id,omitempty"`
	Address []CustomerUpdateAddressInner `json:"address,omitempty"`
}

// NewCustomerUpdate instantiates a new CustomerUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerUpdate() *CustomerUpdate {
	this := CustomerUpdate{}
	return &this
}

// NewCustomerUpdateWithDefaults instantiates a new CustomerUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerUpdateWithDefaults() *CustomerUpdate {
	this := CustomerUpdate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustomerUpdate) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUpdate) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustomerUpdate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustomerUpdate) SetId(v string) {
	o.Id = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *CustomerUpdate) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUpdate) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *CustomerUpdate) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *CustomerUpdate) SetGroupId(v string) {
	o.GroupId = &v
}

// GetGroupIds returns the GroupIds field value if set, zero value otherwise.
func (o *CustomerUpdate) GetGroupIds() string {
	if o == nil || IsNil(o.GroupIds) {
		var ret string
		return ret
	}
	return *o.GroupIds
}

// GetGroupIdsOk returns a tuple with the GroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUpdate) GetGroupIdsOk() (*string, bool) {
	if o == nil || IsNil(o.GroupIds) {
		return nil, false
	}
	return o.GroupIds, true
}

// HasGroupIds returns a boolean if a field has been set.
func (o *CustomerUpdate) HasGroupIds() bool {
	if o != nil && !IsNil(o.GroupIds) {
		return true
	}

	return false
}

// SetGroupIds gets a reference to the given string and assigns it to the GroupIds field.
func (o *CustomerUpdate) SetGroupIds(v string) {
	o.GroupIds = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *CustomerUpdate) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUpdate) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *CustomerUpdate) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *CustomerUpdate) SetGroup(v string) {
	o.Group = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *CustomerUpdate) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUpdate) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *CustomerUpdate) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *CustomerUpdate) SetEmail(v string) {
	o.Email = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *CustomerUpdate) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUpdate) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *CustomerUpdate) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *CustomerUpdate) SetPhone(v string) {
	o.Phone = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *CustomerUpdate) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUpdate) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *CustomerUpdate) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *CustomerUpdate) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *CustomerUpdate) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUpdate) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *CustomerUpdate) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *CustomerUpdate) SetLastName(v string) {
	o.LastName = &v
}

// GetBirthDay returns the BirthDay field value if set, zero value otherwise.
func (o *CustomerUpdate) GetBirthDay() string {
	if o == nil || IsNil(o.BirthDay) {
		var ret string
		return ret
	}
	return *o.BirthDay
}

// GetBirthDayOk returns a tuple with the BirthDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUpdate) GetBirthDayOk() (*string, bool) {
	if o == nil || IsNil(o.BirthDay) {
		return nil, false
	}
	return o.BirthDay, true
}

// HasBirthDay returns a boolean if a field has been set.
func (o *CustomerUpdate) HasBirthDay() bool {
	if o != nil && !IsNil(o.BirthDay) {
		return true
	}

	return false
}

// SetBirthDay gets a reference to the given string and assigns it to the BirthDay field.
func (o *CustomerUpdate) SetBirthDay(v string) {
	o.BirthDay = &v
}

// GetNewsLetterSubscription returns the NewsLetterSubscription field value if set, zero value otherwise.
func (o *CustomerUpdate) GetNewsLetterSubscription() bool {
	if o == nil || IsNil(o.NewsLetterSubscription) {
		var ret bool
		return ret
	}
	return *o.NewsLetterSubscription
}

// GetNewsLetterSubscriptionOk returns a tuple with the NewsLetterSubscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUpdate) GetNewsLetterSubscriptionOk() (*bool, bool) {
	if o == nil || IsNil(o.NewsLetterSubscription) {
		return nil, false
	}
	return o.NewsLetterSubscription, true
}

// HasNewsLetterSubscription returns a boolean if a field has been set.
func (o *CustomerUpdate) HasNewsLetterSubscription() bool {
	if o != nil && !IsNil(o.NewsLetterSubscription) {
		return true
	}

	return false
}

// SetNewsLetterSubscription gets a reference to the given bool and assigns it to the NewsLetterSubscription field.
func (o *CustomerUpdate) SetNewsLetterSubscription(v bool) {
	o.NewsLetterSubscription = &v
}

// GetConsents returns the Consents field value if set, zero value otherwise.
func (o *CustomerUpdate) GetConsents() []CustomerAddConsentsInner {
	if o == nil || IsNil(o.Consents) {
		var ret []CustomerAddConsentsInner
		return ret
	}
	return o.Consents
}

// GetConsentsOk returns a tuple with the Consents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUpdate) GetConsentsOk() ([]CustomerAddConsentsInner, bool) {
	if o == nil || IsNil(o.Consents) {
		return nil, false
	}
	return o.Consents, true
}

// HasConsents returns a boolean if a field has been set.
func (o *CustomerUpdate) HasConsents() bool {
	if o != nil && !IsNil(o.Consents) {
		return true
	}

	return false
}

// SetConsents gets a reference to the given []CustomerAddConsentsInner and assigns it to the Consents field.
func (o *CustomerUpdate) SetConsents(v []CustomerAddConsentsInner) {
	o.Consents = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CustomerUpdate) GetTags() string {
	if o == nil || IsNil(o.Tags) {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUpdate) GetTagsOk() (*string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CustomerUpdate) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *CustomerUpdate) SetTags(v string) {
	o.Tags = &v
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *CustomerUpdate) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUpdate) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *CustomerUpdate) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
func (o *CustomerUpdate) SetGender(v string) {
	o.Gender = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *CustomerUpdate) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUpdate) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *CustomerUpdate) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *CustomerUpdate) SetNote(v string) {
	o.Note = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CustomerUpdate) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUpdate) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CustomerUpdate) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CustomerUpdate) SetStatus(v string) {
	o.Status = &v
}

// GetStoreId returns the StoreId field value if set, zero value otherwise.
func (o *CustomerUpdate) GetStoreId() string {
	if o == nil || IsNil(o.StoreId) {
		var ret string
		return ret
	}
	return *o.StoreId
}

// GetStoreIdOk returns a tuple with the StoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUpdate) GetStoreIdOk() (*string, bool) {
	if o == nil || IsNil(o.StoreId) {
		return nil, false
	}
	return o.StoreId, true
}

// HasStoreId returns a boolean if a field has been set.
func (o *CustomerUpdate) HasStoreId() bool {
	if o != nil && !IsNil(o.StoreId) {
		return true
	}

	return false
}

// SetStoreId gets a reference to the given string and assigns it to the StoreId field.
func (o *CustomerUpdate) SetStoreId(v string) {
	o.StoreId = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *CustomerUpdate) GetAddress() []CustomerUpdateAddressInner {
	if o == nil || IsNil(o.Address) {
		var ret []CustomerUpdateAddressInner
		return ret
	}
	return o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUpdate) GetAddressOk() ([]CustomerUpdateAddressInner, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *CustomerUpdate) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given []CustomerUpdateAddressInner and assigns it to the Address field.
func (o *CustomerUpdate) SetAddress(v []CustomerUpdateAddressInner) {
	o.Address = v
}

func (o CustomerUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.GroupIds) {
		toSerialize["group_ids"] = o.GroupIds
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !IsNil(o.BirthDay) {
		toSerialize["birth_day"] = o.BirthDay
	}
	if !IsNil(o.NewsLetterSubscription) {
		toSerialize["news_letter_subscription"] = o.NewsLetterSubscription
	}
	if !IsNil(o.Consents) {
		toSerialize["consents"] = o.Consents
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StoreId) {
		toSerialize["store_id"] = o.StoreId
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	return toSerialize, nil
}

type NullableCustomerUpdate struct {
	value *CustomerUpdate
	isSet bool
}

func (v NullableCustomerUpdate) Get() *CustomerUpdate {
	return v.value
}

func (v *NullableCustomerUpdate) Set(val *CustomerUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerUpdate(val *CustomerUpdate) *NullableCustomerUpdate {
	return &NullableCustomerUpdate{value: val, isSet: true}
}

func (v NullableCustomerUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


