/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProductOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductOption{}

// ProductOption struct for ProductOption
type ProductOption struct {
	Id *string `json:"id,omitempty"`
	ProductOptionId NullableString `json:"product_option_id,omitempty"`
	Name *string `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	SortOrder NullableInt32 `json:"sort_order,omitempty"`
	Type *string `json:"type,omitempty"`
	Required NullableBool `json:"required,omitempty"`
	Available NullableBool `json:"available,omitempty"`
	UsedInCombination NullableBool `json:"used_in_combination,omitempty"`
	OptionItems []ProductOptionItem `json:"option_items,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewProductOption instantiates a new ProductOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductOption() *ProductOption {
	this := ProductOption{}
	return &this
}

// NewProductOptionWithDefaults instantiates a new ProductOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductOptionWithDefaults() *ProductOption {
	this := ProductOption{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProductOption) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductOption) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProductOption) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProductOption) SetId(v string) {
	o.Id = &v
}

// GetProductOptionId returns the ProductOptionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductOption) GetProductOptionId() string {
	if o == nil || IsNil(o.ProductOptionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProductOptionId.Get()
}

// GetProductOptionIdOk returns a tuple with the ProductOptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductOption) GetProductOptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductOptionId.Get(), o.ProductOptionId.IsSet()
}

// HasProductOptionId returns a boolean if a field has been set.
func (o *ProductOption) HasProductOptionId() bool {
	if o != nil && o.ProductOptionId.IsSet() {
		return true
	}

	return false
}

// SetProductOptionId gets a reference to the given NullableString and assigns it to the ProductOptionId field.
func (o *ProductOption) SetProductOptionId(v string) {
	o.ProductOptionId.Set(&v)
}
// SetProductOptionIdNil sets the value for ProductOptionId to be an explicit nil
func (o *ProductOption) SetProductOptionIdNil() {
	o.ProductOptionId.Set(nil)
}

// UnsetProductOptionId ensures that no value is present for ProductOptionId, not even an explicit nil
func (o *ProductOption) UnsetProductOptionId() {
	o.ProductOptionId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProductOption) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductOption) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProductOption) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProductOption) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductOption) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductOption) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ProductOption) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ProductOption) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ProductOption) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ProductOption) UnsetDescription() {
	o.Description.Unset()
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductOption) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder.Get()) {
		var ret int32
		return ret
	}
	return *o.SortOrder.Get()
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductOption) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SortOrder.Get(), o.SortOrder.IsSet()
}

// HasSortOrder returns a boolean if a field has been set.
func (o *ProductOption) HasSortOrder() bool {
	if o != nil && o.SortOrder.IsSet() {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given NullableInt32 and assigns it to the SortOrder field.
func (o *ProductOption) SetSortOrder(v int32) {
	o.SortOrder.Set(&v)
}
// SetSortOrderNil sets the value for SortOrder to be an explicit nil
func (o *ProductOption) SetSortOrderNil() {
	o.SortOrder.Set(nil)
}

// UnsetSortOrder ensures that no value is present for SortOrder, not even an explicit nil
func (o *ProductOption) UnsetSortOrder() {
	o.SortOrder.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProductOption) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductOption) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProductOption) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ProductOption) SetType(v string) {
	o.Type = &v
}

// GetRequired returns the Required field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductOption) GetRequired() bool {
	if o == nil || IsNil(o.Required.Get()) {
		var ret bool
		return ret
	}
	return *o.Required.Get()
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductOption) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Required.Get(), o.Required.IsSet()
}

// HasRequired returns a boolean if a field has been set.
func (o *ProductOption) HasRequired() bool {
	if o != nil && o.Required.IsSet() {
		return true
	}

	return false
}

// SetRequired gets a reference to the given NullableBool and assigns it to the Required field.
func (o *ProductOption) SetRequired(v bool) {
	o.Required.Set(&v)
}
// SetRequiredNil sets the value for Required to be an explicit nil
func (o *ProductOption) SetRequiredNil() {
	o.Required.Set(nil)
}

// UnsetRequired ensures that no value is present for Required, not even an explicit nil
func (o *ProductOption) UnsetRequired() {
	o.Required.Unset()
}

// GetAvailable returns the Available field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductOption) GetAvailable() bool {
	if o == nil || IsNil(o.Available.Get()) {
		var ret bool
		return ret
	}
	return *o.Available.Get()
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductOption) GetAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Available.Get(), o.Available.IsSet()
}

// HasAvailable returns a boolean if a field has been set.
func (o *ProductOption) HasAvailable() bool {
	if o != nil && o.Available.IsSet() {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given NullableBool and assigns it to the Available field.
func (o *ProductOption) SetAvailable(v bool) {
	o.Available.Set(&v)
}
// SetAvailableNil sets the value for Available to be an explicit nil
func (o *ProductOption) SetAvailableNil() {
	o.Available.Set(nil)
}

// UnsetAvailable ensures that no value is present for Available, not even an explicit nil
func (o *ProductOption) UnsetAvailable() {
	o.Available.Unset()
}

// GetUsedInCombination returns the UsedInCombination field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductOption) GetUsedInCombination() bool {
	if o == nil || IsNil(o.UsedInCombination.Get()) {
		var ret bool
		return ret
	}
	return *o.UsedInCombination.Get()
}

// GetUsedInCombinationOk returns a tuple with the UsedInCombination field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductOption) GetUsedInCombinationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsedInCombination.Get(), o.UsedInCombination.IsSet()
}

// HasUsedInCombination returns a boolean if a field has been set.
func (o *ProductOption) HasUsedInCombination() bool {
	if o != nil && o.UsedInCombination.IsSet() {
		return true
	}

	return false
}

// SetUsedInCombination gets a reference to the given NullableBool and assigns it to the UsedInCombination field.
func (o *ProductOption) SetUsedInCombination(v bool) {
	o.UsedInCombination.Set(&v)
}
// SetUsedInCombinationNil sets the value for UsedInCombination to be an explicit nil
func (o *ProductOption) SetUsedInCombinationNil() {
	o.UsedInCombination.Set(nil)
}

// UnsetUsedInCombination ensures that no value is present for UsedInCombination, not even an explicit nil
func (o *ProductOption) UnsetUsedInCombination() {
	o.UsedInCombination.Unset()
}

// GetOptionItems returns the OptionItems field value if set, zero value otherwise.
func (o *ProductOption) GetOptionItems() []ProductOptionItem {
	if o == nil || IsNil(o.OptionItems) {
		var ret []ProductOptionItem
		return ret
	}
	return o.OptionItems
}

// GetOptionItemsOk returns a tuple with the OptionItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductOption) GetOptionItemsOk() ([]ProductOptionItem, bool) {
	if o == nil || IsNil(o.OptionItems) {
		return nil, false
	}
	return o.OptionItems, true
}

// HasOptionItems returns a boolean if a field has been set.
func (o *ProductOption) HasOptionItems() bool {
	if o != nil && !IsNil(o.OptionItems) {
		return true
	}

	return false
}

// SetOptionItems gets a reference to the given []ProductOptionItem and assigns it to the OptionItems field.
func (o *ProductOption) SetOptionItems(v []ProductOptionItem) {
	o.OptionItems = v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductOption) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductOption) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *ProductOption) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *ProductOption) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductOption) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductOption) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *ProductOption) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *ProductOption) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o ProductOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.ProductOptionId.IsSet() {
		toSerialize["product_option_id"] = o.ProductOptionId.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.SortOrder.IsSet() {
		toSerialize["sort_order"] = o.SortOrder.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Required.IsSet() {
		toSerialize["required"] = o.Required.Get()
	}
	if o.Available.IsSet() {
		toSerialize["available"] = o.Available.Get()
	}
	if o.UsedInCombination.IsSet() {
		toSerialize["used_in_combination"] = o.UsedInCombination.Get()
	}
	if !IsNil(o.OptionItems) {
		toSerialize["option_items"] = o.OptionItems
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableProductOption struct {
	value *ProductOption
	isSet bool
}

func (v NullableProductOption) Get() *ProductOption {
	return v.value
}

func (v *NullableProductOption) Set(val *ProductOption) {
	v.value = val
	v.isSet = true
}

func (v NullableProductOption) IsSet() bool {
	return v.isSet
}

func (v *NullableProductOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductOption(val *ProductOption) *NullableProductOption {
	return &NullableProductOption{value: val, isSet: true}
}

func (v NullableProductOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


