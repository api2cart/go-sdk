/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CartStoreInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CartStoreInfo{}

// CartStoreInfo struct for CartStoreInfo
type CartStoreInfo struct {
	StoreId *string `json:"store_id,omitempty"`
	Name *string `json:"name,omitempty"`
	Language *string `json:"language,omitempty"`
	StoreLanguages []Language `json:"store_languages,omitempty"`
	Currency *Currency `json:"currency,omitempty"`
	StoreCurrencies []Currency `json:"store_currencies,omitempty"`
	Timezone *string `json:"timezone,omitempty"`
	Country *string `json:"country,omitempty"`
	RootCategoryId *string `json:"root_category_id,omitempty"`
	MultiStoreUrl *string `json:"multi_store_url,omitempty"`
	Active *bool `json:"active,omitempty"`
	WeightUnit *string `json:"weight_unit,omitempty"`
	DimensionUnit *string `json:"dimension_unit,omitempty"`
	PricesIncludeTax *bool `json:"prices_include_tax,omitempty"`
	CarrierInfo []Carrier `json:"carrier_info,omitempty"`
	StoreOwnerInfo *Info `json:"store_owner_info,omitempty"`
	DefaultWarehouseId *string `json:"default_warehouse_id,omitempty"`
	Channels []CartChannel `json:"channels,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewCartStoreInfo instantiates a new CartStoreInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCartStoreInfo() *CartStoreInfo {
	this := CartStoreInfo{}
	return &this
}

// NewCartStoreInfoWithDefaults instantiates a new CartStoreInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCartStoreInfoWithDefaults() *CartStoreInfo {
	this := CartStoreInfo{}
	return &this
}

// GetStoreId returns the StoreId field value if set, zero value otherwise.
func (o *CartStoreInfo) GetStoreId() string {
	if o == nil || IsNil(o.StoreId) {
		var ret string
		return ret
	}
	return *o.StoreId
}

// GetStoreIdOk returns a tuple with the StoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetStoreIdOk() (*string, bool) {
	if o == nil || IsNil(o.StoreId) {
		return nil, false
	}
	return o.StoreId, true
}

// HasStoreId returns a boolean if a field has been set.
func (o *CartStoreInfo) HasStoreId() bool {
	if o != nil && !IsNil(o.StoreId) {
		return true
	}

	return false
}

// SetStoreId gets a reference to the given string and assigns it to the StoreId field.
func (o *CartStoreInfo) SetStoreId(v string) {
	o.StoreId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CartStoreInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CartStoreInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CartStoreInfo) SetName(v string) {
	o.Name = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *CartStoreInfo) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *CartStoreInfo) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *CartStoreInfo) SetLanguage(v string) {
	o.Language = &v
}

// GetStoreLanguages returns the StoreLanguages field value if set, zero value otherwise.
func (o *CartStoreInfo) GetStoreLanguages() []Language {
	if o == nil || IsNil(o.StoreLanguages) {
		var ret []Language
		return ret
	}
	return o.StoreLanguages
}

// GetStoreLanguagesOk returns a tuple with the StoreLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetStoreLanguagesOk() ([]Language, bool) {
	if o == nil || IsNil(o.StoreLanguages) {
		return nil, false
	}
	return o.StoreLanguages, true
}

// HasStoreLanguages returns a boolean if a field has been set.
func (o *CartStoreInfo) HasStoreLanguages() bool {
	if o != nil && !IsNil(o.StoreLanguages) {
		return true
	}

	return false
}

// SetStoreLanguages gets a reference to the given []Language and assigns it to the StoreLanguages field.
func (o *CartStoreInfo) SetStoreLanguages(v []Language) {
	o.StoreLanguages = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CartStoreInfo) GetCurrency() Currency {
	if o == nil || IsNil(o.Currency) {
		var ret Currency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetCurrencyOk() (*Currency, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CartStoreInfo) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given Currency and assigns it to the Currency field.
func (o *CartStoreInfo) SetCurrency(v Currency) {
	o.Currency = &v
}

// GetStoreCurrencies returns the StoreCurrencies field value if set, zero value otherwise.
func (o *CartStoreInfo) GetStoreCurrencies() []Currency {
	if o == nil || IsNil(o.StoreCurrencies) {
		var ret []Currency
		return ret
	}
	return o.StoreCurrencies
}

// GetStoreCurrenciesOk returns a tuple with the StoreCurrencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetStoreCurrenciesOk() ([]Currency, bool) {
	if o == nil || IsNil(o.StoreCurrencies) {
		return nil, false
	}
	return o.StoreCurrencies, true
}

// HasStoreCurrencies returns a boolean if a field has been set.
func (o *CartStoreInfo) HasStoreCurrencies() bool {
	if o != nil && !IsNil(o.StoreCurrencies) {
		return true
	}

	return false
}

// SetStoreCurrencies gets a reference to the given []Currency and assigns it to the StoreCurrencies field.
func (o *CartStoreInfo) SetStoreCurrencies(v []Currency) {
	o.StoreCurrencies = v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *CartStoreInfo) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *CartStoreInfo) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *CartStoreInfo) SetTimezone(v string) {
	o.Timezone = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *CartStoreInfo) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *CartStoreInfo) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *CartStoreInfo) SetCountry(v string) {
	o.Country = &v
}

// GetRootCategoryId returns the RootCategoryId field value if set, zero value otherwise.
func (o *CartStoreInfo) GetRootCategoryId() string {
	if o == nil || IsNil(o.RootCategoryId) {
		var ret string
		return ret
	}
	return *o.RootCategoryId
}

// GetRootCategoryIdOk returns a tuple with the RootCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetRootCategoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.RootCategoryId) {
		return nil, false
	}
	return o.RootCategoryId, true
}

// HasRootCategoryId returns a boolean if a field has been set.
func (o *CartStoreInfo) HasRootCategoryId() bool {
	if o != nil && !IsNil(o.RootCategoryId) {
		return true
	}

	return false
}

// SetRootCategoryId gets a reference to the given string and assigns it to the RootCategoryId field.
func (o *CartStoreInfo) SetRootCategoryId(v string) {
	o.RootCategoryId = &v
}

// GetMultiStoreUrl returns the MultiStoreUrl field value if set, zero value otherwise.
func (o *CartStoreInfo) GetMultiStoreUrl() string {
	if o == nil || IsNil(o.MultiStoreUrl) {
		var ret string
		return ret
	}
	return *o.MultiStoreUrl
}

// GetMultiStoreUrlOk returns a tuple with the MultiStoreUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetMultiStoreUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MultiStoreUrl) {
		return nil, false
	}
	return o.MultiStoreUrl, true
}

// HasMultiStoreUrl returns a boolean if a field has been set.
func (o *CartStoreInfo) HasMultiStoreUrl() bool {
	if o != nil && !IsNil(o.MultiStoreUrl) {
		return true
	}

	return false
}

// SetMultiStoreUrl gets a reference to the given string and assigns it to the MultiStoreUrl field.
func (o *CartStoreInfo) SetMultiStoreUrl(v string) {
	o.MultiStoreUrl = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CartStoreInfo) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CartStoreInfo) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CartStoreInfo) SetActive(v bool) {
	o.Active = &v
}

// GetWeightUnit returns the WeightUnit field value if set, zero value otherwise.
func (o *CartStoreInfo) GetWeightUnit() string {
	if o == nil || IsNil(o.WeightUnit) {
		var ret string
		return ret
	}
	return *o.WeightUnit
}

// GetWeightUnitOk returns a tuple with the WeightUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetWeightUnitOk() (*string, bool) {
	if o == nil || IsNil(o.WeightUnit) {
		return nil, false
	}
	return o.WeightUnit, true
}

// HasWeightUnit returns a boolean if a field has been set.
func (o *CartStoreInfo) HasWeightUnit() bool {
	if o != nil && !IsNil(o.WeightUnit) {
		return true
	}

	return false
}

// SetWeightUnit gets a reference to the given string and assigns it to the WeightUnit field.
func (o *CartStoreInfo) SetWeightUnit(v string) {
	o.WeightUnit = &v
}

// GetDimensionUnit returns the DimensionUnit field value if set, zero value otherwise.
func (o *CartStoreInfo) GetDimensionUnit() string {
	if o == nil || IsNil(o.DimensionUnit) {
		var ret string
		return ret
	}
	return *o.DimensionUnit
}

// GetDimensionUnitOk returns a tuple with the DimensionUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetDimensionUnitOk() (*string, bool) {
	if o == nil || IsNil(o.DimensionUnit) {
		return nil, false
	}
	return o.DimensionUnit, true
}

// HasDimensionUnit returns a boolean if a field has been set.
func (o *CartStoreInfo) HasDimensionUnit() bool {
	if o != nil && !IsNil(o.DimensionUnit) {
		return true
	}

	return false
}

// SetDimensionUnit gets a reference to the given string and assigns it to the DimensionUnit field.
func (o *CartStoreInfo) SetDimensionUnit(v string) {
	o.DimensionUnit = &v
}

// GetPricesIncludeTax returns the PricesIncludeTax field value if set, zero value otherwise.
func (o *CartStoreInfo) GetPricesIncludeTax() bool {
	if o == nil || IsNil(o.PricesIncludeTax) {
		var ret bool
		return ret
	}
	return *o.PricesIncludeTax
}

// GetPricesIncludeTaxOk returns a tuple with the PricesIncludeTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetPricesIncludeTaxOk() (*bool, bool) {
	if o == nil || IsNil(o.PricesIncludeTax) {
		return nil, false
	}
	return o.PricesIncludeTax, true
}

// HasPricesIncludeTax returns a boolean if a field has been set.
func (o *CartStoreInfo) HasPricesIncludeTax() bool {
	if o != nil && !IsNil(o.PricesIncludeTax) {
		return true
	}

	return false
}

// SetPricesIncludeTax gets a reference to the given bool and assigns it to the PricesIncludeTax field.
func (o *CartStoreInfo) SetPricesIncludeTax(v bool) {
	o.PricesIncludeTax = &v
}

// GetCarrierInfo returns the CarrierInfo field value if set, zero value otherwise.
func (o *CartStoreInfo) GetCarrierInfo() []Carrier {
	if o == nil || IsNil(o.CarrierInfo) {
		var ret []Carrier
		return ret
	}
	return o.CarrierInfo
}

// GetCarrierInfoOk returns a tuple with the CarrierInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetCarrierInfoOk() ([]Carrier, bool) {
	if o == nil || IsNil(o.CarrierInfo) {
		return nil, false
	}
	return o.CarrierInfo, true
}

// HasCarrierInfo returns a boolean if a field has been set.
func (o *CartStoreInfo) HasCarrierInfo() bool {
	if o != nil && !IsNil(o.CarrierInfo) {
		return true
	}

	return false
}

// SetCarrierInfo gets a reference to the given []Carrier and assigns it to the CarrierInfo field.
func (o *CartStoreInfo) SetCarrierInfo(v []Carrier) {
	o.CarrierInfo = v
}

// GetStoreOwnerInfo returns the StoreOwnerInfo field value if set, zero value otherwise.
func (o *CartStoreInfo) GetStoreOwnerInfo() Info {
	if o == nil || IsNil(o.StoreOwnerInfo) {
		var ret Info
		return ret
	}
	return *o.StoreOwnerInfo
}

// GetStoreOwnerInfoOk returns a tuple with the StoreOwnerInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetStoreOwnerInfoOk() (*Info, bool) {
	if o == nil || IsNil(o.StoreOwnerInfo) {
		return nil, false
	}
	return o.StoreOwnerInfo, true
}

// HasStoreOwnerInfo returns a boolean if a field has been set.
func (o *CartStoreInfo) HasStoreOwnerInfo() bool {
	if o != nil && !IsNil(o.StoreOwnerInfo) {
		return true
	}

	return false
}

// SetStoreOwnerInfo gets a reference to the given Info and assigns it to the StoreOwnerInfo field.
func (o *CartStoreInfo) SetStoreOwnerInfo(v Info) {
	o.StoreOwnerInfo = &v
}

// GetDefaultWarehouseId returns the DefaultWarehouseId field value if set, zero value otherwise.
func (o *CartStoreInfo) GetDefaultWarehouseId() string {
	if o == nil || IsNil(o.DefaultWarehouseId) {
		var ret string
		return ret
	}
	return *o.DefaultWarehouseId
}

// GetDefaultWarehouseIdOk returns a tuple with the DefaultWarehouseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetDefaultWarehouseIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultWarehouseId) {
		return nil, false
	}
	return o.DefaultWarehouseId, true
}

// HasDefaultWarehouseId returns a boolean if a field has been set.
func (o *CartStoreInfo) HasDefaultWarehouseId() bool {
	if o != nil && !IsNil(o.DefaultWarehouseId) {
		return true
	}

	return false
}

// SetDefaultWarehouseId gets a reference to the given string and assigns it to the DefaultWarehouseId field.
func (o *CartStoreInfo) SetDefaultWarehouseId(v string) {
	o.DefaultWarehouseId = &v
}

// GetChannels returns the Channels field value if set, zero value otherwise.
func (o *CartStoreInfo) GetChannels() []CartChannel {
	if o == nil || IsNil(o.Channels) {
		var ret []CartChannel
		return ret
	}
	return o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetChannelsOk() ([]CartChannel, bool) {
	if o == nil || IsNil(o.Channels) {
		return nil, false
	}
	return o.Channels, true
}

// HasChannels returns a boolean if a field has been set.
func (o *CartStoreInfo) HasChannels() bool {
	if o != nil && !IsNil(o.Channels) {
		return true
	}

	return false
}

// SetChannels gets a reference to the given []CartChannel and assigns it to the Channels field.
func (o *CartStoreInfo) SetChannels(v []CartChannel) {
	o.Channels = v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise.
func (o *CartStoreInfo) GetAdditionalFields() map[string]interface{} {
	if o == nil || IsNil(o.AdditionalFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *CartStoreInfo) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *CartStoreInfo) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *CartStoreInfo) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartStoreInfo) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *CartStoreInfo) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *CartStoreInfo) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o CartStoreInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CartStoreInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StoreId) {
		toSerialize["store_id"] = o.StoreId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.StoreLanguages) {
		toSerialize["store_languages"] = o.StoreLanguages
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.StoreCurrencies) {
		toSerialize["store_currencies"] = o.StoreCurrencies
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.RootCategoryId) {
		toSerialize["root_category_id"] = o.RootCategoryId
	}
	if !IsNil(o.MultiStoreUrl) {
		toSerialize["multi_store_url"] = o.MultiStoreUrl
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.WeightUnit) {
		toSerialize["weight_unit"] = o.WeightUnit
	}
	if !IsNil(o.DimensionUnit) {
		toSerialize["dimension_unit"] = o.DimensionUnit
	}
	if !IsNil(o.PricesIncludeTax) {
		toSerialize["prices_include_tax"] = o.PricesIncludeTax
	}
	if !IsNil(o.CarrierInfo) {
		toSerialize["carrier_info"] = o.CarrierInfo
	}
	if !IsNil(o.StoreOwnerInfo) {
		toSerialize["store_owner_info"] = o.StoreOwnerInfo
	}
	if !IsNil(o.DefaultWarehouseId) {
		toSerialize["default_warehouse_id"] = o.DefaultWarehouseId
	}
	if !IsNil(o.Channels) {
		toSerialize["channels"] = o.Channels
	}
	if !IsNil(o.AdditionalFields) {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableCartStoreInfo struct {
	value *CartStoreInfo
	isSet bool
}

func (v NullableCartStoreInfo) Get() *CartStoreInfo {
	return v.value
}

func (v *NullableCartStoreInfo) Set(val *CartStoreInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCartStoreInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCartStoreInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCartStoreInfo(val *CartStoreInfo) *NullableCartStoreInfo {
	return &NullableCartStoreInfo{value: val, isSet: true}
}

func (v NullableCartStoreInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCartStoreInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


