/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// MarketplaceAPIService MarketplaceAPI service
type MarketplaceAPIService service

type ApiMarketplaceProductFindRequest struct {
	ctx context.Context
	ApiService *MarketplaceAPIService
	count *int32
	pageCursor *string
	keyword *string
	categoriesIds *string
	storeId *string
	asin *string
	ean *string
	gtin *string
	upc *string
	mpn *string
	isbn *string
	responseFields *string
	params *string
	exclude *string
}

// This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
func (r ApiMarketplaceProductFindRequest) Count(count int32) ApiMarketplaceProductFindRequest {
	r.count = &count
	return r
}

// Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
func (r ApiMarketplaceProductFindRequest) PageCursor(pageCursor string) ApiMarketplaceProductFindRequest {
	r.pageCursor = &pageCursor
	return r
}

// Defines search keyword
func (r ApiMarketplaceProductFindRequest) Keyword(keyword string) ApiMarketplaceProductFindRequest {
	r.keyword = &keyword
	return r
}

// Defines product add that is specified by comma-separated categories id
func (r ApiMarketplaceProductFindRequest) CategoriesIds(categoriesIds string) ApiMarketplaceProductFindRequest {
	r.categoriesIds = &categoriesIds
	return r
}

// Store Id
func (r ApiMarketplaceProductFindRequest) StoreId(storeId string) ApiMarketplaceProductFindRequest {
	r.storeId = &storeId
	return r
}

// Amazon Standard Identification Number.
func (r ApiMarketplaceProductFindRequest) Asin(asin string) ApiMarketplaceProductFindRequest {
	r.asin = &asin
	return r
}

// European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.
func (r ApiMarketplaceProductFindRequest) Ean(ean string) ApiMarketplaceProductFindRequest {
	r.ean = &ean
	return r
}

// Global Trade Item Number. An GTIN is an identifier for trade items.
func (r ApiMarketplaceProductFindRequest) Gtin(gtin string) ApiMarketplaceProductFindRequest {
	r.gtin = &gtin
	return r
}

// Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.
func (r ApiMarketplaceProductFindRequest) Upc(upc string) ApiMarketplaceProductFindRequest {
	r.upc = &upc
	return r
}

// Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.
func (r ApiMarketplaceProductFindRequest) Mpn(mpn string) ApiMarketplaceProductFindRequest {
	r.mpn = &mpn
	return r
}

// International Standard Book Number. An ISBN is a unique identifier for books.
func (r ApiMarketplaceProductFindRequest) Isbn(isbn string) ApiMarketplaceProductFindRequest {
	r.isbn = &isbn
	return r
}

// Set this parameter in order to choose which entity fields you want to retrieve
func (r ApiMarketplaceProductFindRequest) ResponseFields(responseFields string) ApiMarketplaceProductFindRequest {
	r.responseFields = &responseFields
	return r
}

// Set this parameter in order to choose which entity fields you want to retrieve
func (r ApiMarketplaceProductFindRequest) Params(params string) ApiMarketplaceProductFindRequest {
	r.params = &params
	return r
}

// Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
func (r ApiMarketplaceProductFindRequest) Exclude(exclude string) ApiMarketplaceProductFindRequest {
	r.exclude = &exclude
	return r
}

func (r ApiMarketplaceProductFindRequest) Execute() (*ModelResponseMarketplaceProductFind, *http.Response, error) {
	return r.ApiService.MarketplaceProductFindExecute(r)
}

/*
MarketplaceProductFind marketplace.product.find

Search product in global catalog.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMarketplaceProductFindRequest
*/
func (a *MarketplaceAPIService) MarketplaceProductFind(ctx context.Context) ApiMarketplaceProductFindRequest {
	return ApiMarketplaceProductFindRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelResponseMarketplaceProductFind
func (a *MarketplaceAPIService) MarketplaceProductFindExecute(r ApiMarketplaceProductFindRequest) (*ModelResponseMarketplaceProductFind, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelResponseMarketplaceProductFind
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketplaceAPIService.MarketplaceProductFind")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketplace.product.find.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.pageCursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_cursor", r.pageCursor, "form", "")
	}
	if r.keyword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keyword", r.keyword, "form", "")
	}
	if r.categoriesIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "categories_ids", r.categoriesIds, "form", "")
	}
	if r.storeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "store_id", r.storeId, "form", "")
	}
	if r.asin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asin", r.asin, "form", "")
	}
	if r.ean != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ean", r.ean, "form", "")
	}
	if r.gtin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gtin", r.gtin, "form", "")
	}
	if r.upc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upc", r.upc, "form", "")
	}
	if r.mpn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mpn", r.mpn, "form", "")
	}
	if r.isbn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isbn", r.isbn, "form", "")
	}
	if r.responseFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "response_fields", r.responseFields, "form", "")
	}
	if r.params != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "params", r.params, "form", "")
	} else {
		var defaultValue string = "force_all"
		r.params = &defaultValue
	}
	if r.exclude != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude", r.exclude, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["StoreKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-store-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
