/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CustomerConsent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerConsent{}

// CustomerConsent struct for CustomerConsent
type CustomerConsent struct {
	Id *string `json:"id,omitempty"`
	Type NullableString `json:"type,omitempty"`
	Status NullableString `json:"status,omitempty"`
	Source NullableString `json:"source,omitempty"`
	OptInLevel NullableString `json:"opt_in_level,omitempty"`
	ModifiedTime NullableString `json:"modified_time,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewCustomerConsent instantiates a new CustomerConsent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerConsent() *CustomerConsent {
	this := CustomerConsent{}
	return &this
}

// NewCustomerConsentWithDefaults instantiates a new CustomerConsent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerConsentWithDefaults() *CustomerConsent {
	this := CustomerConsent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustomerConsent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerConsent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustomerConsent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustomerConsent) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomerConsent) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerConsent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *CustomerConsent) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *CustomerConsent) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *CustomerConsent) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *CustomerConsent) UnsetType() {
	o.Type.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomerConsent) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerConsent) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *CustomerConsent) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *CustomerConsent) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *CustomerConsent) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *CustomerConsent) UnsetStatus() {
	o.Status.Unset()
}

// GetSource returns the Source field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomerConsent) GetSource() string {
	if o == nil || IsNil(o.Source.Get()) {
		var ret string
		return ret
	}
	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerConsent) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// HasSource returns a boolean if a field has been set.
func (o *CustomerConsent) HasSource() bool {
	if o != nil && o.Source.IsSet() {
		return true
	}

	return false
}

// SetSource gets a reference to the given NullableString and assigns it to the Source field.
func (o *CustomerConsent) SetSource(v string) {
	o.Source.Set(&v)
}
// SetSourceNil sets the value for Source to be an explicit nil
func (o *CustomerConsent) SetSourceNil() {
	o.Source.Set(nil)
}

// UnsetSource ensures that no value is present for Source, not even an explicit nil
func (o *CustomerConsent) UnsetSource() {
	o.Source.Unset()
}

// GetOptInLevel returns the OptInLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomerConsent) GetOptInLevel() string {
	if o == nil || IsNil(o.OptInLevel.Get()) {
		var ret string
		return ret
	}
	return *o.OptInLevel.Get()
}

// GetOptInLevelOk returns a tuple with the OptInLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerConsent) GetOptInLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OptInLevel.Get(), o.OptInLevel.IsSet()
}

// HasOptInLevel returns a boolean if a field has been set.
func (o *CustomerConsent) HasOptInLevel() bool {
	if o != nil && o.OptInLevel.IsSet() {
		return true
	}

	return false
}

// SetOptInLevel gets a reference to the given NullableString and assigns it to the OptInLevel field.
func (o *CustomerConsent) SetOptInLevel(v string) {
	o.OptInLevel.Set(&v)
}
// SetOptInLevelNil sets the value for OptInLevel to be an explicit nil
func (o *CustomerConsent) SetOptInLevelNil() {
	o.OptInLevel.Set(nil)
}

// UnsetOptInLevel ensures that no value is present for OptInLevel, not even an explicit nil
func (o *CustomerConsent) UnsetOptInLevel() {
	o.OptInLevel.Unset()
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomerConsent) GetModifiedTime() string {
	if o == nil || IsNil(o.ModifiedTime.Get()) {
		var ret string
		return ret
	}
	return *o.ModifiedTime.Get()
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerConsent) GetModifiedTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedTime.Get(), o.ModifiedTime.IsSet()
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *CustomerConsent) HasModifiedTime() bool {
	if o != nil && o.ModifiedTime.IsSet() {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given NullableString and assigns it to the ModifiedTime field.
func (o *CustomerConsent) SetModifiedTime(v string) {
	o.ModifiedTime.Set(&v)
}
// SetModifiedTimeNil sets the value for ModifiedTime to be an explicit nil
func (o *CustomerConsent) SetModifiedTimeNil() {
	o.ModifiedTime.Set(nil)
}

// UnsetModifiedTime ensures that no value is present for ModifiedTime, not even an explicit nil
func (o *CustomerConsent) UnsetModifiedTime() {
	o.ModifiedTime.Unset()
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomerConsent) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerConsent) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *CustomerConsent) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *CustomerConsent) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomerConsent) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerConsent) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *CustomerConsent) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *CustomerConsent) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o CustomerConsent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerConsent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Source.IsSet() {
		toSerialize["source"] = o.Source.Get()
	}
	if o.OptInLevel.IsSet() {
		toSerialize["opt_in_level"] = o.OptInLevel.Get()
	}
	if o.ModifiedTime.IsSet() {
		toSerialize["modified_time"] = o.ModifiedTime.Get()
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableCustomerConsent struct {
	value *CustomerConsent
	isSet bool
}

func (v NullableCustomerConsent) Get() *CustomerConsent {
	return v.value
}

func (v *NullableCustomerConsent) Set(val *CustomerConsent) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerConsent) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerConsent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerConsent(val *CustomerConsent) *NullableCustomerConsent {
	return &NullableCustomerConsent{value: val, isSet: true}
}

func (v NullableCustomerConsent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerConsent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


