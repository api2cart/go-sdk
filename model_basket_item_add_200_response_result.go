/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BasketItemAdd200ResponseResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BasketItemAdd200ResponseResult{}

// BasketItemAdd200ResponseResult struct for BasketItemAdd200ResponseResult
type BasketItemAdd200ResponseResult struct {
	Added *bool `json:"added,omitempty"`
}

// NewBasketItemAdd200ResponseResult instantiates a new BasketItemAdd200ResponseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasketItemAdd200ResponseResult() *BasketItemAdd200ResponseResult {
	this := BasketItemAdd200ResponseResult{}
	return &this
}

// NewBasketItemAdd200ResponseResultWithDefaults instantiates a new BasketItemAdd200ResponseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasketItemAdd200ResponseResultWithDefaults() *BasketItemAdd200ResponseResult {
	this := BasketItemAdd200ResponseResult{}
	return &this
}

// GetAdded returns the Added field value if set, zero value otherwise.
func (o *BasketItemAdd200ResponseResult) GetAdded() bool {
	if o == nil || IsNil(o.Added) {
		var ret bool
		return ret
	}
	return *o.Added
}

// GetAddedOk returns a tuple with the Added field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasketItemAdd200ResponseResult) GetAddedOk() (*bool, bool) {
	if o == nil || IsNil(o.Added) {
		return nil, false
	}
	return o.Added, true
}

// HasAdded returns a boolean if a field has been set.
func (o *BasketItemAdd200ResponseResult) HasAdded() bool {
	if o != nil && !IsNil(o.Added) {
		return true
	}

	return false
}

// SetAdded gets a reference to the given bool and assigns it to the Added field.
func (o *BasketItemAdd200ResponseResult) SetAdded(v bool) {
	o.Added = &v
}

func (o BasketItemAdd200ResponseResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BasketItemAdd200ResponseResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Added) {
		toSerialize["added"] = o.Added
	}
	return toSerialize, nil
}

type NullableBasketItemAdd200ResponseResult struct {
	value *BasketItemAdd200ResponseResult
	isSet bool
}

func (v NullableBasketItemAdd200ResponseResult) Get() *BasketItemAdd200ResponseResult {
	return v.value
}

func (v *NullableBasketItemAdd200ResponseResult) Set(val *BasketItemAdd200ResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableBasketItemAdd200ResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableBasketItemAdd200ResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasketItemAdd200ResponseResult(val *BasketItemAdd200ResponseResult) *NullableBasketItemAdd200ResponseResult {
	return &NullableBasketItemAdd200ResponseResult{value: val, isSet: true}
}

func (v NullableBasketItemAdd200ResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasketItemAdd200ResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


