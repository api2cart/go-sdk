/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrderAbandoned type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderAbandoned{}

// OrderAbandoned struct for OrderAbandoned
type OrderAbandoned struct {
	Id *string `json:"id,omitempty"`
	Customer *BaseCustomer `json:"customer,omitempty"`
	BasketId *string `json:"basket_id,omitempty"`
	BasketUrl *string `json:"basket_url,omitempty"`
	CreatedAt *A2CDateTime `json:"created_at,omitempty"`
	ModifiedAt *A2CDateTime `json:"modified_at,omitempty"`
	Currency *Currency `json:"currency,omitempty"`
	Totals *OrderTotals `json:"totals,omitempty"`
	OrderProducts []OrderItem `json:"order_products,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewOrderAbandoned instantiates a new OrderAbandoned object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderAbandoned() *OrderAbandoned {
	this := OrderAbandoned{}
	return &this
}

// NewOrderAbandonedWithDefaults instantiates a new OrderAbandoned object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderAbandonedWithDefaults() *OrderAbandoned {
	this := OrderAbandoned{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrderAbandoned) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderAbandoned) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrderAbandoned) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrderAbandoned) SetId(v string) {
	o.Id = &v
}

// GetCustomer returns the Customer field value if set, zero value otherwise.
func (o *OrderAbandoned) GetCustomer() BaseCustomer {
	if o == nil || IsNil(o.Customer) {
		var ret BaseCustomer
		return ret
	}
	return *o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderAbandoned) GetCustomerOk() (*BaseCustomer, bool) {
	if o == nil || IsNil(o.Customer) {
		return nil, false
	}
	return o.Customer, true
}

// HasCustomer returns a boolean if a field has been set.
func (o *OrderAbandoned) HasCustomer() bool {
	if o != nil && !IsNil(o.Customer) {
		return true
	}

	return false
}

// SetCustomer gets a reference to the given BaseCustomer and assigns it to the Customer field.
func (o *OrderAbandoned) SetCustomer(v BaseCustomer) {
	o.Customer = &v
}

// GetBasketId returns the BasketId field value if set, zero value otherwise.
func (o *OrderAbandoned) GetBasketId() string {
	if o == nil || IsNil(o.BasketId) {
		var ret string
		return ret
	}
	return *o.BasketId
}

// GetBasketIdOk returns a tuple with the BasketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderAbandoned) GetBasketIdOk() (*string, bool) {
	if o == nil || IsNil(o.BasketId) {
		return nil, false
	}
	return o.BasketId, true
}

// HasBasketId returns a boolean if a field has been set.
func (o *OrderAbandoned) HasBasketId() bool {
	if o != nil && !IsNil(o.BasketId) {
		return true
	}

	return false
}

// SetBasketId gets a reference to the given string and assigns it to the BasketId field.
func (o *OrderAbandoned) SetBasketId(v string) {
	o.BasketId = &v
}

// GetBasketUrl returns the BasketUrl field value if set, zero value otherwise.
func (o *OrderAbandoned) GetBasketUrl() string {
	if o == nil || IsNil(o.BasketUrl) {
		var ret string
		return ret
	}
	return *o.BasketUrl
}

// GetBasketUrlOk returns a tuple with the BasketUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderAbandoned) GetBasketUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BasketUrl) {
		return nil, false
	}
	return o.BasketUrl, true
}

// HasBasketUrl returns a boolean if a field has been set.
func (o *OrderAbandoned) HasBasketUrl() bool {
	if o != nil && !IsNil(o.BasketUrl) {
		return true
	}

	return false
}

// SetBasketUrl gets a reference to the given string and assigns it to the BasketUrl field.
func (o *OrderAbandoned) SetBasketUrl(v string) {
	o.BasketUrl = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *OrderAbandoned) GetCreatedAt() A2CDateTime {
	if o == nil || IsNil(o.CreatedAt) {
		var ret A2CDateTime
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderAbandoned) GetCreatedAtOk() (*A2CDateTime, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *OrderAbandoned) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given A2CDateTime and assigns it to the CreatedAt field.
func (o *OrderAbandoned) SetCreatedAt(v A2CDateTime) {
	o.CreatedAt = &v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *OrderAbandoned) GetModifiedAt() A2CDateTime {
	if o == nil || IsNil(o.ModifiedAt) {
		var ret A2CDateTime
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderAbandoned) GetModifiedAtOk() (*A2CDateTime, bool) {
	if o == nil || IsNil(o.ModifiedAt) {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *OrderAbandoned) HasModifiedAt() bool {
	if o != nil && !IsNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given A2CDateTime and assigns it to the ModifiedAt field.
func (o *OrderAbandoned) SetModifiedAt(v A2CDateTime) {
	o.ModifiedAt = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *OrderAbandoned) GetCurrency() Currency {
	if o == nil || IsNil(o.Currency) {
		var ret Currency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderAbandoned) GetCurrencyOk() (*Currency, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *OrderAbandoned) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given Currency and assigns it to the Currency field.
func (o *OrderAbandoned) SetCurrency(v Currency) {
	o.Currency = &v
}

// GetTotals returns the Totals field value if set, zero value otherwise.
func (o *OrderAbandoned) GetTotals() OrderTotals {
	if o == nil || IsNil(o.Totals) {
		var ret OrderTotals
		return ret
	}
	return *o.Totals
}

// GetTotalsOk returns a tuple with the Totals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderAbandoned) GetTotalsOk() (*OrderTotals, bool) {
	if o == nil || IsNil(o.Totals) {
		return nil, false
	}
	return o.Totals, true
}

// HasTotals returns a boolean if a field has been set.
func (o *OrderAbandoned) HasTotals() bool {
	if o != nil && !IsNil(o.Totals) {
		return true
	}

	return false
}

// SetTotals gets a reference to the given OrderTotals and assigns it to the Totals field.
func (o *OrderAbandoned) SetTotals(v OrderTotals) {
	o.Totals = &v
}

// GetOrderProducts returns the OrderProducts field value if set, zero value otherwise.
func (o *OrderAbandoned) GetOrderProducts() []OrderItem {
	if o == nil || IsNil(o.OrderProducts) {
		var ret []OrderItem
		return ret
	}
	return o.OrderProducts
}

// GetOrderProductsOk returns a tuple with the OrderProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderAbandoned) GetOrderProductsOk() ([]OrderItem, bool) {
	if o == nil || IsNil(o.OrderProducts) {
		return nil, false
	}
	return o.OrderProducts, true
}

// HasOrderProducts returns a boolean if a field has been set.
func (o *OrderAbandoned) HasOrderProducts() bool {
	if o != nil && !IsNil(o.OrderProducts) {
		return true
	}

	return false
}

// SetOrderProducts gets a reference to the given []OrderItem and assigns it to the OrderProducts field.
func (o *OrderAbandoned) SetOrderProducts(v []OrderItem) {
	o.OrderProducts = v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise.
func (o *OrderAbandoned) GetAdditionalFields() map[string]interface{} {
	if o == nil || IsNil(o.AdditionalFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderAbandoned) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *OrderAbandoned) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *OrderAbandoned) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *OrderAbandoned) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderAbandoned) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *OrderAbandoned) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *OrderAbandoned) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o OrderAbandoned) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderAbandoned) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Customer) {
		toSerialize["customer"] = o.Customer
	}
	if !IsNil(o.BasketId) {
		toSerialize["basket_id"] = o.BasketId
	}
	if !IsNil(o.BasketUrl) {
		toSerialize["basket_url"] = o.BasketUrl
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.ModifiedAt) {
		toSerialize["modified_at"] = o.ModifiedAt
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Totals) {
		toSerialize["totals"] = o.Totals
	}
	if !IsNil(o.OrderProducts) {
		toSerialize["order_products"] = o.OrderProducts
	}
	if !IsNil(o.AdditionalFields) {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableOrderAbandoned struct {
	value *OrderAbandoned
	isSet bool
}

func (v NullableOrderAbandoned) Get() *OrderAbandoned {
	return v.value
}

func (v *NullableOrderAbandoned) Set(val *OrderAbandoned) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderAbandoned) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderAbandoned) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderAbandoned(val *OrderAbandoned) *NullableOrderAbandoned {
	return &NullableOrderAbandoned{value: val, isSet: true}
}

func (v NullableOrderAbandoned) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderAbandoned) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


