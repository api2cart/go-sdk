/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProductVariantAddBatchPayloadInnerCombinationInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductVariantAddBatchPayloadInnerCombinationInner{}

// ProductVariantAddBatchPayloadInnerCombinationInner struct for ProductVariantAddBatchPayloadInnerCombinationInner
type ProductVariantAddBatchPayloadInnerCombinationInner struct {
	OptionName string `json:"option_name"`
	OptionValueName string `json:"option_value_name"`
}

type _ProductVariantAddBatchPayloadInnerCombinationInner ProductVariantAddBatchPayloadInnerCombinationInner

// NewProductVariantAddBatchPayloadInnerCombinationInner instantiates a new ProductVariantAddBatchPayloadInnerCombinationInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductVariantAddBatchPayloadInnerCombinationInner(optionName string, optionValueName string) *ProductVariantAddBatchPayloadInnerCombinationInner {
	this := ProductVariantAddBatchPayloadInnerCombinationInner{}
	this.OptionName = optionName
	this.OptionValueName = optionValueName
	return &this
}

// NewProductVariantAddBatchPayloadInnerCombinationInnerWithDefaults instantiates a new ProductVariantAddBatchPayloadInnerCombinationInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductVariantAddBatchPayloadInnerCombinationInnerWithDefaults() *ProductVariantAddBatchPayloadInnerCombinationInner {
	this := ProductVariantAddBatchPayloadInnerCombinationInner{}
	return &this
}

// GetOptionName returns the OptionName field value
func (o *ProductVariantAddBatchPayloadInnerCombinationInner) GetOptionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OptionName
}

// GetOptionNameOk returns a tuple with the OptionName field value
// and a boolean to check if the value has been set.
func (o *ProductVariantAddBatchPayloadInnerCombinationInner) GetOptionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OptionName, true
}

// SetOptionName sets field value
func (o *ProductVariantAddBatchPayloadInnerCombinationInner) SetOptionName(v string) {
	o.OptionName = v
}

// GetOptionValueName returns the OptionValueName field value
func (o *ProductVariantAddBatchPayloadInnerCombinationInner) GetOptionValueName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OptionValueName
}

// GetOptionValueNameOk returns a tuple with the OptionValueName field value
// and a boolean to check if the value has been set.
func (o *ProductVariantAddBatchPayloadInnerCombinationInner) GetOptionValueNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OptionValueName, true
}

// SetOptionValueName sets field value
func (o *ProductVariantAddBatchPayloadInnerCombinationInner) SetOptionValueName(v string) {
	o.OptionValueName = v
}

func (o ProductVariantAddBatchPayloadInnerCombinationInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductVariantAddBatchPayloadInnerCombinationInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["option_name"] = o.OptionName
	toSerialize["option_value_name"] = o.OptionValueName
	return toSerialize, nil
}

func (o *ProductVariantAddBatchPayloadInnerCombinationInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"option_name",
		"option_value_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductVariantAddBatchPayloadInnerCombinationInner := _ProductVariantAddBatchPayloadInnerCombinationInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductVariantAddBatchPayloadInnerCombinationInner)

	if err != nil {
		return err
	}

	*o = ProductVariantAddBatchPayloadInnerCombinationInner(varProductVariantAddBatchPayloadInnerCombinationInner)

	return err
}

type NullableProductVariantAddBatchPayloadInnerCombinationInner struct {
	value *ProductVariantAddBatchPayloadInnerCombinationInner
	isSet bool
}

func (v NullableProductVariantAddBatchPayloadInnerCombinationInner) Get() *ProductVariantAddBatchPayloadInnerCombinationInner {
	return v.value
}

func (v *NullableProductVariantAddBatchPayloadInnerCombinationInner) Set(val *ProductVariantAddBatchPayloadInnerCombinationInner) {
	v.value = val
	v.isSet = true
}

func (v NullableProductVariantAddBatchPayloadInnerCombinationInner) IsSet() bool {
	return v.isSet
}

func (v *NullableProductVariantAddBatchPayloadInnerCombinationInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductVariantAddBatchPayloadInnerCombinationInner(val *ProductVariantAddBatchPayloadInnerCombinationInner) *NullableProductVariantAddBatchPayloadInnerCombinationInner {
	return &NullableProductVariantAddBatchPayloadInnerCombinationInner{value: val, isSet: true}
}

func (v NullableProductVariantAddBatchPayloadInnerCombinationInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductVariantAddBatchPayloadInnerCombinationInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


