/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TaxClassStates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxClassStates{}

// TaxClassStates struct for TaxClassStates
type TaxClassStates struct {
	Id *string `json:"id,omitempty"`
	Tax *float32 `json:"tax,omitempty"`
	TaxType *int32 `json:"tax_type,omitempty"`
	Name *string `json:"name,omitempty"`
	Code *string `json:"code,omitempty"`
	ZipCodes []TaxClassZipCodes `json:"zip_codes,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewTaxClassStates instantiates a new TaxClassStates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxClassStates() *TaxClassStates {
	this := TaxClassStates{}
	return &this
}

// NewTaxClassStatesWithDefaults instantiates a new TaxClassStates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxClassStatesWithDefaults() *TaxClassStates {
	this := TaxClassStates{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaxClassStates) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassStates) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaxClassStates) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TaxClassStates) SetId(v string) {
	o.Id = &v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *TaxClassStates) GetTax() float32 {
	if o == nil || IsNil(o.Tax) {
		var ret float32
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassStates) GetTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *TaxClassStates) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given float32 and assigns it to the Tax field.
func (o *TaxClassStates) SetTax(v float32) {
	o.Tax = &v
}

// GetTaxType returns the TaxType field value if set, zero value otherwise.
func (o *TaxClassStates) GetTaxType() int32 {
	if o == nil || IsNil(o.TaxType) {
		var ret int32
		return ret
	}
	return *o.TaxType
}

// GetTaxTypeOk returns a tuple with the TaxType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassStates) GetTaxTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.TaxType) {
		return nil, false
	}
	return o.TaxType, true
}

// HasTaxType returns a boolean if a field has been set.
func (o *TaxClassStates) HasTaxType() bool {
	if o != nil && !IsNil(o.TaxType) {
		return true
	}

	return false
}

// SetTaxType gets a reference to the given int32 and assigns it to the TaxType field.
func (o *TaxClassStates) SetTaxType(v int32) {
	o.TaxType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TaxClassStates) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassStates) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TaxClassStates) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TaxClassStates) SetName(v string) {
	o.Name = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *TaxClassStates) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassStates) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TaxClassStates) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *TaxClassStates) SetCode(v string) {
	o.Code = &v
}

// GetZipCodes returns the ZipCodes field value if set, zero value otherwise.
func (o *TaxClassStates) GetZipCodes() []TaxClassZipCodes {
	if o == nil || IsNil(o.ZipCodes) {
		var ret []TaxClassZipCodes
		return ret
	}
	return o.ZipCodes
}

// GetZipCodesOk returns a tuple with the ZipCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassStates) GetZipCodesOk() ([]TaxClassZipCodes, bool) {
	if o == nil || IsNil(o.ZipCodes) {
		return nil, false
	}
	return o.ZipCodes, true
}

// HasZipCodes returns a boolean if a field has been set.
func (o *TaxClassStates) HasZipCodes() bool {
	if o != nil && !IsNil(o.ZipCodes) {
		return true
	}

	return false
}

// SetZipCodes gets a reference to the given []TaxClassZipCodes and assigns it to the ZipCodes field.
func (o *TaxClassStates) SetZipCodes(v []TaxClassZipCodes) {
	o.ZipCodes = v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise.
func (o *TaxClassStates) GetAdditionalFields() map[string]interface{} {
	if o == nil || IsNil(o.AdditionalFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassStates) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *TaxClassStates) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *TaxClassStates) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *TaxClassStates) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassStates) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *TaxClassStates) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *TaxClassStates) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o TaxClassStates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxClassStates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	if !IsNil(o.TaxType) {
		toSerialize["tax_type"] = o.TaxType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.ZipCodes) {
		toSerialize["zip_codes"] = o.ZipCodes
	}
	if !IsNil(o.AdditionalFields) {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableTaxClassStates struct {
	value *TaxClassStates
	isSet bool
}

func (v NullableTaxClassStates) Get() *TaxClassStates {
	return v.value
}

func (v *NullableTaxClassStates) Set(val *TaxClassStates) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxClassStates) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxClassStates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxClassStates(val *TaxClassStates) *NullableTaxClassStates {
	return &NullableTaxClassStates{value: val, isSet: true}
}

func (v NullableTaxClassStates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxClassStates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


