/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResponseTaxClassInfoResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseTaxClassInfoResult{}

// ResponseTaxClassInfoResult struct for ResponseTaxClassInfoResult
type ResponseTaxClassInfoResult struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Avail NullableBool `json:"avail,omitempty"`
	Tax NullableFloat32 `json:"tax,omitempty"`
	TaxType NullableInt32 `json:"tax_type,omitempty"`
	CreatedAt NullableA2CDateTime `json:"created_at,omitempty"`
	ModifiedAt NullableA2CDateTime `json:"modified_at,omitempty"`
	TaxRates []TaxClassRate `json:"tax_rates,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewResponseTaxClassInfoResult instantiates a new ResponseTaxClassInfoResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseTaxClassInfoResult() *ResponseTaxClassInfoResult {
	this := ResponseTaxClassInfoResult{}
	return &this
}

// NewResponseTaxClassInfoResultWithDefaults instantiates a new ResponseTaxClassInfoResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseTaxClassInfoResultWithDefaults() *ResponseTaxClassInfoResult {
	this := ResponseTaxClassInfoResult{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResponseTaxClassInfoResult) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTaxClassInfoResult) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResponseTaxClassInfoResult) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResponseTaxClassInfoResult) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResponseTaxClassInfoResult) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTaxClassInfoResult) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResponseTaxClassInfoResult) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResponseTaxClassInfoResult) SetName(v string) {
	o.Name = &v
}

// GetAvail returns the Avail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResponseTaxClassInfoResult) GetAvail() bool {
	if o == nil || IsNil(o.Avail.Get()) {
		var ret bool
		return ret
	}
	return *o.Avail.Get()
}

// GetAvailOk returns a tuple with the Avail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseTaxClassInfoResult) GetAvailOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avail.Get(), o.Avail.IsSet()
}

// HasAvail returns a boolean if a field has been set.
func (o *ResponseTaxClassInfoResult) HasAvail() bool {
	if o != nil && o.Avail.IsSet() {
		return true
	}

	return false
}

// SetAvail gets a reference to the given NullableBool and assigns it to the Avail field.
func (o *ResponseTaxClassInfoResult) SetAvail(v bool) {
	o.Avail.Set(&v)
}
// SetAvailNil sets the value for Avail to be an explicit nil
func (o *ResponseTaxClassInfoResult) SetAvailNil() {
	o.Avail.Set(nil)
}

// UnsetAvail ensures that no value is present for Avail, not even an explicit nil
func (o *ResponseTaxClassInfoResult) UnsetAvail() {
	o.Avail.Unset()
}

// GetTax returns the Tax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResponseTaxClassInfoResult) GetTax() float32 {
	if o == nil || IsNil(o.Tax.Get()) {
		var ret float32
		return ret
	}
	return *o.Tax.Get()
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseTaxClassInfoResult) GetTaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tax.Get(), o.Tax.IsSet()
}

// HasTax returns a boolean if a field has been set.
func (o *ResponseTaxClassInfoResult) HasTax() bool {
	if o != nil && o.Tax.IsSet() {
		return true
	}

	return false
}

// SetTax gets a reference to the given NullableFloat32 and assigns it to the Tax field.
func (o *ResponseTaxClassInfoResult) SetTax(v float32) {
	o.Tax.Set(&v)
}
// SetTaxNil sets the value for Tax to be an explicit nil
func (o *ResponseTaxClassInfoResult) SetTaxNil() {
	o.Tax.Set(nil)
}

// UnsetTax ensures that no value is present for Tax, not even an explicit nil
func (o *ResponseTaxClassInfoResult) UnsetTax() {
	o.Tax.Unset()
}

// GetTaxType returns the TaxType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResponseTaxClassInfoResult) GetTaxType() int32 {
	if o == nil || IsNil(o.TaxType.Get()) {
		var ret int32
		return ret
	}
	return *o.TaxType.Get()
}

// GetTaxTypeOk returns a tuple with the TaxType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseTaxClassInfoResult) GetTaxTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxType.Get(), o.TaxType.IsSet()
}

// HasTaxType returns a boolean if a field has been set.
func (o *ResponseTaxClassInfoResult) HasTaxType() bool {
	if o != nil && o.TaxType.IsSet() {
		return true
	}

	return false
}

// SetTaxType gets a reference to the given NullableInt32 and assigns it to the TaxType field.
func (o *ResponseTaxClassInfoResult) SetTaxType(v int32) {
	o.TaxType.Set(&v)
}
// SetTaxTypeNil sets the value for TaxType to be an explicit nil
func (o *ResponseTaxClassInfoResult) SetTaxTypeNil() {
	o.TaxType.Set(nil)
}

// UnsetTaxType ensures that no value is present for TaxType, not even an explicit nil
func (o *ResponseTaxClassInfoResult) UnsetTaxType() {
	o.TaxType.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResponseTaxClassInfoResult) GetCreatedAt() A2CDateTime {
	if o == nil || IsNil(o.CreatedAt.Get()) {
		var ret A2CDateTime
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseTaxClassInfoResult) GetCreatedAtOk() (*A2CDateTime, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ResponseTaxClassInfoResult) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given NullableA2CDateTime and assigns it to the CreatedAt field.
func (o *ResponseTaxClassInfoResult) SetCreatedAt(v A2CDateTime) {
	o.CreatedAt.Set(&v)
}
// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *ResponseTaxClassInfoResult) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *ResponseTaxClassInfoResult) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResponseTaxClassInfoResult) GetModifiedAt() A2CDateTime {
	if o == nil || IsNil(o.ModifiedAt.Get()) {
		var ret A2CDateTime
		return ret
	}
	return *o.ModifiedAt.Get()
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseTaxClassInfoResult) GetModifiedAtOk() (*A2CDateTime, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedAt.Get(), o.ModifiedAt.IsSet()
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *ResponseTaxClassInfoResult) HasModifiedAt() bool {
	if o != nil && o.ModifiedAt.IsSet() {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given NullableA2CDateTime and assigns it to the ModifiedAt field.
func (o *ResponseTaxClassInfoResult) SetModifiedAt(v A2CDateTime) {
	o.ModifiedAt.Set(&v)
}
// SetModifiedAtNil sets the value for ModifiedAt to be an explicit nil
func (o *ResponseTaxClassInfoResult) SetModifiedAtNil() {
	o.ModifiedAt.Set(nil)
}

// UnsetModifiedAt ensures that no value is present for ModifiedAt, not even an explicit nil
func (o *ResponseTaxClassInfoResult) UnsetModifiedAt() {
	o.ModifiedAt.Unset()
}

// GetTaxRates returns the TaxRates field value if set, zero value otherwise.
func (o *ResponseTaxClassInfoResult) GetTaxRates() []TaxClassRate {
	if o == nil || IsNil(o.TaxRates) {
		var ret []TaxClassRate
		return ret
	}
	return o.TaxRates
}

// GetTaxRatesOk returns a tuple with the TaxRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTaxClassInfoResult) GetTaxRatesOk() ([]TaxClassRate, bool) {
	if o == nil || IsNil(o.TaxRates) {
		return nil, false
	}
	return o.TaxRates, true
}

// HasTaxRates returns a boolean if a field has been set.
func (o *ResponseTaxClassInfoResult) HasTaxRates() bool {
	if o != nil && !IsNil(o.TaxRates) {
		return true
	}

	return false
}

// SetTaxRates gets a reference to the given []TaxClassRate and assigns it to the TaxRates field.
func (o *ResponseTaxClassInfoResult) SetTaxRates(v []TaxClassRate) {
	o.TaxRates = v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResponseTaxClassInfoResult) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseTaxClassInfoResult) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *ResponseTaxClassInfoResult) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *ResponseTaxClassInfoResult) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResponseTaxClassInfoResult) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseTaxClassInfoResult) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *ResponseTaxClassInfoResult) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *ResponseTaxClassInfoResult) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o ResponseTaxClassInfoResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseTaxClassInfoResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Avail.IsSet() {
		toSerialize["avail"] = o.Avail.Get()
	}
	if o.Tax.IsSet() {
		toSerialize["tax"] = o.Tax.Get()
	}
	if o.TaxType.IsSet() {
		toSerialize["tax_type"] = o.TaxType.Get()
	}
	if o.CreatedAt.IsSet() {
		toSerialize["created_at"] = o.CreatedAt.Get()
	}
	if o.ModifiedAt.IsSet() {
		toSerialize["modified_at"] = o.ModifiedAt.Get()
	}
	if !IsNil(o.TaxRates) {
		toSerialize["tax_rates"] = o.TaxRates
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableResponseTaxClassInfoResult struct {
	value *ResponseTaxClassInfoResult
	isSet bool
}

func (v NullableResponseTaxClassInfoResult) Get() *ResponseTaxClassInfoResult {
	return v.value
}

func (v *NullableResponseTaxClassInfoResult) Set(val *ResponseTaxClassInfoResult) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseTaxClassInfoResult) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseTaxClassInfoResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseTaxClassInfoResult(val *ResponseTaxClassInfoResult) *NullableResponseTaxClassInfoResult {
	return &NullableResponseTaxClassInfoResult{value: val, isSet: true}
}

func (v NullableResponseTaxClassInfoResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseTaxClassInfoResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


