/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrderItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderItem{}

// OrderItem struct for OrderItem
type OrderItem struct {
	ProductId NullableString `json:"product_id,omitempty"`
	OrderProductId NullableString `json:"order_product_id,omitempty"`
	Model NullableString `json:"model,omitempty"`
	Name *string `json:"name,omitempty"`
	Price *float32 `json:"price,omitempty"`
	PriceIncTax NullableFloat32 `json:"price_inc_tax,omitempty"`
	Quantity NullableFloat32 `json:"quantity,omitempty"`
	DiscountAmount NullableFloat32 `json:"discount_amount,omitempty"`
	TotalPrice NullableFloat32 `json:"total_price,omitempty"`
	TaxPercent NullableFloat32 `json:"tax_percent,omitempty"`
	TaxValue NullableFloat32 `json:"tax_value,omitempty"`
	TaxValueAfterDiscount NullableFloat32 `json:"tax_value_after_discount,omitempty"`
	Options []OrderItemOption `json:"options,omitempty"`
	VariantId NullableString `json:"variant_id,omitempty"`
	WeightUnit NullableString `json:"weight_unit,omitempty"`
	Weight NullableFloat32 `json:"weight,omitempty"`
	Barcode NullableString `json:"barcode,omitempty"`
	ParentOrderProductId NullableString `json:"parent_order_product_id,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewOrderItem instantiates a new OrderItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderItem() *OrderItem {
	this := OrderItem{}
	return &this
}

// NewOrderItemWithDefaults instantiates a new OrderItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderItemWithDefaults() *OrderItem {
	this := OrderItem{}
	return &this
}

// GetProductId returns the ProductId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItem) GetProductId() string {
	if o == nil || IsNil(o.ProductId.Get()) {
		var ret string
		return ret
	}
	return *o.ProductId.Get()
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItem) GetProductIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductId.Get(), o.ProductId.IsSet()
}

// HasProductId returns a boolean if a field has been set.
func (o *OrderItem) HasProductId() bool {
	if o != nil && o.ProductId.IsSet() {
		return true
	}

	return false
}

// SetProductId gets a reference to the given NullableString and assigns it to the ProductId field.
func (o *OrderItem) SetProductId(v string) {
	o.ProductId.Set(&v)
}
// SetProductIdNil sets the value for ProductId to be an explicit nil
func (o *OrderItem) SetProductIdNil() {
	o.ProductId.Set(nil)
}

// UnsetProductId ensures that no value is present for ProductId, not even an explicit nil
func (o *OrderItem) UnsetProductId() {
	o.ProductId.Unset()
}

// GetOrderProductId returns the OrderProductId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItem) GetOrderProductId() string {
	if o == nil || IsNil(o.OrderProductId.Get()) {
		var ret string
		return ret
	}
	return *o.OrderProductId.Get()
}

// GetOrderProductIdOk returns a tuple with the OrderProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItem) GetOrderProductIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrderProductId.Get(), o.OrderProductId.IsSet()
}

// HasOrderProductId returns a boolean if a field has been set.
func (o *OrderItem) HasOrderProductId() bool {
	if o != nil && o.OrderProductId.IsSet() {
		return true
	}

	return false
}

// SetOrderProductId gets a reference to the given NullableString and assigns it to the OrderProductId field.
func (o *OrderItem) SetOrderProductId(v string) {
	o.OrderProductId.Set(&v)
}
// SetOrderProductIdNil sets the value for OrderProductId to be an explicit nil
func (o *OrderItem) SetOrderProductIdNil() {
	o.OrderProductId.Set(nil)
}

// UnsetOrderProductId ensures that no value is present for OrderProductId, not even an explicit nil
func (o *OrderItem) UnsetOrderProductId() {
	o.OrderProductId.Unset()
}

// GetModel returns the Model field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItem) GetModel() string {
	if o == nil || IsNil(o.Model.Get()) {
		var ret string
		return ret
	}
	return *o.Model.Get()
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItem) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Model.Get(), o.Model.IsSet()
}

// HasModel returns a boolean if a field has been set.
func (o *OrderItem) HasModel() bool {
	if o != nil && o.Model.IsSet() {
		return true
	}

	return false
}

// SetModel gets a reference to the given NullableString and assigns it to the Model field.
func (o *OrderItem) SetModel(v string) {
	o.Model.Set(&v)
}
// SetModelNil sets the value for Model to be an explicit nil
func (o *OrderItem) SetModelNil() {
	o.Model.Set(nil)
}

// UnsetModel ensures that no value is present for Model, not even an explicit nil
func (o *OrderItem) UnsetModel() {
	o.Model.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OrderItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OrderItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OrderItem) SetName(v string) {
	o.Name = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *OrderItem) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItem) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *OrderItem) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *OrderItem) SetPrice(v float32) {
	o.Price = &v
}

// GetPriceIncTax returns the PriceIncTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItem) GetPriceIncTax() float32 {
	if o == nil || IsNil(o.PriceIncTax.Get()) {
		var ret float32
		return ret
	}
	return *o.PriceIncTax.Get()
}

// GetPriceIncTaxOk returns a tuple with the PriceIncTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItem) GetPriceIncTaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriceIncTax.Get(), o.PriceIncTax.IsSet()
}

// HasPriceIncTax returns a boolean if a field has been set.
func (o *OrderItem) HasPriceIncTax() bool {
	if o != nil && o.PriceIncTax.IsSet() {
		return true
	}

	return false
}

// SetPriceIncTax gets a reference to the given NullableFloat32 and assigns it to the PriceIncTax field.
func (o *OrderItem) SetPriceIncTax(v float32) {
	o.PriceIncTax.Set(&v)
}
// SetPriceIncTaxNil sets the value for PriceIncTax to be an explicit nil
func (o *OrderItem) SetPriceIncTaxNil() {
	o.PriceIncTax.Set(nil)
}

// UnsetPriceIncTax ensures that no value is present for PriceIncTax, not even an explicit nil
func (o *OrderItem) UnsetPriceIncTax() {
	o.PriceIncTax.Unset()
}

// GetQuantity returns the Quantity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItem) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity.Get()) {
		var ret float32
		return ret
	}
	return *o.Quantity.Get()
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItem) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quantity.Get(), o.Quantity.IsSet()
}

// HasQuantity returns a boolean if a field has been set.
func (o *OrderItem) HasQuantity() bool {
	if o != nil && o.Quantity.IsSet() {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given NullableFloat32 and assigns it to the Quantity field.
func (o *OrderItem) SetQuantity(v float32) {
	o.Quantity.Set(&v)
}
// SetQuantityNil sets the value for Quantity to be an explicit nil
func (o *OrderItem) SetQuantityNil() {
	o.Quantity.Set(nil)
}

// UnsetQuantity ensures that no value is present for Quantity, not even an explicit nil
func (o *OrderItem) UnsetQuantity() {
	o.Quantity.Unset()
}

// GetDiscountAmount returns the DiscountAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItem) GetDiscountAmount() float32 {
	if o == nil || IsNil(o.DiscountAmount.Get()) {
		var ret float32
		return ret
	}
	return *o.DiscountAmount.Get()
}

// GetDiscountAmountOk returns a tuple with the DiscountAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItem) GetDiscountAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiscountAmount.Get(), o.DiscountAmount.IsSet()
}

// HasDiscountAmount returns a boolean if a field has been set.
func (o *OrderItem) HasDiscountAmount() bool {
	if o != nil && o.DiscountAmount.IsSet() {
		return true
	}

	return false
}

// SetDiscountAmount gets a reference to the given NullableFloat32 and assigns it to the DiscountAmount field.
func (o *OrderItem) SetDiscountAmount(v float32) {
	o.DiscountAmount.Set(&v)
}
// SetDiscountAmountNil sets the value for DiscountAmount to be an explicit nil
func (o *OrderItem) SetDiscountAmountNil() {
	o.DiscountAmount.Set(nil)
}

// UnsetDiscountAmount ensures that no value is present for DiscountAmount, not even an explicit nil
func (o *OrderItem) UnsetDiscountAmount() {
	o.DiscountAmount.Unset()
}

// GetTotalPrice returns the TotalPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItem) GetTotalPrice() float32 {
	if o == nil || IsNil(o.TotalPrice.Get()) {
		var ret float32
		return ret
	}
	return *o.TotalPrice.Get()
}

// GetTotalPriceOk returns a tuple with the TotalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItem) GetTotalPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalPrice.Get(), o.TotalPrice.IsSet()
}

// HasTotalPrice returns a boolean if a field has been set.
func (o *OrderItem) HasTotalPrice() bool {
	if o != nil && o.TotalPrice.IsSet() {
		return true
	}

	return false
}

// SetTotalPrice gets a reference to the given NullableFloat32 and assigns it to the TotalPrice field.
func (o *OrderItem) SetTotalPrice(v float32) {
	o.TotalPrice.Set(&v)
}
// SetTotalPriceNil sets the value for TotalPrice to be an explicit nil
func (o *OrderItem) SetTotalPriceNil() {
	o.TotalPrice.Set(nil)
}

// UnsetTotalPrice ensures that no value is present for TotalPrice, not even an explicit nil
func (o *OrderItem) UnsetTotalPrice() {
	o.TotalPrice.Unset()
}

// GetTaxPercent returns the TaxPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItem) GetTaxPercent() float32 {
	if o == nil || IsNil(o.TaxPercent.Get()) {
		var ret float32
		return ret
	}
	return *o.TaxPercent.Get()
}

// GetTaxPercentOk returns a tuple with the TaxPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItem) GetTaxPercentOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxPercent.Get(), o.TaxPercent.IsSet()
}

// HasTaxPercent returns a boolean if a field has been set.
func (o *OrderItem) HasTaxPercent() bool {
	if o != nil && o.TaxPercent.IsSet() {
		return true
	}

	return false
}

// SetTaxPercent gets a reference to the given NullableFloat32 and assigns it to the TaxPercent field.
func (o *OrderItem) SetTaxPercent(v float32) {
	o.TaxPercent.Set(&v)
}
// SetTaxPercentNil sets the value for TaxPercent to be an explicit nil
func (o *OrderItem) SetTaxPercentNil() {
	o.TaxPercent.Set(nil)
}

// UnsetTaxPercent ensures that no value is present for TaxPercent, not even an explicit nil
func (o *OrderItem) UnsetTaxPercent() {
	o.TaxPercent.Unset()
}

// GetTaxValue returns the TaxValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItem) GetTaxValue() float32 {
	if o == nil || IsNil(o.TaxValue.Get()) {
		var ret float32
		return ret
	}
	return *o.TaxValue.Get()
}

// GetTaxValueOk returns a tuple with the TaxValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItem) GetTaxValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxValue.Get(), o.TaxValue.IsSet()
}

// HasTaxValue returns a boolean if a field has been set.
func (o *OrderItem) HasTaxValue() bool {
	if o != nil && o.TaxValue.IsSet() {
		return true
	}

	return false
}

// SetTaxValue gets a reference to the given NullableFloat32 and assigns it to the TaxValue field.
func (o *OrderItem) SetTaxValue(v float32) {
	o.TaxValue.Set(&v)
}
// SetTaxValueNil sets the value for TaxValue to be an explicit nil
func (o *OrderItem) SetTaxValueNil() {
	o.TaxValue.Set(nil)
}

// UnsetTaxValue ensures that no value is present for TaxValue, not even an explicit nil
func (o *OrderItem) UnsetTaxValue() {
	o.TaxValue.Unset()
}

// GetTaxValueAfterDiscount returns the TaxValueAfterDiscount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItem) GetTaxValueAfterDiscount() float32 {
	if o == nil || IsNil(o.TaxValueAfterDiscount.Get()) {
		var ret float32
		return ret
	}
	return *o.TaxValueAfterDiscount.Get()
}

// GetTaxValueAfterDiscountOk returns a tuple with the TaxValueAfterDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItem) GetTaxValueAfterDiscountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxValueAfterDiscount.Get(), o.TaxValueAfterDiscount.IsSet()
}

// HasTaxValueAfterDiscount returns a boolean if a field has been set.
func (o *OrderItem) HasTaxValueAfterDiscount() bool {
	if o != nil && o.TaxValueAfterDiscount.IsSet() {
		return true
	}

	return false
}

// SetTaxValueAfterDiscount gets a reference to the given NullableFloat32 and assigns it to the TaxValueAfterDiscount field.
func (o *OrderItem) SetTaxValueAfterDiscount(v float32) {
	o.TaxValueAfterDiscount.Set(&v)
}
// SetTaxValueAfterDiscountNil sets the value for TaxValueAfterDiscount to be an explicit nil
func (o *OrderItem) SetTaxValueAfterDiscountNil() {
	o.TaxValueAfterDiscount.Set(nil)
}

// UnsetTaxValueAfterDiscount ensures that no value is present for TaxValueAfterDiscount, not even an explicit nil
func (o *OrderItem) UnsetTaxValueAfterDiscount() {
	o.TaxValueAfterDiscount.Unset()
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *OrderItem) GetOptions() []OrderItemOption {
	if o == nil || IsNil(o.Options) {
		var ret []OrderItemOption
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItem) GetOptionsOk() ([]OrderItemOption, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *OrderItem) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []OrderItemOption and assigns it to the Options field.
func (o *OrderItem) SetOptions(v []OrderItemOption) {
	o.Options = v
}

// GetVariantId returns the VariantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItem) GetVariantId() string {
	if o == nil || IsNil(o.VariantId.Get()) {
		var ret string
		return ret
	}
	return *o.VariantId.Get()
}

// GetVariantIdOk returns a tuple with the VariantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItem) GetVariantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariantId.Get(), o.VariantId.IsSet()
}

// HasVariantId returns a boolean if a field has been set.
func (o *OrderItem) HasVariantId() bool {
	if o != nil && o.VariantId.IsSet() {
		return true
	}

	return false
}

// SetVariantId gets a reference to the given NullableString and assigns it to the VariantId field.
func (o *OrderItem) SetVariantId(v string) {
	o.VariantId.Set(&v)
}
// SetVariantIdNil sets the value for VariantId to be an explicit nil
func (o *OrderItem) SetVariantIdNil() {
	o.VariantId.Set(nil)
}

// UnsetVariantId ensures that no value is present for VariantId, not even an explicit nil
func (o *OrderItem) UnsetVariantId() {
	o.VariantId.Unset()
}

// GetWeightUnit returns the WeightUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItem) GetWeightUnit() string {
	if o == nil || IsNil(o.WeightUnit.Get()) {
		var ret string
		return ret
	}
	return *o.WeightUnit.Get()
}

// GetWeightUnitOk returns a tuple with the WeightUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItem) GetWeightUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WeightUnit.Get(), o.WeightUnit.IsSet()
}

// HasWeightUnit returns a boolean if a field has been set.
func (o *OrderItem) HasWeightUnit() bool {
	if o != nil && o.WeightUnit.IsSet() {
		return true
	}

	return false
}

// SetWeightUnit gets a reference to the given NullableString and assigns it to the WeightUnit field.
func (o *OrderItem) SetWeightUnit(v string) {
	o.WeightUnit.Set(&v)
}
// SetWeightUnitNil sets the value for WeightUnit to be an explicit nil
func (o *OrderItem) SetWeightUnitNil() {
	o.WeightUnit.Set(nil)
}

// UnsetWeightUnit ensures that no value is present for WeightUnit, not even an explicit nil
func (o *OrderItem) UnsetWeightUnit() {
	o.WeightUnit.Unset()
}

// GetWeight returns the Weight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItem) GetWeight() float32 {
	if o == nil || IsNil(o.Weight.Get()) {
		var ret float32
		return ret
	}
	return *o.Weight.Get()
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItem) GetWeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Weight.Get(), o.Weight.IsSet()
}

// HasWeight returns a boolean if a field has been set.
func (o *OrderItem) HasWeight() bool {
	if o != nil && o.Weight.IsSet() {
		return true
	}

	return false
}

// SetWeight gets a reference to the given NullableFloat32 and assigns it to the Weight field.
func (o *OrderItem) SetWeight(v float32) {
	o.Weight.Set(&v)
}
// SetWeightNil sets the value for Weight to be an explicit nil
func (o *OrderItem) SetWeightNil() {
	o.Weight.Set(nil)
}

// UnsetWeight ensures that no value is present for Weight, not even an explicit nil
func (o *OrderItem) UnsetWeight() {
	o.Weight.Unset()
}

// GetBarcode returns the Barcode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItem) GetBarcode() string {
	if o == nil || IsNil(o.Barcode.Get()) {
		var ret string
		return ret
	}
	return *o.Barcode.Get()
}

// GetBarcodeOk returns a tuple with the Barcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItem) GetBarcodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Barcode.Get(), o.Barcode.IsSet()
}

// HasBarcode returns a boolean if a field has been set.
func (o *OrderItem) HasBarcode() bool {
	if o != nil && o.Barcode.IsSet() {
		return true
	}

	return false
}

// SetBarcode gets a reference to the given NullableString and assigns it to the Barcode field.
func (o *OrderItem) SetBarcode(v string) {
	o.Barcode.Set(&v)
}
// SetBarcodeNil sets the value for Barcode to be an explicit nil
func (o *OrderItem) SetBarcodeNil() {
	o.Barcode.Set(nil)
}

// UnsetBarcode ensures that no value is present for Barcode, not even an explicit nil
func (o *OrderItem) UnsetBarcode() {
	o.Barcode.Unset()
}

// GetParentOrderProductId returns the ParentOrderProductId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItem) GetParentOrderProductId() string {
	if o == nil || IsNil(o.ParentOrderProductId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentOrderProductId.Get()
}

// GetParentOrderProductIdOk returns a tuple with the ParentOrderProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItem) GetParentOrderProductIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentOrderProductId.Get(), o.ParentOrderProductId.IsSet()
}

// HasParentOrderProductId returns a boolean if a field has been set.
func (o *OrderItem) HasParentOrderProductId() bool {
	if o != nil && o.ParentOrderProductId.IsSet() {
		return true
	}

	return false
}

// SetParentOrderProductId gets a reference to the given NullableString and assigns it to the ParentOrderProductId field.
func (o *OrderItem) SetParentOrderProductId(v string) {
	o.ParentOrderProductId.Set(&v)
}
// SetParentOrderProductIdNil sets the value for ParentOrderProductId to be an explicit nil
func (o *OrderItem) SetParentOrderProductIdNil() {
	o.ParentOrderProductId.Set(nil)
}

// UnsetParentOrderProductId ensures that no value is present for ParentOrderProductId, not even an explicit nil
func (o *OrderItem) UnsetParentOrderProductId() {
	o.ParentOrderProductId.Unset()
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItem) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItem) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *OrderItem) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *OrderItem) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItem) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItem) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *OrderItem) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *OrderItem) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o OrderItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ProductId.IsSet() {
		toSerialize["product_id"] = o.ProductId.Get()
	}
	if o.OrderProductId.IsSet() {
		toSerialize["order_product_id"] = o.OrderProductId.Get()
	}
	if o.Model.IsSet() {
		toSerialize["model"] = o.Model.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if o.PriceIncTax.IsSet() {
		toSerialize["price_inc_tax"] = o.PriceIncTax.Get()
	}
	if o.Quantity.IsSet() {
		toSerialize["quantity"] = o.Quantity.Get()
	}
	if o.DiscountAmount.IsSet() {
		toSerialize["discount_amount"] = o.DiscountAmount.Get()
	}
	if o.TotalPrice.IsSet() {
		toSerialize["total_price"] = o.TotalPrice.Get()
	}
	if o.TaxPercent.IsSet() {
		toSerialize["tax_percent"] = o.TaxPercent.Get()
	}
	if o.TaxValue.IsSet() {
		toSerialize["tax_value"] = o.TaxValue.Get()
	}
	if o.TaxValueAfterDiscount.IsSet() {
		toSerialize["tax_value_after_discount"] = o.TaxValueAfterDiscount.Get()
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if o.VariantId.IsSet() {
		toSerialize["variant_id"] = o.VariantId.Get()
	}
	if o.WeightUnit.IsSet() {
		toSerialize["weight_unit"] = o.WeightUnit.Get()
	}
	if o.Weight.IsSet() {
		toSerialize["weight"] = o.Weight.Get()
	}
	if o.Barcode.IsSet() {
		toSerialize["barcode"] = o.Barcode.Get()
	}
	if o.ParentOrderProductId.IsSet() {
		toSerialize["parent_order_product_id"] = o.ParentOrderProductId.Get()
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableOrderItem struct {
	value *OrderItem
	isSet bool
}

func (v NullableOrderItem) Get() *OrderItem {
	return v.value
}

func (v *NullableOrderItem) Set(val *OrderItem) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderItem) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderItem(val *OrderItem) *NullableOrderItem {
	return &NullableOrderItem{value: val, isSet: true}
}

func (v NullableOrderItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


