/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProductVariantAddBatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductVariantAddBatch{}

// ProductVariantAddBatch struct for ProductVariantAddBatch
type ProductVariantAddBatch struct {
	ClearCache *bool `json:"clear_cache,omitempty"`
	Reindex *bool `json:"reindex,omitempty"`
	// Contains an array of product variants objects. The list of properties may vary depending on the specific platform.
	Payload []ProductVariantAddBatchPayloadInner `json:"payload"`
}

type _ProductVariantAddBatch ProductVariantAddBatch

// NewProductVariantAddBatch instantiates a new ProductVariantAddBatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductVariantAddBatch(payload []ProductVariantAddBatchPayloadInner) *ProductVariantAddBatch {
	this := ProductVariantAddBatch{}
	var clearCache bool = false
	this.ClearCache = &clearCache
	var reindex bool = false
	this.Reindex = &reindex
	this.Payload = payload
	return &this
}

// NewProductVariantAddBatchWithDefaults instantiates a new ProductVariantAddBatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductVariantAddBatchWithDefaults() *ProductVariantAddBatch {
	this := ProductVariantAddBatch{}
	var clearCache bool = false
	this.ClearCache = &clearCache
	var reindex bool = false
	this.Reindex = &reindex
	return &this
}

// GetClearCache returns the ClearCache field value if set, zero value otherwise.
func (o *ProductVariantAddBatch) GetClearCache() bool {
	if o == nil || IsNil(o.ClearCache) {
		var ret bool
		return ret
	}
	return *o.ClearCache
}

// GetClearCacheOk returns a tuple with the ClearCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAddBatch) GetClearCacheOk() (*bool, bool) {
	if o == nil || IsNil(o.ClearCache) {
		return nil, false
	}
	return o.ClearCache, true
}

// HasClearCache returns a boolean if a field has been set.
func (o *ProductVariantAddBatch) HasClearCache() bool {
	if o != nil && !IsNil(o.ClearCache) {
		return true
	}

	return false
}

// SetClearCache gets a reference to the given bool and assigns it to the ClearCache field.
func (o *ProductVariantAddBatch) SetClearCache(v bool) {
	o.ClearCache = &v
}

// GetReindex returns the Reindex field value if set, zero value otherwise.
func (o *ProductVariantAddBatch) GetReindex() bool {
	if o == nil || IsNil(o.Reindex) {
		var ret bool
		return ret
	}
	return *o.Reindex
}

// GetReindexOk returns a tuple with the Reindex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantAddBatch) GetReindexOk() (*bool, bool) {
	if o == nil || IsNil(o.Reindex) {
		return nil, false
	}
	return o.Reindex, true
}

// HasReindex returns a boolean if a field has been set.
func (o *ProductVariantAddBatch) HasReindex() bool {
	if o != nil && !IsNil(o.Reindex) {
		return true
	}

	return false
}

// SetReindex gets a reference to the given bool and assigns it to the Reindex field.
func (o *ProductVariantAddBatch) SetReindex(v bool) {
	o.Reindex = &v
}

// GetPayload returns the Payload field value
func (o *ProductVariantAddBatch) GetPayload() []ProductVariantAddBatchPayloadInner {
	if o == nil {
		var ret []ProductVariantAddBatchPayloadInner
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *ProductVariantAddBatch) GetPayloadOk() ([]ProductVariantAddBatchPayloadInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Payload, true
}

// SetPayload sets field value
func (o *ProductVariantAddBatch) SetPayload(v []ProductVariantAddBatchPayloadInner) {
	o.Payload = v
}

func (o ProductVariantAddBatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductVariantAddBatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClearCache) {
		toSerialize["clear_cache"] = o.ClearCache
	}
	if !IsNil(o.Reindex) {
		toSerialize["reindex"] = o.Reindex
	}
	toSerialize["payload"] = o.Payload
	return toSerialize, nil
}

func (o *ProductVariantAddBatch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"payload",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductVariantAddBatch := _ProductVariantAddBatch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductVariantAddBatch)

	if err != nil {
		return err
	}

	*o = ProductVariantAddBatch(varProductVariantAddBatch)

	return err
}

type NullableProductVariantAddBatch struct {
	value *ProductVariantAddBatch
	isSet bool
}

func (v NullableProductVariantAddBatch) Get() *ProductVariantAddBatch {
	return v.value
}

func (v *NullableProductVariantAddBatch) Set(val *ProductVariantAddBatch) {
	v.value = val
	v.isSet = true
}

func (v NullableProductVariantAddBatch) IsSet() bool {
	return v.isSet
}

func (v *NullableProductVariantAddBatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductVariantAddBatch(val *ProductVariantAddBatch) *NullableProductVariantAddBatch {
	return &NullableProductVariantAddBatch{value: val, isSet: true}
}

func (v NullableProductVariantAddBatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductVariantAddBatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


