/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Cart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cart{}

// Cart struct for Cart
type Cart struct {
	Name *string `json:"name,omitempty"`
	Url *string `json:"url,omitempty"`
	Version *string `json:"version,omitempty"`
	DbPrefix *string `json:"db_prefix,omitempty"`
	StoresInfo []CartStoreInfo `json:"stores_info,omitempty"`
	Warehouses []CartWarehouse `json:"warehouses,omitempty"`
	ShippingZones []CartShippingZone `json:"shipping_zones,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewCart instantiates a new Cart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCart() *Cart {
	this := Cart{}
	return &this
}

// NewCartWithDefaults instantiates a new Cart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCartWithDefaults() *Cart {
	this := Cart{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Cart) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cart) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Cart) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Cart) SetName(v string) {
	o.Name = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Cart) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cart) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Cart) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Cart) SetUrl(v string) {
	o.Url = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Cart) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cart) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Cart) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Cart) SetVersion(v string) {
	o.Version = &v
}

// GetDbPrefix returns the DbPrefix field value if set, zero value otherwise.
func (o *Cart) GetDbPrefix() string {
	if o == nil || IsNil(o.DbPrefix) {
		var ret string
		return ret
	}
	return *o.DbPrefix
}

// GetDbPrefixOk returns a tuple with the DbPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cart) GetDbPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.DbPrefix) {
		return nil, false
	}
	return o.DbPrefix, true
}

// HasDbPrefix returns a boolean if a field has been set.
func (o *Cart) HasDbPrefix() bool {
	if o != nil && !IsNil(o.DbPrefix) {
		return true
	}

	return false
}

// SetDbPrefix gets a reference to the given string and assigns it to the DbPrefix field.
func (o *Cart) SetDbPrefix(v string) {
	o.DbPrefix = &v
}

// GetStoresInfo returns the StoresInfo field value if set, zero value otherwise.
func (o *Cart) GetStoresInfo() []CartStoreInfo {
	if o == nil || IsNil(o.StoresInfo) {
		var ret []CartStoreInfo
		return ret
	}
	return o.StoresInfo
}

// GetStoresInfoOk returns a tuple with the StoresInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cart) GetStoresInfoOk() ([]CartStoreInfo, bool) {
	if o == nil || IsNil(o.StoresInfo) {
		return nil, false
	}
	return o.StoresInfo, true
}

// HasStoresInfo returns a boolean if a field has been set.
func (o *Cart) HasStoresInfo() bool {
	if o != nil && !IsNil(o.StoresInfo) {
		return true
	}

	return false
}

// SetStoresInfo gets a reference to the given []CartStoreInfo and assigns it to the StoresInfo field.
func (o *Cart) SetStoresInfo(v []CartStoreInfo) {
	o.StoresInfo = v
}

// GetWarehouses returns the Warehouses field value if set, zero value otherwise.
func (o *Cart) GetWarehouses() []CartWarehouse {
	if o == nil || IsNil(o.Warehouses) {
		var ret []CartWarehouse
		return ret
	}
	return o.Warehouses
}

// GetWarehousesOk returns a tuple with the Warehouses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cart) GetWarehousesOk() ([]CartWarehouse, bool) {
	if o == nil || IsNil(o.Warehouses) {
		return nil, false
	}
	return o.Warehouses, true
}

// HasWarehouses returns a boolean if a field has been set.
func (o *Cart) HasWarehouses() bool {
	if o != nil && !IsNil(o.Warehouses) {
		return true
	}

	return false
}

// SetWarehouses gets a reference to the given []CartWarehouse and assigns it to the Warehouses field.
func (o *Cart) SetWarehouses(v []CartWarehouse) {
	o.Warehouses = v
}

// GetShippingZones returns the ShippingZones field value if set, zero value otherwise.
func (o *Cart) GetShippingZones() []CartShippingZone {
	if o == nil || IsNil(o.ShippingZones) {
		var ret []CartShippingZone
		return ret
	}
	return o.ShippingZones
}

// GetShippingZonesOk returns a tuple with the ShippingZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cart) GetShippingZonesOk() ([]CartShippingZone, bool) {
	if o == nil || IsNil(o.ShippingZones) {
		return nil, false
	}
	return o.ShippingZones, true
}

// HasShippingZones returns a boolean if a field has been set.
func (o *Cart) HasShippingZones() bool {
	if o != nil && !IsNil(o.ShippingZones) {
		return true
	}

	return false
}

// SetShippingZones gets a reference to the given []CartShippingZone and assigns it to the ShippingZones field.
func (o *Cart) SetShippingZones(v []CartShippingZone) {
	o.ShippingZones = v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise.
func (o *Cart) GetAdditionalFields() map[string]interface{} {
	if o == nil || IsNil(o.AdditionalFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cart) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *Cart) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *Cart) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Cart) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cart) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Cart) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *Cart) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o Cart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.DbPrefix) {
		toSerialize["db_prefix"] = o.DbPrefix
	}
	if !IsNil(o.StoresInfo) {
		toSerialize["stores_info"] = o.StoresInfo
	}
	if !IsNil(o.Warehouses) {
		toSerialize["warehouses"] = o.Warehouses
	}
	if !IsNil(o.ShippingZones) {
		toSerialize["shipping_zones"] = o.ShippingZones
	}
	if !IsNil(o.AdditionalFields) {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableCart struct {
	value *Cart
	isSet bool
}

func (v NullableCart) Get() *Cart {
	return v.value
}

func (v *NullableCart) Set(val *Cart) {
	v.value = val
	v.isSet = true
}

func (v NullableCart) IsSet() bool {
	return v.isSet
}

func (v *NullableCart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCart(val *Cart) *NullableCart {
	return &NullableCart{value: val, isSet: true}
}

func (v NullableCart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


