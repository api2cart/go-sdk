/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GiftCard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GiftCard{}

// GiftCard struct for GiftCard
type GiftCard struct {
	Id *string `json:"id,omitempty"`
	Code *string `json:"code,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	CurrencyCode NullableString `json:"currency_code,omitempty"`
	Amount *float32 `json:"amount,omitempty"`
	InitialAmount *float32 `json:"initial_amount,omitempty"`
	Status *string `json:"status,omitempty"`
	CreatedAt NullableString `json:"created_at,omitempty"`
	AvailTo NullableString `json:"avail_to,omitempty"`
	FreeProductIds NullableString `json:"free_product_ids,omitempty"`
	Message NullableString `json:"message,omitempty"`
	IssuerEmail NullableString `json:"issuer_email,omitempty"`
	RecipientEmail NullableString `json:"recipient_email,omitempty"`
	IssuerName NullableString `json:"issuer_name,omitempty"`
	RecipientName NullableString `json:"recipient_name,omitempty"`
	UsageHistory []CouponHistory `json:"usage_history,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewGiftCard instantiates a new GiftCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGiftCard() *GiftCard {
	this := GiftCard{}
	return &this
}

// NewGiftCardWithDefaults instantiates a new GiftCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGiftCardWithDefaults() *GiftCard {
	this := GiftCard{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GiftCard) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCard) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GiftCard) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GiftCard) SetId(v string) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *GiftCard) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCard) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *GiftCard) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *GiftCard) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GiftCard) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GiftCard) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *GiftCard) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *GiftCard) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *GiftCard) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *GiftCard) UnsetName() {
	o.Name.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GiftCard) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCard) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GiftCard) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GiftCard) SetType(v string) {
	o.Type = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GiftCard) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode.Get()) {
		var ret string
		return ret
	}
	return *o.CurrencyCode.Get()
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GiftCard) GetCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrencyCode.Get(), o.CurrencyCode.IsSet()
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *GiftCard) HasCurrencyCode() bool {
	if o != nil && o.CurrencyCode.IsSet() {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given NullableString and assigns it to the CurrencyCode field.
func (o *GiftCard) SetCurrencyCode(v string) {
	o.CurrencyCode.Set(&v)
}
// SetCurrencyCodeNil sets the value for CurrencyCode to be an explicit nil
func (o *GiftCard) SetCurrencyCodeNil() {
	o.CurrencyCode.Set(nil)
}

// UnsetCurrencyCode ensures that no value is present for CurrencyCode, not even an explicit nil
func (o *GiftCard) UnsetCurrencyCode() {
	o.CurrencyCode.Unset()
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *GiftCard) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCard) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *GiftCard) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *GiftCard) SetAmount(v float32) {
	o.Amount = &v
}

// GetInitialAmount returns the InitialAmount field value if set, zero value otherwise.
func (o *GiftCard) GetInitialAmount() float32 {
	if o == nil || IsNil(o.InitialAmount) {
		var ret float32
		return ret
	}
	return *o.InitialAmount
}

// GetInitialAmountOk returns a tuple with the InitialAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCard) GetInitialAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.InitialAmount) {
		return nil, false
	}
	return o.InitialAmount, true
}

// HasInitialAmount returns a boolean if a field has been set.
func (o *GiftCard) HasInitialAmount() bool {
	if o != nil && !IsNil(o.InitialAmount) {
		return true
	}

	return false
}

// SetInitialAmount gets a reference to the given float32 and assigns it to the InitialAmount field.
func (o *GiftCard) SetInitialAmount(v float32) {
	o.InitialAmount = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *GiftCard) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCard) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *GiftCard) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *GiftCard) SetStatus(v string) {
	o.Status = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GiftCard) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GiftCard) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *GiftCard) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given NullableString and assigns it to the CreatedAt field.
func (o *GiftCard) SetCreatedAt(v string) {
	o.CreatedAt.Set(&v)
}
// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *GiftCard) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *GiftCard) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetAvailTo returns the AvailTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GiftCard) GetAvailTo() string {
	if o == nil || IsNil(o.AvailTo.Get()) {
		var ret string
		return ret
	}
	return *o.AvailTo.Get()
}

// GetAvailToOk returns a tuple with the AvailTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GiftCard) GetAvailToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvailTo.Get(), o.AvailTo.IsSet()
}

// HasAvailTo returns a boolean if a field has been set.
func (o *GiftCard) HasAvailTo() bool {
	if o != nil && o.AvailTo.IsSet() {
		return true
	}

	return false
}

// SetAvailTo gets a reference to the given NullableString and assigns it to the AvailTo field.
func (o *GiftCard) SetAvailTo(v string) {
	o.AvailTo.Set(&v)
}
// SetAvailToNil sets the value for AvailTo to be an explicit nil
func (o *GiftCard) SetAvailToNil() {
	o.AvailTo.Set(nil)
}

// UnsetAvailTo ensures that no value is present for AvailTo, not even an explicit nil
func (o *GiftCard) UnsetAvailTo() {
	o.AvailTo.Unset()
}

// GetFreeProductIds returns the FreeProductIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GiftCard) GetFreeProductIds() string {
	if o == nil || IsNil(o.FreeProductIds.Get()) {
		var ret string
		return ret
	}
	return *o.FreeProductIds.Get()
}

// GetFreeProductIdsOk returns a tuple with the FreeProductIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GiftCard) GetFreeProductIdsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FreeProductIds.Get(), o.FreeProductIds.IsSet()
}

// HasFreeProductIds returns a boolean if a field has been set.
func (o *GiftCard) HasFreeProductIds() bool {
	if o != nil && o.FreeProductIds.IsSet() {
		return true
	}

	return false
}

// SetFreeProductIds gets a reference to the given NullableString and assigns it to the FreeProductIds field.
func (o *GiftCard) SetFreeProductIds(v string) {
	o.FreeProductIds.Set(&v)
}
// SetFreeProductIdsNil sets the value for FreeProductIds to be an explicit nil
func (o *GiftCard) SetFreeProductIdsNil() {
	o.FreeProductIds.Set(nil)
}

// UnsetFreeProductIds ensures that no value is present for FreeProductIds, not even an explicit nil
func (o *GiftCard) UnsetFreeProductIds() {
	o.FreeProductIds.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GiftCard) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GiftCard) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *GiftCard) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *GiftCard) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *GiftCard) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *GiftCard) UnsetMessage() {
	o.Message.Unset()
}

// GetIssuerEmail returns the IssuerEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GiftCard) GetIssuerEmail() string {
	if o == nil || IsNil(o.IssuerEmail.Get()) {
		var ret string
		return ret
	}
	return *o.IssuerEmail.Get()
}

// GetIssuerEmailOk returns a tuple with the IssuerEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GiftCard) GetIssuerEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssuerEmail.Get(), o.IssuerEmail.IsSet()
}

// HasIssuerEmail returns a boolean if a field has been set.
func (o *GiftCard) HasIssuerEmail() bool {
	if o != nil && o.IssuerEmail.IsSet() {
		return true
	}

	return false
}

// SetIssuerEmail gets a reference to the given NullableString and assigns it to the IssuerEmail field.
func (o *GiftCard) SetIssuerEmail(v string) {
	o.IssuerEmail.Set(&v)
}
// SetIssuerEmailNil sets the value for IssuerEmail to be an explicit nil
func (o *GiftCard) SetIssuerEmailNil() {
	o.IssuerEmail.Set(nil)
}

// UnsetIssuerEmail ensures that no value is present for IssuerEmail, not even an explicit nil
func (o *GiftCard) UnsetIssuerEmail() {
	o.IssuerEmail.Unset()
}

// GetRecipientEmail returns the RecipientEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GiftCard) GetRecipientEmail() string {
	if o == nil || IsNil(o.RecipientEmail.Get()) {
		var ret string
		return ret
	}
	return *o.RecipientEmail.Get()
}

// GetRecipientEmailOk returns a tuple with the RecipientEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GiftCard) GetRecipientEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecipientEmail.Get(), o.RecipientEmail.IsSet()
}

// HasRecipientEmail returns a boolean if a field has been set.
func (o *GiftCard) HasRecipientEmail() bool {
	if o != nil && o.RecipientEmail.IsSet() {
		return true
	}

	return false
}

// SetRecipientEmail gets a reference to the given NullableString and assigns it to the RecipientEmail field.
func (o *GiftCard) SetRecipientEmail(v string) {
	o.RecipientEmail.Set(&v)
}
// SetRecipientEmailNil sets the value for RecipientEmail to be an explicit nil
func (o *GiftCard) SetRecipientEmailNil() {
	o.RecipientEmail.Set(nil)
}

// UnsetRecipientEmail ensures that no value is present for RecipientEmail, not even an explicit nil
func (o *GiftCard) UnsetRecipientEmail() {
	o.RecipientEmail.Unset()
}

// GetIssuerName returns the IssuerName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GiftCard) GetIssuerName() string {
	if o == nil || IsNil(o.IssuerName.Get()) {
		var ret string
		return ret
	}
	return *o.IssuerName.Get()
}

// GetIssuerNameOk returns a tuple with the IssuerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GiftCard) GetIssuerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssuerName.Get(), o.IssuerName.IsSet()
}

// HasIssuerName returns a boolean if a field has been set.
func (o *GiftCard) HasIssuerName() bool {
	if o != nil && o.IssuerName.IsSet() {
		return true
	}

	return false
}

// SetIssuerName gets a reference to the given NullableString and assigns it to the IssuerName field.
func (o *GiftCard) SetIssuerName(v string) {
	o.IssuerName.Set(&v)
}
// SetIssuerNameNil sets the value for IssuerName to be an explicit nil
func (o *GiftCard) SetIssuerNameNil() {
	o.IssuerName.Set(nil)
}

// UnsetIssuerName ensures that no value is present for IssuerName, not even an explicit nil
func (o *GiftCard) UnsetIssuerName() {
	o.IssuerName.Unset()
}

// GetRecipientName returns the RecipientName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GiftCard) GetRecipientName() string {
	if o == nil || IsNil(o.RecipientName.Get()) {
		var ret string
		return ret
	}
	return *o.RecipientName.Get()
}

// GetRecipientNameOk returns a tuple with the RecipientName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GiftCard) GetRecipientNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecipientName.Get(), o.RecipientName.IsSet()
}

// HasRecipientName returns a boolean if a field has been set.
func (o *GiftCard) HasRecipientName() bool {
	if o != nil && o.RecipientName.IsSet() {
		return true
	}

	return false
}

// SetRecipientName gets a reference to the given NullableString and assigns it to the RecipientName field.
func (o *GiftCard) SetRecipientName(v string) {
	o.RecipientName.Set(&v)
}
// SetRecipientNameNil sets the value for RecipientName to be an explicit nil
func (o *GiftCard) SetRecipientNameNil() {
	o.RecipientName.Set(nil)
}

// UnsetRecipientName ensures that no value is present for RecipientName, not even an explicit nil
func (o *GiftCard) UnsetRecipientName() {
	o.RecipientName.Unset()
}

// GetUsageHistory returns the UsageHistory field value if set, zero value otherwise.
func (o *GiftCard) GetUsageHistory() []CouponHistory {
	if o == nil || IsNil(o.UsageHistory) {
		var ret []CouponHistory
		return ret
	}
	return o.UsageHistory
}

// GetUsageHistoryOk returns a tuple with the UsageHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCard) GetUsageHistoryOk() ([]CouponHistory, bool) {
	if o == nil || IsNil(o.UsageHistory) {
		return nil, false
	}
	return o.UsageHistory, true
}

// HasUsageHistory returns a boolean if a field has been set.
func (o *GiftCard) HasUsageHistory() bool {
	if o != nil && !IsNil(o.UsageHistory) {
		return true
	}

	return false
}

// SetUsageHistory gets a reference to the given []CouponHistory and assigns it to the UsageHistory field.
func (o *GiftCard) SetUsageHistory(v []CouponHistory) {
	o.UsageHistory = v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GiftCard) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GiftCard) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *GiftCard) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *GiftCard) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GiftCard) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GiftCard) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *GiftCard) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *GiftCard) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o GiftCard) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GiftCard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.CurrencyCode.IsSet() {
		toSerialize["currency_code"] = o.CurrencyCode.Get()
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.InitialAmount) {
		toSerialize["initial_amount"] = o.InitialAmount
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.CreatedAt.IsSet() {
		toSerialize["created_at"] = o.CreatedAt.Get()
	}
	if o.AvailTo.IsSet() {
		toSerialize["avail_to"] = o.AvailTo.Get()
	}
	if o.FreeProductIds.IsSet() {
		toSerialize["free_product_ids"] = o.FreeProductIds.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.IssuerEmail.IsSet() {
		toSerialize["issuer_email"] = o.IssuerEmail.Get()
	}
	if o.RecipientEmail.IsSet() {
		toSerialize["recipient_email"] = o.RecipientEmail.Get()
	}
	if o.IssuerName.IsSet() {
		toSerialize["issuer_name"] = o.IssuerName.Get()
	}
	if o.RecipientName.IsSet() {
		toSerialize["recipient_name"] = o.RecipientName.Get()
	}
	if !IsNil(o.UsageHistory) {
		toSerialize["usage_history"] = o.UsageHistory
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableGiftCard struct {
	value *GiftCard
	isSet bool
}

func (v NullableGiftCard) Get() *GiftCard {
	return v.value
}

func (v *NullableGiftCard) Set(val *GiftCard) {
	v.value = val
	v.isSet = true
}

func (v NullableGiftCard) IsSet() bool {
	return v.isSet
}

func (v *NullableGiftCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGiftCard(val *GiftCard) *NullableGiftCard {
	return &NullableGiftCard{value: val, isSet: true}
}

func (v NullableGiftCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGiftCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


