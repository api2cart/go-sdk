/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CartConfigUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CartConfigUpdate{}

// CartConfigUpdate struct for CartConfigUpdate
type CartConfigUpdate struct {
	// This parameter is deprecated for this method. Please, use this parameter in method account.config.update
	DbTablesPrefix *string `json:"db_tables_prefix,omitempty"`
	// This parameter sets the list of params to the shopping cart.
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	// Store Id
	StoreId *string `json:"store_id,omitempty"`
	// This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store's firewall may block specific values.
	UserAgent *string `json:"user_agent,omitempty"`
}

// NewCartConfigUpdate instantiates a new CartConfigUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCartConfigUpdate() *CartConfigUpdate {
	this := CartConfigUpdate{}
	return &this
}

// NewCartConfigUpdateWithDefaults instantiates a new CartConfigUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCartConfigUpdateWithDefaults() *CartConfigUpdate {
	this := CartConfigUpdate{}
	return &this
}

// GetDbTablesPrefix returns the DbTablesPrefix field value if set, zero value otherwise.
func (o *CartConfigUpdate) GetDbTablesPrefix() string {
	if o == nil || IsNil(o.DbTablesPrefix) {
		var ret string
		return ret
	}
	return *o.DbTablesPrefix
}

// GetDbTablesPrefixOk returns a tuple with the DbTablesPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartConfigUpdate) GetDbTablesPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.DbTablesPrefix) {
		return nil, false
	}
	return o.DbTablesPrefix, true
}

// HasDbTablesPrefix returns a boolean if a field has been set.
func (o *CartConfigUpdate) HasDbTablesPrefix() bool {
	if o != nil && !IsNil(o.DbTablesPrefix) {
		return true
	}

	return false
}

// SetDbTablesPrefix gets a reference to the given string and assigns it to the DbTablesPrefix field.
func (o *CartConfigUpdate) SetDbTablesPrefix(v string) {
	o.DbTablesPrefix = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *CartConfigUpdate) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartConfigUpdate) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *CartConfigUpdate) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *CartConfigUpdate) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

// GetStoreId returns the StoreId field value if set, zero value otherwise.
func (o *CartConfigUpdate) GetStoreId() string {
	if o == nil || IsNil(o.StoreId) {
		var ret string
		return ret
	}
	return *o.StoreId
}

// GetStoreIdOk returns a tuple with the StoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartConfigUpdate) GetStoreIdOk() (*string, bool) {
	if o == nil || IsNil(o.StoreId) {
		return nil, false
	}
	return o.StoreId, true
}

// HasStoreId returns a boolean if a field has been set.
func (o *CartConfigUpdate) HasStoreId() bool {
	if o != nil && !IsNil(o.StoreId) {
		return true
	}

	return false
}

// SetStoreId gets a reference to the given string and assigns it to the StoreId field.
func (o *CartConfigUpdate) SetStoreId(v string) {
	o.StoreId = &v
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *CartConfigUpdate) GetUserAgent() string {
	if o == nil || IsNil(o.UserAgent) {
		var ret string
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartConfigUpdate) GetUserAgentOk() (*string, bool) {
	if o == nil || IsNil(o.UserAgent) {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *CartConfigUpdate) HasUserAgent() bool {
	if o != nil && !IsNil(o.UserAgent) {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given string and assigns it to the UserAgent field.
func (o *CartConfigUpdate) SetUserAgent(v string) {
	o.UserAgent = &v
}

func (o CartConfigUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CartConfigUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DbTablesPrefix) {
		toSerialize["db_tables_prefix"] = o.DbTablesPrefix
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if !IsNil(o.StoreId) {
		toSerialize["store_id"] = o.StoreId
	}
	if !IsNil(o.UserAgent) {
		toSerialize["user_agent"] = o.UserAgent
	}
	return toSerialize, nil
}

type NullableCartConfigUpdate struct {
	value *CartConfigUpdate
	isSet bool
}

func (v NullableCartConfigUpdate) Get() *CartConfigUpdate {
	return v.value
}

func (v *NullableCartConfigUpdate) Set(val *CartConfigUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableCartConfigUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableCartConfigUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCartConfigUpdate(val *CartConfigUpdate) *NullableCartConfigUpdate {
	return &NullableCartConfigUpdate{value: val, isSet: true}
}

func (v NullableCartConfigUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCartConfigUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


