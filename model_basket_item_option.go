/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BasketItemOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BasketItemOption{}

// BasketItemOption struct for BasketItemOption
type BasketItemOption struct {
	Id NullableString `json:"id,omitempty"`
	ValueId NullableString `json:"value_id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Value NullableString `json:"value,omitempty"`
	UsedInCombination NullableBool `json:"used_in_combination,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewBasketItemOption instantiates a new BasketItemOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasketItemOption() *BasketItemOption {
	this := BasketItemOption{}
	return &this
}

// NewBasketItemOptionWithDefaults instantiates a new BasketItemOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasketItemOptionWithDefaults() *BasketItemOption {
	this := BasketItemOption{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasketItemOption) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasketItemOption) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *BasketItemOption) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *BasketItemOption) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *BasketItemOption) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *BasketItemOption) UnsetId() {
	o.Id.Unset()
}

// GetValueId returns the ValueId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasketItemOption) GetValueId() string {
	if o == nil || IsNil(o.ValueId.Get()) {
		var ret string
		return ret
	}
	return *o.ValueId.Get()
}

// GetValueIdOk returns a tuple with the ValueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasketItemOption) GetValueIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValueId.Get(), o.ValueId.IsSet()
}

// HasValueId returns a boolean if a field has been set.
func (o *BasketItemOption) HasValueId() bool {
	if o != nil && o.ValueId.IsSet() {
		return true
	}

	return false
}

// SetValueId gets a reference to the given NullableString and assigns it to the ValueId field.
func (o *BasketItemOption) SetValueId(v string) {
	o.ValueId.Set(&v)
}
// SetValueIdNil sets the value for ValueId to be an explicit nil
func (o *BasketItemOption) SetValueIdNil() {
	o.ValueId.Set(nil)
}

// UnsetValueId ensures that no value is present for ValueId, not even an explicit nil
func (o *BasketItemOption) UnsetValueId() {
	o.ValueId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasketItemOption) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasketItemOption) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *BasketItemOption) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *BasketItemOption) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *BasketItemOption) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *BasketItemOption) UnsetName() {
	o.Name.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasketItemOption) GetValue() string {
	if o == nil || IsNil(o.Value.Get()) {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasketItemOption) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *BasketItemOption) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *BasketItemOption) SetValue(v string) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *BasketItemOption) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *BasketItemOption) UnsetValue() {
	o.Value.Unset()
}

// GetUsedInCombination returns the UsedInCombination field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasketItemOption) GetUsedInCombination() bool {
	if o == nil || IsNil(o.UsedInCombination.Get()) {
		var ret bool
		return ret
	}
	return *o.UsedInCombination.Get()
}

// GetUsedInCombinationOk returns a tuple with the UsedInCombination field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasketItemOption) GetUsedInCombinationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsedInCombination.Get(), o.UsedInCombination.IsSet()
}

// HasUsedInCombination returns a boolean if a field has been set.
func (o *BasketItemOption) HasUsedInCombination() bool {
	if o != nil && o.UsedInCombination.IsSet() {
		return true
	}

	return false
}

// SetUsedInCombination gets a reference to the given NullableBool and assigns it to the UsedInCombination field.
func (o *BasketItemOption) SetUsedInCombination(v bool) {
	o.UsedInCombination.Set(&v)
}
// SetUsedInCombinationNil sets the value for UsedInCombination to be an explicit nil
func (o *BasketItemOption) SetUsedInCombinationNil() {
	o.UsedInCombination.Set(nil)
}

// UnsetUsedInCombination ensures that no value is present for UsedInCombination, not even an explicit nil
func (o *BasketItemOption) UnsetUsedInCombination() {
	o.UsedInCombination.Unset()
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasketItemOption) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasketItemOption) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *BasketItemOption) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *BasketItemOption) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasketItemOption) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasketItemOption) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *BasketItemOption) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *BasketItemOption) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o BasketItemOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BasketItemOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.ValueId.IsSet() {
		toSerialize["value_id"] = o.ValueId.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	if o.UsedInCombination.IsSet() {
		toSerialize["used_in_combination"] = o.UsedInCombination.Get()
	}
	if o.AdditionalFields != nil {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableBasketItemOption struct {
	value *BasketItemOption
	isSet bool
}

func (v NullableBasketItemOption) Get() *BasketItemOption {
	return v.value
}

func (v *NullableBasketItemOption) Set(val *BasketItemOption) {
	v.value = val
	v.isSet = true
}

func (v NullableBasketItemOption) IsSet() bool {
	return v.isSet
}

func (v *NullableBasketItemOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasketItemOption(val *BasketItemOption) *NullableBasketItemOption {
	return &NullableBasketItemOption{value: val, isSet: true}
}

func (v NullableBasketItemOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasketItemOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


