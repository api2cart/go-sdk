/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TaxClassRate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxClassRate{}

// TaxClassRate struct for TaxClassRate
type TaxClassRate struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Tax *float32 `json:"tax,omitempty"`
	TaxType *int32 `json:"tax_type,omitempty"`
	TaxBasedOn *string `json:"tax_based_on,omitempty"`
	Countries []TaxClassCountries `json:"countries,omitempty"`
	Cities []string `json:"cities,omitempty"`
	Address []string `json:"address,omitempty"`
	ZipCodes []TaxClassZipCodes `json:"zip_codes,omitempty"`
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewTaxClassRate instantiates a new TaxClassRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxClassRate() *TaxClassRate {
	this := TaxClassRate{}
	return &this
}

// NewTaxClassRateWithDefaults instantiates a new TaxClassRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxClassRateWithDefaults() *TaxClassRate {
	this := TaxClassRate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaxClassRate) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassRate) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaxClassRate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TaxClassRate) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TaxClassRate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassRate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TaxClassRate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TaxClassRate) SetName(v string) {
	o.Name = &v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *TaxClassRate) GetTax() float32 {
	if o == nil || IsNil(o.Tax) {
		var ret float32
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassRate) GetTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *TaxClassRate) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given float32 and assigns it to the Tax field.
func (o *TaxClassRate) SetTax(v float32) {
	o.Tax = &v
}

// GetTaxType returns the TaxType field value if set, zero value otherwise.
func (o *TaxClassRate) GetTaxType() int32 {
	if o == nil || IsNil(o.TaxType) {
		var ret int32
		return ret
	}
	return *o.TaxType
}

// GetTaxTypeOk returns a tuple with the TaxType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassRate) GetTaxTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.TaxType) {
		return nil, false
	}
	return o.TaxType, true
}

// HasTaxType returns a boolean if a field has been set.
func (o *TaxClassRate) HasTaxType() bool {
	if o != nil && !IsNil(o.TaxType) {
		return true
	}

	return false
}

// SetTaxType gets a reference to the given int32 and assigns it to the TaxType field.
func (o *TaxClassRate) SetTaxType(v int32) {
	o.TaxType = &v
}

// GetTaxBasedOn returns the TaxBasedOn field value if set, zero value otherwise.
func (o *TaxClassRate) GetTaxBasedOn() string {
	if o == nil || IsNil(o.TaxBasedOn) {
		var ret string
		return ret
	}
	return *o.TaxBasedOn
}

// GetTaxBasedOnOk returns a tuple with the TaxBasedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassRate) GetTaxBasedOnOk() (*string, bool) {
	if o == nil || IsNil(o.TaxBasedOn) {
		return nil, false
	}
	return o.TaxBasedOn, true
}

// HasTaxBasedOn returns a boolean if a field has been set.
func (o *TaxClassRate) HasTaxBasedOn() bool {
	if o != nil && !IsNil(o.TaxBasedOn) {
		return true
	}

	return false
}

// SetTaxBasedOn gets a reference to the given string and assigns it to the TaxBasedOn field.
func (o *TaxClassRate) SetTaxBasedOn(v string) {
	o.TaxBasedOn = &v
}

// GetCountries returns the Countries field value if set, zero value otherwise.
func (o *TaxClassRate) GetCountries() []TaxClassCountries {
	if o == nil || IsNil(o.Countries) {
		var ret []TaxClassCountries
		return ret
	}
	return o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassRate) GetCountriesOk() ([]TaxClassCountries, bool) {
	if o == nil || IsNil(o.Countries) {
		return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *TaxClassRate) HasCountries() bool {
	if o != nil && !IsNil(o.Countries) {
		return true
	}

	return false
}

// SetCountries gets a reference to the given []TaxClassCountries and assigns it to the Countries field.
func (o *TaxClassRate) SetCountries(v []TaxClassCountries) {
	o.Countries = v
}

// GetCities returns the Cities field value if set, zero value otherwise.
func (o *TaxClassRate) GetCities() []string {
	if o == nil || IsNil(o.Cities) {
		var ret []string
		return ret
	}
	return o.Cities
}

// GetCitiesOk returns a tuple with the Cities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassRate) GetCitiesOk() ([]string, bool) {
	if o == nil || IsNil(o.Cities) {
		return nil, false
	}
	return o.Cities, true
}

// HasCities returns a boolean if a field has been set.
func (o *TaxClassRate) HasCities() bool {
	if o != nil && !IsNil(o.Cities) {
		return true
	}

	return false
}

// SetCities gets a reference to the given []string and assigns it to the Cities field.
func (o *TaxClassRate) SetCities(v []string) {
	o.Cities = v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *TaxClassRate) GetAddress() []string {
	if o == nil || IsNil(o.Address) {
		var ret []string
		return ret
	}
	return o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassRate) GetAddressOk() ([]string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *TaxClassRate) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given []string and assigns it to the Address field.
func (o *TaxClassRate) SetAddress(v []string) {
	o.Address = v
}

// GetZipCodes returns the ZipCodes field value if set, zero value otherwise.
func (o *TaxClassRate) GetZipCodes() []TaxClassZipCodes {
	if o == nil || IsNil(o.ZipCodes) {
		var ret []TaxClassZipCodes
		return ret
	}
	return o.ZipCodes
}

// GetZipCodesOk returns a tuple with the ZipCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassRate) GetZipCodesOk() ([]TaxClassZipCodes, bool) {
	if o == nil || IsNil(o.ZipCodes) {
		return nil, false
	}
	return o.ZipCodes, true
}

// HasZipCodes returns a boolean if a field has been set.
func (o *TaxClassRate) HasZipCodes() bool {
	if o != nil && !IsNil(o.ZipCodes) {
		return true
	}

	return false
}

// SetZipCodes gets a reference to the given []TaxClassZipCodes and assigns it to the ZipCodes field.
func (o *TaxClassRate) SetZipCodes(v []TaxClassZipCodes) {
	o.ZipCodes = v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise.
func (o *TaxClassRate) GetAdditionalFields() map[string]interface{} {
	if o == nil || IsNil(o.AdditionalFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassRate) GetAdditionalFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *TaxClassRate) HasAdditionalFields() bool {
	if o != nil && !IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *TaxClassRate) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *TaxClassRate) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxClassRate) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *TaxClassRate) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *TaxClassRate) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o TaxClassRate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxClassRate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	if !IsNil(o.TaxType) {
		toSerialize["tax_type"] = o.TaxType
	}
	if !IsNil(o.TaxBasedOn) {
		toSerialize["tax_based_on"] = o.TaxBasedOn
	}
	if !IsNil(o.Countries) {
		toSerialize["countries"] = o.Countries
	}
	if !IsNil(o.Cities) {
		toSerialize["cities"] = o.Cities
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.ZipCodes) {
		toSerialize["zip_codes"] = o.ZipCodes
	}
	if !IsNil(o.AdditionalFields) {
		toSerialize["additional_fields"] = o.AdditionalFields
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableTaxClassRate struct {
	value *TaxClassRate
	isSet bool
}

func (v NullableTaxClassRate) Get() *TaxClassRate {
	return v.value
}

func (v *NullableTaxClassRate) Set(val *TaxClassRate) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxClassRate) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxClassRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxClassRate(val *TaxClassRate) *NullableTaxClassRate {
	return &NullableTaxClassRate{value: val, isSet: true}
}

func (v NullableTaxClassRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxClassRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


