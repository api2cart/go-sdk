/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProductVariantPriceAdd type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductVariantPriceAdd{}

// ProductVariantPriceAdd struct for ProductVariantPriceAdd
type ProductVariantPriceAdd struct {
	// Defines the variant to which the price has to be added
	Id *string `json:"id,omitempty"`
	// Product id
	ProductId *string `json:"product_id,omitempty"`
	// Defines variants's group prices
	GroupPrices []ProductAddGroupPricesInner `json:"group_prices"`
	// Store Id
	StoreId *string `json:"store_id,omitempty"`
}

type _ProductVariantPriceAdd ProductVariantPriceAdd

// NewProductVariantPriceAdd instantiates a new ProductVariantPriceAdd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductVariantPriceAdd(groupPrices []ProductAddGroupPricesInner) *ProductVariantPriceAdd {
	this := ProductVariantPriceAdd{}
	this.GroupPrices = groupPrices
	return &this
}

// NewProductVariantPriceAddWithDefaults instantiates a new ProductVariantPriceAdd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductVariantPriceAddWithDefaults() *ProductVariantPriceAdd {
	this := ProductVariantPriceAdd{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProductVariantPriceAdd) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantPriceAdd) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProductVariantPriceAdd) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProductVariantPriceAdd) SetId(v string) {
	o.Id = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *ProductVariantPriceAdd) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantPriceAdd) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *ProductVariantPriceAdd) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *ProductVariantPriceAdd) SetProductId(v string) {
	o.ProductId = &v
}

// GetGroupPrices returns the GroupPrices field value
func (o *ProductVariantPriceAdd) GetGroupPrices() []ProductAddGroupPricesInner {
	if o == nil {
		var ret []ProductAddGroupPricesInner
		return ret
	}

	return o.GroupPrices
}

// GetGroupPricesOk returns a tuple with the GroupPrices field value
// and a boolean to check if the value has been set.
func (o *ProductVariantPriceAdd) GetGroupPricesOk() ([]ProductAddGroupPricesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupPrices, true
}

// SetGroupPrices sets field value
func (o *ProductVariantPriceAdd) SetGroupPrices(v []ProductAddGroupPricesInner) {
	o.GroupPrices = v
}

// GetStoreId returns the StoreId field value if set, zero value otherwise.
func (o *ProductVariantPriceAdd) GetStoreId() string {
	if o == nil || IsNil(o.StoreId) {
		var ret string
		return ret
	}
	return *o.StoreId
}

// GetStoreIdOk returns a tuple with the StoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantPriceAdd) GetStoreIdOk() (*string, bool) {
	if o == nil || IsNil(o.StoreId) {
		return nil, false
	}
	return o.StoreId, true
}

// HasStoreId returns a boolean if a field has been set.
func (o *ProductVariantPriceAdd) HasStoreId() bool {
	if o != nil && !IsNil(o.StoreId) {
		return true
	}

	return false
}

// SetStoreId gets a reference to the given string and assigns it to the StoreId field.
func (o *ProductVariantPriceAdd) SetStoreId(v string) {
	o.StoreId = &v
}

func (o ProductVariantPriceAdd) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductVariantPriceAdd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	toSerialize["group_prices"] = o.GroupPrices
	if !IsNil(o.StoreId) {
		toSerialize["store_id"] = o.StoreId
	}
	return toSerialize, nil
}

func (o *ProductVariantPriceAdd) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group_prices",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductVariantPriceAdd := _ProductVariantPriceAdd{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductVariantPriceAdd)

	if err != nil {
		return err
	}

	*o = ProductVariantPriceAdd(varProductVariantPriceAdd)

	return err
}

type NullableProductVariantPriceAdd struct {
	value *ProductVariantPriceAdd
	isSet bool
}

func (v NullableProductVariantPriceAdd) Get() *ProductVariantPriceAdd {
	return v.value
}

func (v *NullableProductVariantPriceAdd) Set(val *ProductVariantPriceAdd) {
	v.value = val
	v.isSet = true
}

func (v NullableProductVariantPriceAdd) IsSet() bool {
	return v.isSet
}

func (v *NullableProductVariantPriceAdd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductVariantPriceAdd(val *ProductVariantPriceAdd) *NullableProductVariantPriceAdd {
	return &NullableProductVariantPriceAdd{value: val, isSet: true}
}

func (v NullableProductVariantPriceAdd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductVariantPriceAdd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


