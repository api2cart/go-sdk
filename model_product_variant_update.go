/*
API2Cart OpenAPI

API2Cart

API version: 1.1
Contact: contact@api2cart.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProductVariantUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductVariantUpdate{}

// ProductVariantUpdate struct for ProductVariantUpdate
type ProductVariantUpdate struct {
	// Defines variant update specified by variant id
	Id *string `json:"id,omitempty"`
	// Defines product's id where the variant has to be updated
	ProductId *string `json:"product_id,omitempty"`
	// Defines store id where the variant should be found
	StoreId *string `json:"store_id,omitempty"`
	// Language id
	LangId *string `json:"lang_id,omitempty"`
	// Defines variant's options list
	Options []ProductVariantUpdateOptionsInner `json:"options,omitempty"`
	// Defines variant's name that has to be updated
	Name *string `json:"name,omitempty"`
	// Specifies variant's description
	Description *string `json:"description,omitempty"`
	// Defines short description
	ShortDescription *string `json:"short_description,omitempty"`
	// Specifies variant's model that has to be added
	Model *string `json:"model,omitempty"`
	// Defines new product's variant sku
	Sku *string `json:"sku,omitempty"`
	// Set visibility status
	Visible *string `json:"visible,omitempty"`
	// Defines product variant's status
	Status *string `json:"status,omitempty"`
	// Set backorder status
	BackorderStatus *string `json:"backorder_status,omitempty"`
	// Specify the quantity threshold below which the product is considered low in stock
	LowStockThreshold *float32 `json:"low_stock_threshold,omitempty"`
	// Specifies the set of visible/invisible product's variants for sale
	AvailableForSale *bool `json:"available_for_sale,omitempty"`
	// Defines category's visibility status
	Avail *bool `json:"avail,omitempty"`
	// Defines as a default variant
	IsDefault *bool `json:"is_default,omitempty"`
	// Specifies variant's free shipping flag that has to be added
	IsFreeShipping *bool `json:"is_free_shipping,omitempty"`
	// Specifies whether a tax is charged
	Taxable *bool `json:"taxable,omitempty"`
	// Defines tax classes where entity has to be added
	TaxClassId *string `json:"tax_class_id,omitempty"`
	// Defines whether the product is virtual
	IsVirtual *bool `json:"is_virtual,omitempty"`
	// Defines inventory tracking for product variant
	ManageStock *bool `json:"manage_stock,omitempty"`
	// Set stock status
	InStock *bool `json:"in_stock,omitempty"`
	// This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
	WarehouseId *string `json:"warehouse_id,omitempty"`
	// This parameter allows to reserve/unreserve product variants quantity.
	ReserveQuantity *float32 `json:"reserve_quantity,omitempty"`
	// Defines new products' variants quantity
	Quantity *float32 `json:"quantity,omitempty"`
	// Defines the incremental changes in product quantity
	IncreaseQuantity *float32 `json:"increase_quantity,omitempty"`
	// Defines the decrement changes in product quantity
	ReduceQuantity *float32 `json:"reduce_quantity,omitempty"`
	// Defines new product's variant price
	Price *float32 `json:"price,omitempty"`
	// Defines new product's variant special price
	SpecialPrice *float32 `json:"special_price,omitempty"`
	// Defines new product's retail price
	RetailPrice *float32 `json:"retail_price,omitempty"`
	// Defines product's old price
	OldPrice *float32 `json:"old_price,omitempty"`
	// Defines new product's cost price
	CostPrice *float32 `json:"cost_price,omitempty"`
	// Specifies fixed cost shipping price
	FixedCostShippingPrice *float32 `json:"fixed_cost_shipping_price,omitempty"`
	// Defines the date of special price creation
	SpriceCreate *string `json:"sprice_create,omitempty"`
	// Defines the term of special price offer duration
	SpriceExpire *string `json:"sprice_expire,omitempty"`
	// Weight
	Weight *float32 `json:"weight,omitempty"`
	// A barcode is a unique code composed of numbers used as a product identifier.
	Barcode *string `json:"barcode,omitempty"`
	// Defines product's width
	Width *float32 `json:"width,omitempty"`
	// Weight Unit
	WeightUnit *string `json:"weight_unit,omitempty"`
	// Defines product's height
	Height *float32 `json:"height,omitempty"`
	// Defines product's length
	Length *float32 `json:"length,omitempty"`
	// Global Trade Item Number. An GTIN is an identifier for trade items.
	Gtin *string `json:"gtin,omitempty"`
	// Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.
	Upc *string `json:"upc,omitempty"`
	// Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.
	Mpn *string `json:"mpn,omitempty"`
	// European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.
	Ean *string `json:"ean,omitempty"`
	// International Standard Book Number. An ISBN is a unique identifier for books.
	Isbn *string `json:"isbn,omitempty"`
	// Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes
	HarmonizedSystemCode *string `json:"harmonized_system_code,omitempty"`
	// The country where the inventory item was made
	CountryOfOrigin *string `json:"country_of_origin,omitempty"`
	// Defines unique meta title for each entity
	MetaTitle *string `json:"meta_title,omitempty"`
	// Defines unique meta description of a entity
	MetaDescription *string `json:"meta_description,omitempty"`
	// Defines unique meta keywords for each entity
	MetaKeywords *string `json:"meta_keywords,omitempty"`
	// Specifies the product variant's manufacturer
	Manufacturer *string `json:"manufacturer,omitempty"`
	// Is reindex required
	Reindex *bool `json:"reindex,omitempty"`
	// Is cache clear required
	ClearCache *bool `json:"clear_cache,omitempty"`
}

// NewProductVariantUpdate instantiates a new ProductVariantUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductVariantUpdate() *ProductVariantUpdate {
	this := ProductVariantUpdate{}
	var availableForSale bool = true
	this.AvailableForSale = &availableForSale
	var avail bool = true
	this.Avail = &avail
	var isVirtual bool = false
	this.IsVirtual = &isVirtual
	var increaseQuantity float32 = 0
	this.IncreaseQuantity = &increaseQuantity
	var reduceQuantity float32 = 0
	this.ReduceQuantity = &reduceQuantity
	var weight float32 = 0
	this.Weight = &weight
	var reindex bool = true
	this.Reindex = &reindex
	var clearCache bool = true
	this.ClearCache = &clearCache
	return &this
}

// NewProductVariantUpdateWithDefaults instantiates a new ProductVariantUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductVariantUpdateWithDefaults() *ProductVariantUpdate {
	this := ProductVariantUpdate{}
	var availableForSale bool = true
	this.AvailableForSale = &availableForSale
	var avail bool = true
	this.Avail = &avail
	var isVirtual bool = false
	this.IsVirtual = &isVirtual
	var increaseQuantity float32 = 0
	this.IncreaseQuantity = &increaseQuantity
	var reduceQuantity float32 = 0
	this.ReduceQuantity = &reduceQuantity
	var weight float32 = 0
	this.Weight = &weight
	var reindex bool = true
	this.Reindex = &reindex
	var clearCache bool = true
	this.ClearCache = &clearCache
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProductVariantUpdate) SetId(v string) {
	o.Id = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *ProductVariantUpdate) SetProductId(v string) {
	o.ProductId = &v
}

// GetStoreId returns the StoreId field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetStoreId() string {
	if o == nil || IsNil(o.StoreId) {
		var ret string
		return ret
	}
	return *o.StoreId
}

// GetStoreIdOk returns a tuple with the StoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetStoreIdOk() (*string, bool) {
	if o == nil || IsNil(o.StoreId) {
		return nil, false
	}
	return o.StoreId, true
}

// HasStoreId returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasStoreId() bool {
	if o != nil && !IsNil(o.StoreId) {
		return true
	}

	return false
}

// SetStoreId gets a reference to the given string and assigns it to the StoreId field.
func (o *ProductVariantUpdate) SetStoreId(v string) {
	o.StoreId = &v
}

// GetLangId returns the LangId field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetLangId() string {
	if o == nil || IsNil(o.LangId) {
		var ret string
		return ret
	}
	return *o.LangId
}

// GetLangIdOk returns a tuple with the LangId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetLangIdOk() (*string, bool) {
	if o == nil || IsNil(o.LangId) {
		return nil, false
	}
	return o.LangId, true
}

// HasLangId returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasLangId() bool {
	if o != nil && !IsNil(o.LangId) {
		return true
	}

	return false
}

// SetLangId gets a reference to the given string and assigns it to the LangId field.
func (o *ProductVariantUpdate) SetLangId(v string) {
	o.LangId = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetOptions() []ProductVariantUpdateOptionsInner {
	if o == nil || IsNil(o.Options) {
		var ret []ProductVariantUpdateOptionsInner
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetOptionsOk() ([]ProductVariantUpdateOptionsInner, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []ProductVariantUpdateOptionsInner and assigns it to the Options field.
func (o *ProductVariantUpdate) SetOptions(v []ProductVariantUpdateOptionsInner) {
	o.Options = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProductVariantUpdate) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProductVariantUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetShortDescription() string {
	if o == nil || IsNil(o.ShortDescription) {
		var ret string
		return ret
	}
	return *o.ShortDescription
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetShortDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ShortDescription) {
		return nil, false
	}
	return o.ShortDescription, true
}

// HasShortDescription returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasShortDescription() bool {
	if o != nil && !IsNil(o.ShortDescription) {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given string and assigns it to the ShortDescription field.
func (o *ProductVariantUpdate) SetShortDescription(v string) {
	o.ShortDescription = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *ProductVariantUpdate) SetModel(v string) {
	o.Model = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *ProductVariantUpdate) SetSku(v string) {
	o.Sku = &v
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetVisible() string {
	if o == nil || IsNil(o.Visible) {
		var ret string
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetVisibleOk() (*string, bool) {
	if o == nil || IsNil(o.Visible) {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasVisible() bool {
	if o != nil && !IsNil(o.Visible) {
		return true
	}

	return false
}

// SetVisible gets a reference to the given string and assigns it to the Visible field.
func (o *ProductVariantUpdate) SetVisible(v string) {
	o.Visible = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ProductVariantUpdate) SetStatus(v string) {
	o.Status = &v
}

// GetBackorderStatus returns the BackorderStatus field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetBackorderStatus() string {
	if o == nil || IsNil(o.BackorderStatus) {
		var ret string
		return ret
	}
	return *o.BackorderStatus
}

// GetBackorderStatusOk returns a tuple with the BackorderStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetBackorderStatusOk() (*string, bool) {
	if o == nil || IsNil(o.BackorderStatus) {
		return nil, false
	}
	return o.BackorderStatus, true
}

// HasBackorderStatus returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasBackorderStatus() bool {
	if o != nil && !IsNil(o.BackorderStatus) {
		return true
	}

	return false
}

// SetBackorderStatus gets a reference to the given string and assigns it to the BackorderStatus field.
func (o *ProductVariantUpdate) SetBackorderStatus(v string) {
	o.BackorderStatus = &v
}

// GetLowStockThreshold returns the LowStockThreshold field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetLowStockThreshold() float32 {
	if o == nil || IsNil(o.LowStockThreshold) {
		var ret float32
		return ret
	}
	return *o.LowStockThreshold
}

// GetLowStockThresholdOk returns a tuple with the LowStockThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetLowStockThresholdOk() (*float32, bool) {
	if o == nil || IsNil(o.LowStockThreshold) {
		return nil, false
	}
	return o.LowStockThreshold, true
}

// HasLowStockThreshold returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasLowStockThreshold() bool {
	if o != nil && !IsNil(o.LowStockThreshold) {
		return true
	}

	return false
}

// SetLowStockThreshold gets a reference to the given float32 and assigns it to the LowStockThreshold field.
func (o *ProductVariantUpdate) SetLowStockThreshold(v float32) {
	o.LowStockThreshold = &v
}

// GetAvailableForSale returns the AvailableForSale field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetAvailableForSale() bool {
	if o == nil || IsNil(o.AvailableForSale) {
		var ret bool
		return ret
	}
	return *o.AvailableForSale
}

// GetAvailableForSaleOk returns a tuple with the AvailableForSale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetAvailableForSaleOk() (*bool, bool) {
	if o == nil || IsNil(o.AvailableForSale) {
		return nil, false
	}
	return o.AvailableForSale, true
}

// HasAvailableForSale returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasAvailableForSale() bool {
	if o != nil && !IsNil(o.AvailableForSale) {
		return true
	}

	return false
}

// SetAvailableForSale gets a reference to the given bool and assigns it to the AvailableForSale field.
func (o *ProductVariantUpdate) SetAvailableForSale(v bool) {
	o.AvailableForSale = &v
}

// GetAvail returns the Avail field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetAvail() bool {
	if o == nil || IsNil(o.Avail) {
		var ret bool
		return ret
	}
	return *o.Avail
}

// GetAvailOk returns a tuple with the Avail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetAvailOk() (*bool, bool) {
	if o == nil || IsNil(o.Avail) {
		return nil, false
	}
	return o.Avail, true
}

// HasAvail returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasAvail() bool {
	if o != nil && !IsNil(o.Avail) {
		return true
	}

	return false
}

// SetAvail gets a reference to the given bool and assigns it to the Avail field.
func (o *ProductVariantUpdate) SetAvail(v bool) {
	o.Avail = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *ProductVariantUpdate) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetIsFreeShipping returns the IsFreeShipping field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetIsFreeShipping() bool {
	if o == nil || IsNil(o.IsFreeShipping) {
		var ret bool
		return ret
	}
	return *o.IsFreeShipping
}

// GetIsFreeShippingOk returns a tuple with the IsFreeShipping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetIsFreeShippingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFreeShipping) {
		return nil, false
	}
	return o.IsFreeShipping, true
}

// HasIsFreeShipping returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasIsFreeShipping() bool {
	if o != nil && !IsNil(o.IsFreeShipping) {
		return true
	}

	return false
}

// SetIsFreeShipping gets a reference to the given bool and assigns it to the IsFreeShipping field.
func (o *ProductVariantUpdate) SetIsFreeShipping(v bool) {
	o.IsFreeShipping = &v
}

// GetTaxable returns the Taxable field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetTaxable() bool {
	if o == nil || IsNil(o.Taxable) {
		var ret bool
		return ret
	}
	return *o.Taxable
}

// GetTaxableOk returns a tuple with the Taxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetTaxableOk() (*bool, bool) {
	if o == nil || IsNil(o.Taxable) {
		return nil, false
	}
	return o.Taxable, true
}

// HasTaxable returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasTaxable() bool {
	if o != nil && !IsNil(o.Taxable) {
		return true
	}

	return false
}

// SetTaxable gets a reference to the given bool and assigns it to the Taxable field.
func (o *ProductVariantUpdate) SetTaxable(v bool) {
	o.Taxable = &v
}

// GetTaxClassId returns the TaxClassId field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetTaxClassId() string {
	if o == nil || IsNil(o.TaxClassId) {
		var ret string
		return ret
	}
	return *o.TaxClassId
}

// GetTaxClassIdOk returns a tuple with the TaxClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetTaxClassIdOk() (*string, bool) {
	if o == nil || IsNil(o.TaxClassId) {
		return nil, false
	}
	return o.TaxClassId, true
}

// HasTaxClassId returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasTaxClassId() bool {
	if o != nil && !IsNil(o.TaxClassId) {
		return true
	}

	return false
}

// SetTaxClassId gets a reference to the given string and assigns it to the TaxClassId field.
func (o *ProductVariantUpdate) SetTaxClassId(v string) {
	o.TaxClassId = &v
}

// GetIsVirtual returns the IsVirtual field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetIsVirtual() bool {
	if o == nil || IsNil(o.IsVirtual) {
		var ret bool
		return ret
	}
	return *o.IsVirtual
}

// GetIsVirtualOk returns a tuple with the IsVirtual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetIsVirtualOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVirtual) {
		return nil, false
	}
	return o.IsVirtual, true
}

// HasIsVirtual returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasIsVirtual() bool {
	if o != nil && !IsNil(o.IsVirtual) {
		return true
	}

	return false
}

// SetIsVirtual gets a reference to the given bool and assigns it to the IsVirtual field.
func (o *ProductVariantUpdate) SetIsVirtual(v bool) {
	o.IsVirtual = &v
}

// GetManageStock returns the ManageStock field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetManageStock() bool {
	if o == nil || IsNil(o.ManageStock) {
		var ret bool
		return ret
	}
	return *o.ManageStock
}

// GetManageStockOk returns a tuple with the ManageStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetManageStockOk() (*bool, bool) {
	if o == nil || IsNil(o.ManageStock) {
		return nil, false
	}
	return o.ManageStock, true
}

// HasManageStock returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasManageStock() bool {
	if o != nil && !IsNil(o.ManageStock) {
		return true
	}

	return false
}

// SetManageStock gets a reference to the given bool and assigns it to the ManageStock field.
func (o *ProductVariantUpdate) SetManageStock(v bool) {
	o.ManageStock = &v
}

// GetInStock returns the InStock field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetInStock() bool {
	if o == nil || IsNil(o.InStock) {
		var ret bool
		return ret
	}
	return *o.InStock
}

// GetInStockOk returns a tuple with the InStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetInStockOk() (*bool, bool) {
	if o == nil || IsNil(o.InStock) {
		return nil, false
	}
	return o.InStock, true
}

// HasInStock returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasInStock() bool {
	if o != nil && !IsNil(o.InStock) {
		return true
	}

	return false
}

// SetInStock gets a reference to the given bool and assigns it to the InStock field.
func (o *ProductVariantUpdate) SetInStock(v bool) {
	o.InStock = &v
}

// GetWarehouseId returns the WarehouseId field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetWarehouseId() string {
	if o == nil || IsNil(o.WarehouseId) {
		var ret string
		return ret
	}
	return *o.WarehouseId
}

// GetWarehouseIdOk returns a tuple with the WarehouseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetWarehouseIdOk() (*string, bool) {
	if o == nil || IsNil(o.WarehouseId) {
		return nil, false
	}
	return o.WarehouseId, true
}

// HasWarehouseId returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasWarehouseId() bool {
	if o != nil && !IsNil(o.WarehouseId) {
		return true
	}

	return false
}

// SetWarehouseId gets a reference to the given string and assigns it to the WarehouseId field.
func (o *ProductVariantUpdate) SetWarehouseId(v string) {
	o.WarehouseId = &v
}

// GetReserveQuantity returns the ReserveQuantity field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetReserveQuantity() float32 {
	if o == nil || IsNil(o.ReserveQuantity) {
		var ret float32
		return ret
	}
	return *o.ReserveQuantity
}

// GetReserveQuantityOk returns a tuple with the ReserveQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetReserveQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.ReserveQuantity) {
		return nil, false
	}
	return o.ReserveQuantity, true
}

// HasReserveQuantity returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasReserveQuantity() bool {
	if o != nil && !IsNil(o.ReserveQuantity) {
		return true
	}

	return false
}

// SetReserveQuantity gets a reference to the given float32 and assigns it to the ReserveQuantity field.
func (o *ProductVariantUpdate) SetReserveQuantity(v float32) {
	o.ReserveQuantity = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *ProductVariantUpdate) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetIncreaseQuantity returns the IncreaseQuantity field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetIncreaseQuantity() float32 {
	if o == nil || IsNil(o.IncreaseQuantity) {
		var ret float32
		return ret
	}
	return *o.IncreaseQuantity
}

// GetIncreaseQuantityOk returns a tuple with the IncreaseQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetIncreaseQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.IncreaseQuantity) {
		return nil, false
	}
	return o.IncreaseQuantity, true
}

// HasIncreaseQuantity returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasIncreaseQuantity() bool {
	if o != nil && !IsNil(o.IncreaseQuantity) {
		return true
	}

	return false
}

// SetIncreaseQuantity gets a reference to the given float32 and assigns it to the IncreaseQuantity field.
func (o *ProductVariantUpdate) SetIncreaseQuantity(v float32) {
	o.IncreaseQuantity = &v
}

// GetReduceQuantity returns the ReduceQuantity field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetReduceQuantity() float32 {
	if o == nil || IsNil(o.ReduceQuantity) {
		var ret float32
		return ret
	}
	return *o.ReduceQuantity
}

// GetReduceQuantityOk returns a tuple with the ReduceQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetReduceQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.ReduceQuantity) {
		return nil, false
	}
	return o.ReduceQuantity, true
}

// HasReduceQuantity returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasReduceQuantity() bool {
	if o != nil && !IsNil(o.ReduceQuantity) {
		return true
	}

	return false
}

// SetReduceQuantity gets a reference to the given float32 and assigns it to the ReduceQuantity field.
func (o *ProductVariantUpdate) SetReduceQuantity(v float32) {
	o.ReduceQuantity = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *ProductVariantUpdate) SetPrice(v float32) {
	o.Price = &v
}

// GetSpecialPrice returns the SpecialPrice field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetSpecialPrice() float32 {
	if o == nil || IsNil(o.SpecialPrice) {
		var ret float32
		return ret
	}
	return *o.SpecialPrice
}

// GetSpecialPriceOk returns a tuple with the SpecialPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetSpecialPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.SpecialPrice) {
		return nil, false
	}
	return o.SpecialPrice, true
}

// HasSpecialPrice returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasSpecialPrice() bool {
	if o != nil && !IsNil(o.SpecialPrice) {
		return true
	}

	return false
}

// SetSpecialPrice gets a reference to the given float32 and assigns it to the SpecialPrice field.
func (o *ProductVariantUpdate) SetSpecialPrice(v float32) {
	o.SpecialPrice = &v
}

// GetRetailPrice returns the RetailPrice field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetRetailPrice() float32 {
	if o == nil || IsNil(o.RetailPrice) {
		var ret float32
		return ret
	}
	return *o.RetailPrice
}

// GetRetailPriceOk returns a tuple with the RetailPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetRetailPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.RetailPrice) {
		return nil, false
	}
	return o.RetailPrice, true
}

// HasRetailPrice returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasRetailPrice() bool {
	if o != nil && !IsNil(o.RetailPrice) {
		return true
	}

	return false
}

// SetRetailPrice gets a reference to the given float32 and assigns it to the RetailPrice field.
func (o *ProductVariantUpdate) SetRetailPrice(v float32) {
	o.RetailPrice = &v
}

// GetOldPrice returns the OldPrice field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetOldPrice() float32 {
	if o == nil || IsNil(o.OldPrice) {
		var ret float32
		return ret
	}
	return *o.OldPrice
}

// GetOldPriceOk returns a tuple with the OldPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetOldPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.OldPrice) {
		return nil, false
	}
	return o.OldPrice, true
}

// HasOldPrice returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasOldPrice() bool {
	if o != nil && !IsNil(o.OldPrice) {
		return true
	}

	return false
}

// SetOldPrice gets a reference to the given float32 and assigns it to the OldPrice field.
func (o *ProductVariantUpdate) SetOldPrice(v float32) {
	o.OldPrice = &v
}

// GetCostPrice returns the CostPrice field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetCostPrice() float32 {
	if o == nil || IsNil(o.CostPrice) {
		var ret float32
		return ret
	}
	return *o.CostPrice
}

// GetCostPriceOk returns a tuple with the CostPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetCostPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.CostPrice) {
		return nil, false
	}
	return o.CostPrice, true
}

// HasCostPrice returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasCostPrice() bool {
	if o != nil && !IsNil(o.CostPrice) {
		return true
	}

	return false
}

// SetCostPrice gets a reference to the given float32 and assigns it to the CostPrice field.
func (o *ProductVariantUpdate) SetCostPrice(v float32) {
	o.CostPrice = &v
}

// GetFixedCostShippingPrice returns the FixedCostShippingPrice field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetFixedCostShippingPrice() float32 {
	if o == nil || IsNil(o.FixedCostShippingPrice) {
		var ret float32
		return ret
	}
	return *o.FixedCostShippingPrice
}

// GetFixedCostShippingPriceOk returns a tuple with the FixedCostShippingPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetFixedCostShippingPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.FixedCostShippingPrice) {
		return nil, false
	}
	return o.FixedCostShippingPrice, true
}

// HasFixedCostShippingPrice returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasFixedCostShippingPrice() bool {
	if o != nil && !IsNil(o.FixedCostShippingPrice) {
		return true
	}

	return false
}

// SetFixedCostShippingPrice gets a reference to the given float32 and assigns it to the FixedCostShippingPrice field.
func (o *ProductVariantUpdate) SetFixedCostShippingPrice(v float32) {
	o.FixedCostShippingPrice = &v
}

// GetSpriceCreate returns the SpriceCreate field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetSpriceCreate() string {
	if o == nil || IsNil(o.SpriceCreate) {
		var ret string
		return ret
	}
	return *o.SpriceCreate
}

// GetSpriceCreateOk returns a tuple with the SpriceCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetSpriceCreateOk() (*string, bool) {
	if o == nil || IsNil(o.SpriceCreate) {
		return nil, false
	}
	return o.SpriceCreate, true
}

// HasSpriceCreate returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasSpriceCreate() bool {
	if o != nil && !IsNil(o.SpriceCreate) {
		return true
	}

	return false
}

// SetSpriceCreate gets a reference to the given string and assigns it to the SpriceCreate field.
func (o *ProductVariantUpdate) SetSpriceCreate(v string) {
	o.SpriceCreate = &v
}

// GetSpriceExpire returns the SpriceExpire field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetSpriceExpire() string {
	if o == nil || IsNil(o.SpriceExpire) {
		var ret string
		return ret
	}
	return *o.SpriceExpire
}

// GetSpriceExpireOk returns a tuple with the SpriceExpire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetSpriceExpireOk() (*string, bool) {
	if o == nil || IsNil(o.SpriceExpire) {
		return nil, false
	}
	return o.SpriceExpire, true
}

// HasSpriceExpire returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasSpriceExpire() bool {
	if o != nil && !IsNil(o.SpriceExpire) {
		return true
	}

	return false
}

// SetSpriceExpire gets a reference to the given string and assigns it to the SpriceExpire field.
func (o *ProductVariantUpdate) SetSpriceExpire(v string) {
	o.SpriceExpire = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetWeight() float32 {
	if o == nil || IsNil(o.Weight) {
		var ret float32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float32 and assigns it to the Weight field.
func (o *ProductVariantUpdate) SetWeight(v float32) {
	o.Weight = &v
}

// GetBarcode returns the Barcode field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetBarcode() string {
	if o == nil || IsNil(o.Barcode) {
		var ret string
		return ret
	}
	return *o.Barcode
}

// GetBarcodeOk returns a tuple with the Barcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetBarcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Barcode) {
		return nil, false
	}
	return o.Barcode, true
}

// HasBarcode returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasBarcode() bool {
	if o != nil && !IsNil(o.Barcode) {
		return true
	}

	return false
}

// SetBarcode gets a reference to the given string and assigns it to the Barcode field.
func (o *ProductVariantUpdate) SetBarcode(v string) {
	o.Barcode = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetWidth() float32 {
	if o == nil || IsNil(o.Width) {
		var ret float32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetWidthOk() (*float32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given float32 and assigns it to the Width field.
func (o *ProductVariantUpdate) SetWidth(v float32) {
	o.Width = &v
}

// GetWeightUnit returns the WeightUnit field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetWeightUnit() string {
	if o == nil || IsNil(o.WeightUnit) {
		var ret string
		return ret
	}
	return *o.WeightUnit
}

// GetWeightUnitOk returns a tuple with the WeightUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetWeightUnitOk() (*string, bool) {
	if o == nil || IsNil(o.WeightUnit) {
		return nil, false
	}
	return o.WeightUnit, true
}

// HasWeightUnit returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasWeightUnit() bool {
	if o != nil && !IsNil(o.WeightUnit) {
		return true
	}

	return false
}

// SetWeightUnit gets a reference to the given string and assigns it to the WeightUnit field.
func (o *ProductVariantUpdate) SetWeightUnit(v string) {
	o.WeightUnit = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetHeight() float32 {
	if o == nil || IsNil(o.Height) {
		var ret float32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetHeightOk() (*float32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given float32 and assigns it to the Height field.
func (o *ProductVariantUpdate) SetHeight(v float32) {
	o.Height = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetLength() float32 {
	if o == nil || IsNil(o.Length) {
		var ret float32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetLengthOk() (*float32, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given float32 and assigns it to the Length field.
func (o *ProductVariantUpdate) SetLength(v float32) {
	o.Length = &v
}

// GetGtin returns the Gtin field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetGtin() string {
	if o == nil || IsNil(o.Gtin) {
		var ret string
		return ret
	}
	return *o.Gtin
}

// GetGtinOk returns a tuple with the Gtin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetGtinOk() (*string, bool) {
	if o == nil || IsNil(o.Gtin) {
		return nil, false
	}
	return o.Gtin, true
}

// HasGtin returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasGtin() bool {
	if o != nil && !IsNil(o.Gtin) {
		return true
	}

	return false
}

// SetGtin gets a reference to the given string and assigns it to the Gtin field.
func (o *ProductVariantUpdate) SetGtin(v string) {
	o.Gtin = &v
}

// GetUpc returns the Upc field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetUpc() string {
	if o == nil || IsNil(o.Upc) {
		var ret string
		return ret
	}
	return *o.Upc
}

// GetUpcOk returns a tuple with the Upc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetUpcOk() (*string, bool) {
	if o == nil || IsNil(o.Upc) {
		return nil, false
	}
	return o.Upc, true
}

// HasUpc returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasUpc() bool {
	if o != nil && !IsNil(o.Upc) {
		return true
	}

	return false
}

// SetUpc gets a reference to the given string and assigns it to the Upc field.
func (o *ProductVariantUpdate) SetUpc(v string) {
	o.Upc = &v
}

// GetMpn returns the Mpn field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetMpn() string {
	if o == nil || IsNil(o.Mpn) {
		var ret string
		return ret
	}
	return *o.Mpn
}

// GetMpnOk returns a tuple with the Mpn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetMpnOk() (*string, bool) {
	if o == nil || IsNil(o.Mpn) {
		return nil, false
	}
	return o.Mpn, true
}

// HasMpn returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasMpn() bool {
	if o != nil && !IsNil(o.Mpn) {
		return true
	}

	return false
}

// SetMpn gets a reference to the given string and assigns it to the Mpn field.
func (o *ProductVariantUpdate) SetMpn(v string) {
	o.Mpn = &v
}

// GetEan returns the Ean field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetEan() string {
	if o == nil || IsNil(o.Ean) {
		var ret string
		return ret
	}
	return *o.Ean
}

// GetEanOk returns a tuple with the Ean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetEanOk() (*string, bool) {
	if o == nil || IsNil(o.Ean) {
		return nil, false
	}
	return o.Ean, true
}

// HasEan returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasEan() bool {
	if o != nil && !IsNil(o.Ean) {
		return true
	}

	return false
}

// SetEan gets a reference to the given string and assigns it to the Ean field.
func (o *ProductVariantUpdate) SetEan(v string) {
	o.Ean = &v
}

// GetIsbn returns the Isbn field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetIsbn() string {
	if o == nil || IsNil(o.Isbn) {
		var ret string
		return ret
	}
	return *o.Isbn
}

// GetIsbnOk returns a tuple with the Isbn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetIsbnOk() (*string, bool) {
	if o == nil || IsNil(o.Isbn) {
		return nil, false
	}
	return o.Isbn, true
}

// HasIsbn returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasIsbn() bool {
	if o != nil && !IsNil(o.Isbn) {
		return true
	}

	return false
}

// SetIsbn gets a reference to the given string and assigns it to the Isbn field.
func (o *ProductVariantUpdate) SetIsbn(v string) {
	o.Isbn = &v
}

// GetHarmonizedSystemCode returns the HarmonizedSystemCode field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetHarmonizedSystemCode() string {
	if o == nil || IsNil(o.HarmonizedSystemCode) {
		var ret string
		return ret
	}
	return *o.HarmonizedSystemCode
}

// GetHarmonizedSystemCodeOk returns a tuple with the HarmonizedSystemCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetHarmonizedSystemCodeOk() (*string, bool) {
	if o == nil || IsNil(o.HarmonizedSystemCode) {
		return nil, false
	}
	return o.HarmonizedSystemCode, true
}

// HasHarmonizedSystemCode returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasHarmonizedSystemCode() bool {
	if o != nil && !IsNil(o.HarmonizedSystemCode) {
		return true
	}

	return false
}

// SetHarmonizedSystemCode gets a reference to the given string and assigns it to the HarmonizedSystemCode field.
func (o *ProductVariantUpdate) SetHarmonizedSystemCode(v string) {
	o.HarmonizedSystemCode = &v
}

// GetCountryOfOrigin returns the CountryOfOrigin field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetCountryOfOrigin() string {
	if o == nil || IsNil(o.CountryOfOrigin) {
		var ret string
		return ret
	}
	return *o.CountryOfOrigin
}

// GetCountryOfOriginOk returns a tuple with the CountryOfOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetCountryOfOriginOk() (*string, bool) {
	if o == nil || IsNil(o.CountryOfOrigin) {
		return nil, false
	}
	return o.CountryOfOrigin, true
}

// HasCountryOfOrigin returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasCountryOfOrigin() bool {
	if o != nil && !IsNil(o.CountryOfOrigin) {
		return true
	}

	return false
}

// SetCountryOfOrigin gets a reference to the given string and assigns it to the CountryOfOrigin field.
func (o *ProductVariantUpdate) SetCountryOfOrigin(v string) {
	o.CountryOfOrigin = &v
}

// GetMetaTitle returns the MetaTitle field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetMetaTitle() string {
	if o == nil || IsNil(o.MetaTitle) {
		var ret string
		return ret
	}
	return *o.MetaTitle
}

// GetMetaTitleOk returns a tuple with the MetaTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetMetaTitleOk() (*string, bool) {
	if o == nil || IsNil(o.MetaTitle) {
		return nil, false
	}
	return o.MetaTitle, true
}

// HasMetaTitle returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasMetaTitle() bool {
	if o != nil && !IsNil(o.MetaTitle) {
		return true
	}

	return false
}

// SetMetaTitle gets a reference to the given string and assigns it to the MetaTitle field.
func (o *ProductVariantUpdate) SetMetaTitle(v string) {
	o.MetaTitle = &v
}

// GetMetaDescription returns the MetaDescription field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetMetaDescription() string {
	if o == nil || IsNil(o.MetaDescription) {
		var ret string
		return ret
	}
	return *o.MetaDescription
}

// GetMetaDescriptionOk returns a tuple with the MetaDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetMetaDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.MetaDescription) {
		return nil, false
	}
	return o.MetaDescription, true
}

// HasMetaDescription returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasMetaDescription() bool {
	if o != nil && !IsNil(o.MetaDescription) {
		return true
	}

	return false
}

// SetMetaDescription gets a reference to the given string and assigns it to the MetaDescription field.
func (o *ProductVariantUpdate) SetMetaDescription(v string) {
	o.MetaDescription = &v
}

// GetMetaKeywords returns the MetaKeywords field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetMetaKeywords() string {
	if o == nil || IsNil(o.MetaKeywords) {
		var ret string
		return ret
	}
	return *o.MetaKeywords
}

// GetMetaKeywordsOk returns a tuple with the MetaKeywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetMetaKeywordsOk() (*string, bool) {
	if o == nil || IsNil(o.MetaKeywords) {
		return nil, false
	}
	return o.MetaKeywords, true
}

// HasMetaKeywords returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasMetaKeywords() bool {
	if o != nil && !IsNil(o.MetaKeywords) {
		return true
	}

	return false
}

// SetMetaKeywords gets a reference to the given string and assigns it to the MetaKeywords field.
func (o *ProductVariantUpdate) SetMetaKeywords(v string) {
	o.MetaKeywords = &v
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetManufacturer() string {
	if o == nil || IsNil(o.Manufacturer) {
		var ret string
		return ret
	}
	return *o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetManufacturerOk() (*string, bool) {
	if o == nil || IsNil(o.Manufacturer) {
		return nil, false
	}
	return o.Manufacturer, true
}

// HasManufacturer returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasManufacturer() bool {
	if o != nil && !IsNil(o.Manufacturer) {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given string and assigns it to the Manufacturer field.
func (o *ProductVariantUpdate) SetManufacturer(v string) {
	o.Manufacturer = &v
}

// GetReindex returns the Reindex field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetReindex() bool {
	if o == nil || IsNil(o.Reindex) {
		var ret bool
		return ret
	}
	return *o.Reindex
}

// GetReindexOk returns a tuple with the Reindex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetReindexOk() (*bool, bool) {
	if o == nil || IsNil(o.Reindex) {
		return nil, false
	}
	return o.Reindex, true
}

// HasReindex returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasReindex() bool {
	if o != nil && !IsNil(o.Reindex) {
		return true
	}

	return false
}

// SetReindex gets a reference to the given bool and assigns it to the Reindex field.
func (o *ProductVariantUpdate) SetReindex(v bool) {
	o.Reindex = &v
}

// GetClearCache returns the ClearCache field value if set, zero value otherwise.
func (o *ProductVariantUpdate) GetClearCache() bool {
	if o == nil || IsNil(o.ClearCache) {
		var ret bool
		return ret
	}
	return *o.ClearCache
}

// GetClearCacheOk returns a tuple with the ClearCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariantUpdate) GetClearCacheOk() (*bool, bool) {
	if o == nil || IsNil(o.ClearCache) {
		return nil, false
	}
	return o.ClearCache, true
}

// HasClearCache returns a boolean if a field has been set.
func (o *ProductVariantUpdate) HasClearCache() bool {
	if o != nil && !IsNil(o.ClearCache) {
		return true
	}

	return false
}

// SetClearCache gets a reference to the given bool and assigns it to the ClearCache field.
func (o *ProductVariantUpdate) SetClearCache(v bool) {
	o.ClearCache = &v
}

func (o ProductVariantUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductVariantUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	if !IsNil(o.StoreId) {
		toSerialize["store_id"] = o.StoreId
	}
	if !IsNil(o.LangId) {
		toSerialize["lang_id"] = o.LangId
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ShortDescription) {
		toSerialize["short_description"] = o.ShortDescription
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.Visible) {
		toSerialize["visible"] = o.Visible
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.BackorderStatus) {
		toSerialize["backorder_status"] = o.BackorderStatus
	}
	if !IsNil(o.LowStockThreshold) {
		toSerialize["low_stock_threshold"] = o.LowStockThreshold
	}
	if !IsNil(o.AvailableForSale) {
		toSerialize["available_for_sale"] = o.AvailableForSale
	}
	if !IsNil(o.Avail) {
		toSerialize["avail"] = o.Avail
	}
	if !IsNil(o.IsDefault) {
		toSerialize["is_default"] = o.IsDefault
	}
	if !IsNil(o.IsFreeShipping) {
		toSerialize["is_free_shipping"] = o.IsFreeShipping
	}
	if !IsNil(o.Taxable) {
		toSerialize["taxable"] = o.Taxable
	}
	if !IsNil(o.TaxClassId) {
		toSerialize["tax_class_id"] = o.TaxClassId
	}
	if !IsNil(o.IsVirtual) {
		toSerialize["is_virtual"] = o.IsVirtual
	}
	if !IsNil(o.ManageStock) {
		toSerialize["manage_stock"] = o.ManageStock
	}
	if !IsNil(o.InStock) {
		toSerialize["in_stock"] = o.InStock
	}
	if !IsNil(o.WarehouseId) {
		toSerialize["warehouse_id"] = o.WarehouseId
	}
	if !IsNil(o.ReserveQuantity) {
		toSerialize["reserve_quantity"] = o.ReserveQuantity
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.IncreaseQuantity) {
		toSerialize["increase_quantity"] = o.IncreaseQuantity
	}
	if !IsNil(o.ReduceQuantity) {
		toSerialize["reduce_quantity"] = o.ReduceQuantity
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.SpecialPrice) {
		toSerialize["special_price"] = o.SpecialPrice
	}
	if !IsNil(o.RetailPrice) {
		toSerialize["retail_price"] = o.RetailPrice
	}
	if !IsNil(o.OldPrice) {
		toSerialize["old_price"] = o.OldPrice
	}
	if !IsNil(o.CostPrice) {
		toSerialize["cost_price"] = o.CostPrice
	}
	if !IsNil(o.FixedCostShippingPrice) {
		toSerialize["fixed_cost_shipping_price"] = o.FixedCostShippingPrice
	}
	if !IsNil(o.SpriceCreate) {
		toSerialize["sprice_create"] = o.SpriceCreate
	}
	if !IsNil(o.SpriceExpire) {
		toSerialize["sprice_expire"] = o.SpriceExpire
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	if !IsNil(o.Barcode) {
		toSerialize["barcode"] = o.Barcode
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	if !IsNil(o.WeightUnit) {
		toSerialize["weight_unit"] = o.WeightUnit
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.Gtin) {
		toSerialize["gtin"] = o.Gtin
	}
	if !IsNil(o.Upc) {
		toSerialize["upc"] = o.Upc
	}
	if !IsNil(o.Mpn) {
		toSerialize["mpn"] = o.Mpn
	}
	if !IsNil(o.Ean) {
		toSerialize["ean"] = o.Ean
	}
	if !IsNil(o.Isbn) {
		toSerialize["isbn"] = o.Isbn
	}
	if !IsNil(o.HarmonizedSystemCode) {
		toSerialize["harmonized_system_code"] = o.HarmonizedSystemCode
	}
	if !IsNil(o.CountryOfOrigin) {
		toSerialize["country_of_origin"] = o.CountryOfOrigin
	}
	if !IsNil(o.MetaTitle) {
		toSerialize["meta_title"] = o.MetaTitle
	}
	if !IsNil(o.MetaDescription) {
		toSerialize["meta_description"] = o.MetaDescription
	}
	if !IsNil(o.MetaKeywords) {
		toSerialize["meta_keywords"] = o.MetaKeywords
	}
	if !IsNil(o.Manufacturer) {
		toSerialize["manufacturer"] = o.Manufacturer
	}
	if !IsNil(o.Reindex) {
		toSerialize["reindex"] = o.Reindex
	}
	if !IsNil(o.ClearCache) {
		toSerialize["clear_cache"] = o.ClearCache
	}
	return toSerialize, nil
}

type NullableProductVariantUpdate struct {
	value *ProductVariantUpdate
	isSet bool
}

func (v NullableProductVariantUpdate) Get() *ProductVariantUpdate {
	return v.value
}

func (v *NullableProductVariantUpdate) Set(val *ProductVariantUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableProductVariantUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableProductVariantUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductVariantUpdate(val *ProductVariantUpdate) *NullableProductVariantUpdate {
	return &NullableProductVariantUpdate{value: val, isSet: true}
}

func (v NullableProductVariantUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductVariantUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


